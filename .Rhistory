# we sample from the pico file to make random northern group
randIq<-as.character(sample(pico$Label,sizeIq,replace=F))
# we keep the ones not sampled to make the other locations
leftover1<-as.character(setdiff(pico$Label, randIq))
randAn<-as.character(sample(leftover1,sizeAn,replace=F))
leftover2<-as.character(setdiff(leftover1, randAn))
randChu<-as.character(sample(leftover2,sizeChu,replace=F))
leftover3<-as.character(setdiff(leftover2, randChu))
randCon<-as.character(sample(leftover3,sizeCon,replace=F))
leftover4<-as.character(setdiff(leftover3, randCon))
randPan<-as.character(sample(leftover4,sizePan,replace=F))
leftover5<-as.character(setdiff(leftover4, randPan))
randHer<-as.character(sample(leftover5,sizeHer,replace=F))
leftover6<-as.character(setdiff(leftover5, randHer))
randSan<-as.character(sample(leftover6,sizeSan,replace=F))
leftover7<-as.character(setdiff(leftover6, randSan))
randAri<-as.character(sample(leftover7,sizeAri,replace=F))
leftover8<-as.character(setdiff(leftover7, randAri))
randMej<-as.character(sample(leftover8,sizeMej,replace=F))
leftover9<-as.character(setdiff(leftover8, randMej))
randCa<-leftover9
# now we set the random sampled populations for analysis
ranResultsSite<-set.populations(ranSite,list(randIq,randAri,randMej,randCa,randAn,randChu,randCon,randPan,randHer,randSan))
ranResultsSite@region.data@populations2 #check it works
ranSnn<-F_ST.stats.2(ranResultsSite,snn=TRUE)
# and we saved the results for each rep in the ranSnnout vector
ranSnnSite[i]<-ranSnn@Hudson.Snn
}
SnnquantSite<-quantile(ranSnnSite,probs=c(0.05,0.95))
SnnPSite<-ecdf(ranSnnSite)
SnnPvalSite<-1-SnnPSite(SnnBySite)
```
The analysis of geographic structure included all samples of *A. psittacus* collected in this study (Table 1) with the exception of Taltal that was excluded for having a n=1. The Snn estimated considering all the populations sampled (Snn= `r round(SnnBySite,2)`) was not significantly different of the expected by a 95% probability distribution of randomized values (5%= `r round(SnnquantSite[1],2)`, 95%=`r round(SnnquantSite[2],2)`, P=`r round(SnnPvalSite,3)`). When sequences were separated into northern and southern regions placing the geographic division at `r (-1*divline)`°S, there was significant geographic structure between the two regions. The observed Snn was `r round(SnnByDivline,2)`, with the 95% distribution of randomized values from `r round(SnnquantDivline[1],2)` and `r round(SnnquantDivline[2],2)` (P= `r round(SnnPvalDivline,3)`). Other regional bipartions for the proposed location of the biogeographic transition such as 31°S and 32°S generated similar results. The largest value of Snn was when Punta Chungo (31.8°S) was included in the northern group.
```{r haplotype network in R,eval=FALSE,warning=FALSE,message=FALSE,echo=FALSE}
library(pegas)
library(muscle)
#http://web.stanford.edu/group/hadlylab/tempnet/ could potentially be useful for some other study...
#http://stackoverflow.com/questions/25755930/how-to-plot-pie-charts-in-haplonet-haplotype-networks-pegas
# -----To do things in R, but pies for site still not working--------
# to use the ONLY PICO aligned file
picoalign<-muscle("picoAligned.fasta")
picoalign$seqs->seqData # now we can separate a dataframe with the names and sequences
# we need to convert the aligned sequences (now in "seqData") into a DNAbin file to use the other functions
y <- t(sapply(strsplit(seqData[,2],""), tolower))
rownames(y) <- seqData[,1]
as.DNAbin(y)->seqalign
# small dataset to TRY OUT THINGS...
seqalign[1:10,]->seqalign
labels(seqalign)->namesNice
# Only PICOROCO data, the dnaBin file from the picoroco script is seqalign
# First, we need to extract the haplotypes from our DNA sequences. By default, if we don't put labels, is going to use roman numerals, but we can set it to put our labels.
haplotype(seqalign)->picoHap
# Function by Samuel Brown in r-bloggers to put the names
haploName<-function(hap, dat){
dat<-as.matrix(dat)
nam<-dimnames(dat)[[1]]
for(i in 1:dim(hap)[1]) attr(hap, "dimnames")[[1]][i]<-nam[attr(hap, "index")[[i]][1]]
hap
}
haploName(picoHap,seqalign)
## the indices of the individuals belonging to the 1st haplotype:
attr(picoHap, "index")[[1]]
# We compute the haplotype network
haploNet(picoHap)->net
# And we can plot it
plot(net, size=attr(net, "freq"), scale.ratio = 2, cex = 0.8)
str(picoHap)
```
```{r dataset for haplotype network in PopArt,eval=FALSE,echo=FALSE,warning=FALSE,message=FALSE}
library(caret)
# I'm running this only once and then saving the files to use in PopArt
# ------To make traits and use in PopArt--------------------------
View(picoLocations)
# by sites name
dummies <- caret::dummyVars(Label ~ ., data = picoLocations)
predict(dummies, newdata = picoLocations)->dummyBySite
row.names(dummyBySite)<-picoLocations$Label
write.csv(dummyBySite,"dummyBySite.csv")
# by biogeographic break
divline=(-30)
picoLocations[,c("Label","Latitude")]->picoLoc
norte<-picoLoc[which(picoLoc$Latitude>divline),]
norte$Region <-"north"
sur<-picoLoc[which(picoLoc$Latitude<divline),]
sur$Region<-"south"
rbind(norte,sur)->picoLoc2
dummies <- caret::dummyVars(Label ~ ., data = picoLoc2)
predict(dummies, newdata = picoLoc2)->dummyByRegion
row.names(dummyByRegion)<-picoLoc2$Label
write.csv(dummyByRegion,"dummyByRegion30.csv")
```
When the geographic division at 30°S is represented in a haplotype network (showing populations north or south of the break) there is no clear geographic structure. The haplotype network shows a few more common haplotypes present both in the north and the south, that ramify into several haplotypes in a star-like/spider web pattern. There is a mixing of northen and southern locations with only a small clade that is composed just by southern haplotypes. Similar results are obtained using biogeographic transitions at 31° and 32°S.
![haplotype network](haploNet30.pdf)
**Figure 2:** Haplotype network of COI haplotypes for *Austromegabalanus psittacus*. Circle size is proportional to the frequency of each haplotype in the population. Sampling locations to the north or south of the geographic division set at 30°S are represented by different colors. The haplotype network was constructed using [PopArt](http://popart.otago.ac.nz)
```{r isolation by distance,echo=FALSE, results='hide',message=FALSE,warning=FALSE}
#http://www.molecularecologist.com/2012/09/isolating-isolation-by-distance/
library(adegenet) #http://adegenet.r-forge.r-project.org/
library(ape)
library(muscle)
# load locations
locationsIBD<-read.csv("forIBD.csv",header=T)
# load the FASTA file with the picoroco data and separate data frame with names and sequences
picoAligned<-muscle("PicoAligned.fasta")
picoAligned$seqs->seqData
# to get populations and add them to the sequences
picoPop<-pico[,c("Label","SiteName")]
seqPop<-merge(seqData,picoPop,by.x="V1",by.y="Label")
# we need to convert the aligned sequences (now in "seqData") into a DNAbin file
y <- t(sapply(strsplit(seqPop[,2],""), tolower))
rownames(y) <- seqPop[,1]
namesPop<- seqPop[,3] # we need these names later
as.DNAbin(y)->picobin
# to transform picobin to genind and be able to use the adegenet package
DNAbin2genind(x=picobin, pop=namesPop)->picogenind
# Ok, the former should work to set populations but it doesn't, but here...a little trick! and it works! and the transformation to genpop also needs a value in pop.names...sigh...
picogenind@pop<-namesPop
picogenind@pop.names<-as.character(unique(namesPop))
# now we trasnform genind to genpop to do IBD
picogenpop<-genind2genpop(picogenind)
Dgen <- dist.genpop(picogenpop,method=2)
# to make a matrix of geographic distance between sites
as.matrix(locationsIBD[,c("Longitude","Latitude")])
mat<-as.matrix(locationsIBD[,c("Longitude","Latitude")])
dist(mat)->Dgeo
# isolation by distance
ibd <- mantel.randtest(Dgen,Dgeo,nrepet=1000)
ibd$p->ibdPvalue
#plot(ibd)
```
Our results considering all populations don't support and isolation by distance pattern (P=`r round(ibdPvalue,3)`).
```{r amova ,echo=FALSE, results='hide',message=FALSE,warning=FALSE}
library(pegas)
# load locations
sites<-read.csv("forIBD.csv",header=T)
# to separate by biogeographic break in a northern and southern regions----
#divline 30°S o 31°S----
divline=(-30)
northern<-which(sites$Latitude >= divline)
southern<-which(sites$Latitude < divline)
sites$region[northern]<-"north"
sites$region[southern]<-"south"
# using the labels of the matrix of genetic distances to assign the region
as.data.frame(labels(Dgen))->namesA;names(namesA)<-"Locations"
merge(namesA,sites,by.x="Locations",by.y="SiteName",all.x=T)->temp
as.factor(temp$region)->region
# performing amova
amova(Dgen~region,nperm=10000)->amovaRes
amovaRes$varcomp[1,2]->amovaPvalue30
#divline 32°S----
divline=(-32)
northern<-which(sites$Latitude >= divline)
southern<-which(sites$Latitude < divline)
sites$region[northern]<-"north"
sites$region[southern]<-"south"
# using the labels of the matrix of genetic distances to assign the region
as.data.frame(labels(Dgen))->namesA;names(namesA)<-"Locations"
merge(namesA,sites,by.x="Locations",by.y="SiteName",all.x=T)->temp
as.factor(temp$region)->region
# performing amova
amova(Dgen~region,nperm=10000)->amovaRes
amovaRes$varcomp[1,2]->amovaPvalue32
```
The results of the AMOVA comparing the northern and southern regions varied depending on the choice of the geographic division. When the geographic division was set at 30° or 31°S (same locations in the "northern" group), there were no significant differences between northern and southern groups (P~30°S~=`r round(amovaPvalue30,3)`). When the transition zone is instead set at 32°S (with Punta Chungo included now in the "northern" group), there is a significant difference between the northern and southern region (P~32°S~=`r round(amovaPvalue32,3)`.These results support the geographic differentiation found with the Snn index.
##Discussion
The low genetic diversity of *A. psittacus* found accross most of the Chilean coast suggest high dispersal potential of this species and high connectivity accross populations. While the haplotype network and the overall analysis suggests only sligth variation in mitochondrial composition of *A. psittacus* populations, the analysis by region supports the differentiation of a northern and southern region. The concordance of this signal with biogeographic and oceanographic transitions along the Chilean coast is compelling. The geographic structure of picoroco reflects the biogeographic break around 30°S that separates the Peruvian biogeographic province and the transition area between the Peruvian and the Magellan region.
At this point it is difficult to predict why some barnacles - all of which have high potential for larval dispersal - exhibit population structure (Sotka et al 2004, Ewers et al 2015) and others do not (Wares and Castañeda 2005, Zakas et al. 2009). Certainly these data suggest that this subtidal-to-intertidal species has no problem dispersing larvae broad distances to maintain connectivity among populations, which bodes well for the species as a resource in that management efforts can focus across the whole coast, rather than across particular stocks.
There is not high genetic diversity exhibited, but signs of purifying selection are strong and the diversity at mitochondrial loci is often somewhat decoupled from actual population size because of this effect. Our approach to explore structure here relies on a simple but powerful statistic (Snn).
1. is there any structure in picoroco from north to south that would influence how it is managed? If structure is significant, better collection of individuals and loci would be able to pinpoint the transition better. Structure north/south. Low genetic diversity, strong tajima D as with many barnacles suggests very large population size and probable purifying selection on COI.
2. Why Snn? Hudson's rationale, note its use in Diaz-Ferguson, appropriate for analysis of small samples of diverse alleles like this.
3. new range indication of M. concinnus in Iquique? Not news to Pitombo, but for management important to recognize difference between the two.
4. all taxa monophyletic, better phylogeny of group is needed (COI notoriously problematic at this level; Wares et al 2009) these data contribute to that.
Our sampling in the Iquique fish market showed that not all marketed "picorocos" belong to the same species. Although there is a distinctive pair of beaks in *A. psittacus* and a speckled colored pattern in *M. concinnus*, there is some overlapping in the range size that could make these two species resemble each other when fouled. Our record of *M. concinnus* in Iquique together with the report of Haussermann [-@Haussermann2010] from Arica support the presence of this species in northern Chile, but according to Haussermann [-@Haussermann2010] its presence along the rest of the chilean coast needs to be confirmed. Since all the aquaculture efforts and pilot studies are centered in *A. psittacus* [@Lopez2012] but *M. concinnus* is being harvested in the north, it could be interesting to gain more knowledge of how the two species interact in their overlapping distribution.
Although COI is problematic for phylogenetic inference (Wares et al 2009), our study contributes with sequences of two new barnacle species still not represented in GenBank and could help with future taxnomic studies revising the phylogeny of this group.
**Pilar**, is there is any chance to ge to get from SERNAPESCA fishing information of picoroco extraction along the coast? that could be cool to add. In one of Lopez papers he mentioned that the fisheries rotate between northen and southern regions after they overfished one area.
##Acknowledgments
The authors would like to thank Stella Januario, Kennia Morales, Bryan Bularz, Mirtala Parrague, Lucy Travo, Onofre Correa, Alice Vislova............. who helped with the collection of tissues and specimens), and also Hayley Glassic that helped with part of the sequencing process. We thank our funding sources, NSF-Chile for JPW and __XXX__ for PH, FP. We had extensive technical help from Katie Bockrath and Christine Ewers in different stages of this manuscript. Finally, thanks to R and all the package contributors that make free and reproducible science possible.
# Supplementary information
**Supplementary Table 1:** GenBank accession number and species name of the acorn barnacles used to compare the *Austromegabalanus psittacus* clade
```{r supp table 1 genBank sequences,results='asis',echo=F,message=FALSE}
library(knitr)
genbank<-read.csv("genbankSeq.csv")
unique(genbank)->genbankTable
rownames(genbankTable)<-NULL
kable(genbankTable)
```
**Supplementary Table 2:** GenBank accesion numbers, locations and origen of all the samples sequenced in this study.
```{r supp table 2 our sequences,results='asis',echo=F,message=FALSE}
library(knitr)
# subsetting just sequences from this study
thisStudy<-which(austroGB$Contig=='yes')
ourTable<-austroGB[thisStudy,c("AccessionNumber","Origen","FullSiteName","Species")]
kable(ourTable)
```
![**Supplementary Figure 1**. Neighbor-joining consensus tree for the acorn barnacles included in this study. The nodes indicate boostrap values.](bigTree27Mar.pdf)
![**Supplementary Figure 2**pico tree](justPicoTree27Mar.pdf)
**Supplementary Figure 2**: Neighbor-joining consensus tree of all the *A. psittacus* sequenced in this study. The nodes indicate boostrap values.
# References
library(PopGenome)
picoGen<-readData("/SimSeqs",include.unknown=T)
picoGen<-readData("SimSeqs/",include.unknown=T)
picoGen<-readData("SimSeqs/*.*",include.unknown=T)
picoGen<-readData("~/SimSeqs",include.unknown=T)
getwd()
ourpath<-getwd()
unipath<-paste(ourpath,"/SimSeqs",sep="")
unipath
picoGen<-readData(unipath,include.unknown=T)
simSeq<-readData(unipath,include.unknown=T)
simSeq
simSeq@n.sites # gives the number of sites in the alignment
get.sum.data(simSeq) # gives the summary information of the alignment, with the @ you can get all of those summaries, for example:
Varsites<-simSeq@n.biallelic.sites #number of biallelic sites (SNPs)
Varsites
for (i in theta){
print(paste('Working in theta',i))
# first, simulate tree
set.seed(1234)
tree<-ms(nsam=200, nreps=1, opts= "-T -t theta")
simtree<-read.tree(text=tree[3])
# second, generate 200 sequences with a length of 600 bp
set.seed(1234)
seqs<-seqgen(opts= "-mHKY -l600 -q", rooted.tree=simtree)
# third, read and save the simulated sequences
seqs.easy<-read.seqgen(seqs)
filename<-paste("simSeq",i,".fas",sep="")
write.fasta(seqs.easy$org,filename)
}
for (i in theta){
print(paste('Working in theta',i))
# first, simulate tree
set.seed(1234)
tree<-ms(nsam=200, nreps=1, opts= "-T -t i")
simtree<-read.tree(text=tree[3])
# second, generate 200 sequences with a length of 600 bp
set.seed(1234)
seqs<-seqgen(opts= "-mHKY -l600 -q", rooted.tree=simtree)
# third, read and save the simulated sequences
seqs.easy<-read.seqgen(seqs)
filename<-paste("simSeq",i,".fas",sep="")
write.fasta(seqs.easy$org,filename)
}
ourpath<-getwd()
gitpath<-paste(ourpath,"/SimSeqs",sep="")
# converting FASTA file to GENOME object
simSeq<-readData(gitpath,include.unknown=T)
simSeq@n.sites # gives the number of sites in the alignment
get.sum.data(simSeq) # gives the summary information of the alignment, with the @ you can get all of those summaries, for example:
Varsites<-simSeq@n.biallelic.sites #number of biallelic sites (SNPs)
Varsites
set.seed(1234)
tree<-ms(nsam=200, nreps=1, opts= "-T -t 1")
simtree<-read.tree(text=tree[3])
plot(simtree)
plot(simtree)
tree<-ms(nsam=10, nreps=1, opts= "-T -t 1")
simtree<-read.tree(text=tree[3])
plot(simtree)
tree<-ms(nsam=10, nreps=1, opts= "-T -t 10")
simtree<-read.tree(text=tree[3])
plot(simtree)
set.seed(1234)
seqs<-seqgen(opts= "-mHKY -l600 -q", rooted.tree=simtree)
# third, read and save the simulated sequences
seqs.easy<-read.seqgen(seqs)
write.fasta(seqs.easy$org,"test1.fas")
tree<-ms(nsam=10, nreps=1, opts= "-T -t 10")
tree<-ms(nsam=10, nreps=1, opts= "-T -t 10")
tree<-ms(nsam=10, nreps=1, opts= "-T -t 1")
simtree<-read.tree(text=tree[3])
set.seed(1234)
seqs<-seqgen(opts= "-mHKY -l600 -q", rooted.tree=simtree)
# third, read and save the simulated sequences
seqs.easy<-read.seqgen(seqs)
write.fasta(seqs.easy$org,"test2.fas")
simSeq<-readData(gitpath,include.unknown=T)
simSeq@n.sites # gives the number of sites in the alignment
get.sum.data(simSeq) # gives the summary information of the alignment, with the @ you can get all of those summaries, for example:
Varsites<-simSeq@n.biallelic.sites #number of biallelic sites (SNPs)
Varsites
theta<-c(1:10)
# Loop in theta, simulate sequences and save in fasta file
for (i in theta){
print(paste('Working in theta',i))
# first, simulate tree
set.seed(1234)
tree<-ms(nsam=200, nreps=1, opts= "-T -t i")
simtree<-read.tree(text=tree[3])
# second, generate 200 sequences with a length of 600 bp
set.seed(1234)
seqs<-seqgen(opts= "-mHKY -l600 -q", rooted.tree=simtree)
# third, read and save the simulated sequences
seqs.easy<-read.seqgen(seqs)
filename<-paste("simSeq",i,".fas",sep="")
write.fasta(seqs.easy$org,filename)
}
simSeq<-readData(gitpath,include.unknown=T)
simSeq@n.sites # gives the number of sites in the alignment
get.sum.data(simSeq) # gives the summary information of the alignment, with the @ you can get all of those summaries, for example:
for (i in theta){
print(paste('Working in theta',i))
# first, simulate tree
set.seed(1234)
tree<-ms(nsam=20, nreps=1, opts= "-T -t i")
simtree<-read.tree(text=tree[3])
# second, generate 200 sequences with a length of 600 bp
set.seed(1234)
seqs<-seqgen(opts= "-mHKY -l600 -q", rooted.tree=simtree)
# third, read and save the simulated sequences
seqs.easy<-read.seqgen(seqs)
filename<-paste("simSeq",i,".fas",sep="")
write.fasta(seqs.easy$org,filename)
}
simSeq<-readData(gitpath,include.unknown=T)
simSeq@n.sites # gives the number of sites in the alignment
get.sum.data(simSeq) # gives the summary information of the alignment, with the @ you can get all of those summaries, for example:
tree<-ms(nsam=20, nreps=1, opts= "-T -t i")
tree
i=1
tree<-ms(nsam=20, nreps=1, opts= "-T -t i")
tree
tree<-ms(nsam=20, nreps=1, opts= "-T -t 1")
tree
# first, simulate tree
set.seed(1234)
tree<-ms(nsam=200, nreps=1, opts= "-T -t 1")
simtree<-read.tree(text=tree[3])
# second, generate 200 sequences with a length of 600 bp
set.seed(1234)
seqs<-seqgen(opts= "-mHKY -l600 -q", rooted.tree=simtree)
# third, read and save the simulated sequences
seqs.easy<-read.seqgen(seqs)
filename<-paste("simSeq",1,".fas",sep="")
write.fasta(seqs.easy$org,filename)
# first, simulate tree
set.seed(1234)
tree<-ms(nsam=200, nreps=1, opts= "-T -t 2")
simtree<-read.tree(text=tree[3])
# second, generate 200 sequences with a length of 600 bp
set.seed(1234)
seqs<-seqgen(opts= "-mHKY -l600 -q", rooted.tree=simtree)
# third, read and save the simulated sequences
seqs.easy<-read.seqgen(seqs)
filename<-paste("simSeq",2,".fas",sep="")
write.fasta(seqs.easy$org,filename)
# first, simulate tree
set.seed(1234)
tree<-ms(nsam=200, nreps=1, opts= "-T -t 3")
simtree<-read.tree(text=tree[3])
# second, generate 200 sequences with a length of 600 bp
set.seed(1234)
seqs<-seqgen(opts= "-mHKY -l600 -q", rooted.tree=simtree)
# third, read and save the simulated sequences
seqs.easy<-read.seqgen(seqs)
filename<-paste("simSeq",3,".fas",sep="")
write.fasta(seqs.easy$org,filename)
# first, simulate tree
set.seed(1234)
tree<-ms(nsam=200, nreps=1, opts= "-T -t 4")
simtree<-read.tree(text=tree[3])
# second, generate 200 sequences with a length of 600 bp
set.seed(1234)
seqs<-seqgen(opts= "-mHKY -l600 -q", rooted.tree=simtree)
# third, read and save the simulated sequences
seqs.easy<-read.seqgen(seqs)
filename<-paste("simSeq",4,".fas",sep=
et.seed(1234)
tree<-ms(nsam=200, nreps=1, opts= "-T -t 4")
simtree<-read.tree(text=tree[3])
# second, generate 200 sequences with a length of 600 bp
set.seed(1234)
seqs<-seqgen(opts= "-mHKY -l600 -q", rooted.tree=simtree)
# third, read and save the simulated sequences
seqs.easy<-read.seqgen(seqs)
filename<-paste("simSeq",4,".fas",sep="")
write.fasta(seqs.easy$org,filename)
set.seed(1234)
tree<-ms(nsam=200, nreps=1, opts= "-T -t 4")
simtree<-read.tree(text=tree[3])
# second, generate 200 sequences with a length of 600 bp
set.seed(1234)
seqs<-seqgen(opts= "-mHKY -l600 -q", rooted.tree=simtree)
# third, read and save the simulated sequences
seqs.easy<-read.seqgen(seqs)
filename<-paste("simSeq",4,".fas",sep="")
write.fasta(seqs.easy$org,filename)
# first, simulate tree
set.seed(1234)
tree<-ms(nsam=200, nreps=1, opts= "-T -t 5")
simtree<-read.tree(text=tree[3])
# second, generate 200 sequences with a length of 600 bp
set.seed(1234)
seqs<-seqgen(opts= "-mHKY -l600 -q", rooted.tree=simtree)
# third, read and save the simulated sequences
seqs.easy<-read.seqgen(seqs)
filename<-paste("simSeq",5,".fas",sep="")
write.fasta(seqs.easy$org,filename)
# first, simulate tree
set.seed(1234)
tree<-ms(nsam=200, nreps=1, opts= "-T -t 6")
simtree<-read.tree(text=tree[3])
# second, generate 200 sequences with a length of 600 bp
set.seed(1234)
seqs<-seqgen(opts= "-mHKY -l600 -q", rooted.tree=simtree)
# third, read and save the simulated sequences
seqs.easy<-read.seqgen(seqs)
filename<-paste("simSeq",6,".fas",sep="")
write.fasta(seqs.easy$org,filename)
# first, simulate tree
set.seed(1234)
tree<-ms(nsam=200, nreps=1, opts= "-T -t 7")
simtree<-read.tree(text=tree[3])
# second, generate 200 sequences with a length of 600 bp
set.seed(1234)
seqs<-seqgen(opts= "-mHKY -l600 -q", rooted.tree=simtree)
# third, read and save the simulated sequences
seqs.easy<-read.seqgen(seqs)
filename<-paste("simSeq",7,".fas",sep="")
write.fasta(seqs.easy$org,filename)
set.seed(1234)
tree<-ms(nsam=200, nreps=1, opts= "-T -t 8")
simtree<-read.tree(text=tree[3])
# second, generate 200 sequences with a length of 600 bp
set.seed(1234)
seqs<-seqgen(opts= "-mHKY -l600 -q", rooted.tree=simtree)
# third, read and save the simulated sequences
seqs.easy<-read.seqgen(seqs)
filename<-paste("simSeq",8,".fas",sep="")
write.fasta(seqs.easy$org,filename)
set.seed(1234)
tree<-ms(nsam=200, nreps=1, opts= "-T -t 9")
simtree<-read.tree(text=tree[3])
# second, generate 200 sequences with a length of 600 bp
set.seed(1234)
seqs<-seqgen(opts= "-mHKY -l600 -q", rooted.tree=simtree)
# third, read and save the simulated sequences
seqs.easy<-read.seqgen(seqs)
filename<-paste("simSeq",9,".fas",sep="")
write.fasta(seqs.easy$org,filename)
set.seed(1234)
tree<-ms(nsam=200, nreps=1, opts= "-T -t 10")
simtree<-read.tree(text=tree[3])
# second, generate 200 sequences with a length of 600 bp
set.seed(1234)
seqs<-seqgen(opts= "-mHKY -l600 -q", rooted.tree=simtree)
# third, read and save the simulated sequences
seqs.easy<-read.seqgen(seqs)
filename<-paste("simSeq",10,".fas",sep="")
write.fasta(seqs.easy$org,filename)
simSeq<-readData(gitpath,include.unknown=T)
simSeq<-readData(gitpath,include.unknown=T)
simSeq@n.sites # gives the number of sites in the alignment
get.sum.data(simSeq) # gives the summary information of the alignment, with the @ you can get all of those summaries, for example:
Varsites<-simSeq@n.biallelic.sites #number of biallelic sites (SNPs)
Varsites
# first, simulate tree
set.seed(1234)
tree<-ms(nsam=20, nreps=1, opts= "-T -t 10")
simtree<-read.tree(text=tree[3])
# second, generate 200 sequences with a length of 600 bp
set.seed(1234)
seqs<-seqgen(opts= "-mHKY -l600 -q", rooted.tree=simtree)
# third, read and save the simulated sequences
seqs.easy<-read.seqgen(seqs)
filename<-paste("simSeq",10,".fas",sep="")
write.fasta(seqs.easy$org,filename)
# first, simulate tree
set.seed(1234)
tree<-ms(nsam=20, nreps=1, opts= "-T -t 1")
simtree<-read.tree(text=tree[3])
# second, generate 200 sequences with a length of 600 bp
set.seed(1234)
seqs<-seqgen(opts= "-mHKY -l600 -q", rooted.tree=simtree)
# third, read and save the simulated sequences
seqs.easy<-read.seqgen(seqs)
filename<-paste("simSeq",1,".fas",sep="")
write.fasta(seqs.easy$org,filename)
simSeq<-readData(gitpath,include.unknown=T)
simSeq@n.sites # gives the number of sites in the alignment
get.sum.data(simSeq) # gives the summary information of the alignment, with the @ you can get all of those summaries, for example:
tree<-ms(nsam=20, nreps=1, opts= "-T -t 1")
tree
plot(tree)
plot(simtree)
set.seed(123)
tree<-ms(nsam=20, nreps=1, opts= "-T -t 10")
simtree<-read.tree(text=tree[3])
plot(simtree)
seqgen(opts= "-mHKY -l600 -q", rooted.tree=simtree)
par(mfrow = c(1, 2))
plot(simtree1,main="Theta 1")
plot(simtree2,main="Theta 10")
set.seed(123)
tree1<-ms(nsam=20, nreps=1, opts= "-T -t 1")
simtree1<-read.tree(text=tree1[3])
tree2<-ms(nsam=20, nreps=1, opts= "-T -t 10")
simtree2<-read.tree(text=tree2[3])
par(mfrow = c(1, 2))
plot(simtree1,main="Theta 1")
plot(simtree2,main="Theta 10")
set.seed(123)
seqs1<-seqgen(opts= "-mHKY -l600 -q", rooted.tree=simtree1)
seqs.easy1<-read.seqgen(seqs1)
write.fasta(seqs.easy$org,"testTheta1.fas")
seqs2<-seqgen(opts= "-mHKY -l600 -q", rooted.tree=simtree2)
seqs.easy2<-read.seqgen(seqs2)
write.fasta(seqs.easy$org,"testTheta2.fas")
gitpath<-paste(ourpath,"/SimSeqs",sep="")
simSeq<-readData(gitpath,include.unknown=T)
simSeq@n.sites # gives the number of sites in the alignment
get.sum.data(simSeq) # gives the summary information of the alignment, with the @ you can get all of those summaries, for example:
Varsites<-simSeq@n.biallelic.sites #number of biallelic sites (SNPs)
Varsites
