<<<<<<< Updated upstream
result<-NULL
for (i in 1:length(x)) {
AphiaRecord <- iface@functions$getAphiaRecordByID(x[i],('http://www.marinespecies.org/aphia.php?p=soap'))
result<-c(result, slot(AphiaRecord, "valid_AphiaID"))
}
return(result)
}
MySpecList$AccTaxID<-SynResolv(MySpecList$OrigTaxID)
MySpecList
#---------------------------------------------------------------------
# Add full record information (classification, ranking, authority,...)
#---------------------------------------------------------------------
getFullRecord <- function(x) {
result<-NULL
for (i in 1:length(x)) {
AphiaRecord <- iface@functions$getAphiaRecordByID(x[i],('http://www.marinespecies.org/aphia.php?p=soap'))
slotnames <- slotNames(AphiaRecord)
slotlist <- data.frame(rbind(1:length(slotnames)))
names(slotlist) <- slotnames
for(y in slotnames) {
#R cannot handle a slot name "class"
if (y == "CLASS") {slotlist[1,y] <- '(empty)'}
else {slotlist[1, y] <- slot(AphiaRecord,  y)}
}
result<-rbind(result, slotlist)
}
return(result)
}
AphiaRecords<-getFullRecord(MySpecList$AccTaxID)
MySpecList<-cbind(MySpecList, AphiaRecords)
MySpecList
-------------------------------------------
source('C:/Users/Paula/Dropbox/toPaula/BodySize RangeSize/script_to use WORMS in R.R')
# Install and load library, process WSDL and prepare R SOAP functions
#-------------------------------------------
#install.packages("SSOAP", repos = "http://www.omegahat.org/R", dependencies = TRUE)
library(SSOAP)
w = processWSDL("http://www.marinespecies.org/aphia.php?p=soap&wsdl=1")
iface = genSOAPClientInterface(, w)
#-------------------------------------------
# Look up AphiaID
#-------------------------------------------
AphiaID = iface@functions$getAphiaID("Solea solea",1,('http://www.marinespecies.org/aphia.php?p=soap'))
print(AphiaID) #should output '[0] 127160'
#-------------------------------------------
# Create your specieslist
#-------------------------------------------
MySpecies<-c("solea solea", "lanice conchilega", "abra alba", "Polydora audax")
MySpecies<-data.frame(MySpecies)
MySpecList<-data.frame(unique(MySpecies))
#-------------------------------------------
# Get original AphiaID's for specieslist
#-------------------------------------------
AphiaMatch <- function(x) {
result<-NULL
for (i in 1:length(x)) {
AphiaRecord <- iface@functions$getAphiaID(x[i],1,('http://www.marinespecies.org/aphia.php?p=soap'))
result<-c(result, AphiaRecord)
}
return(result)
}
MySpecList$OrigTaxID<-AphiaMatch(MySpecList$MySpecies)
MySpecList
#-------------------------------------------
# Get accepted synonym AphiaID's for specieslist
#-------------------------------------------
SynResolv <- function(x) {
result<-NULL
for (i in 1:length(x)) {
AphiaRecord <- iface@functions$getAphiaRecordByID(x[i],('http://www.marinespecies.org/aphia.php?p=soap'))
result<-c(result, slot(AphiaRecord, "valid_AphiaID"))
}
return(result)
}
MySpecList$AccTaxID<-SynResolv(MySpecList$OrigTaxID)
MySpecList
#---------------------------------------------------------------------
# Add full record information (classification, ranking, authority,...)
#---------------------------------------------------------------------
getFullRecord <- function(x) {
result<-NULL
for (i in 1:length(x)) {
AphiaRecord <- iface@functions$getAphiaRecordByID(x[i],('http://www.marinespecies.org/aphia.php?p=soap'))
slotnames <- slotNames(AphiaRecord)
slotlist <- data.frame(rbind(1:length(slotnames)))
names(slotlist) <- slotnames
for(y in slotnames) {
#R cannot handle a slot name "class"
if (y == "CLASS") {slotlist[1,y] <- '(empty)'}
else {slotlist[1, y] <- slot(AphiaRecord,  y)}
}
result<-rbind(result, slotlist)
}
return(result)
}
AphiaRecords<-getFullRecord(MySpecList$AccTaxID)
MySpecList<-cbind(MySpecList, AphiaRecords)
MySpecList
str(MySpecList)
install.packages("seqinr", dependencies = TRUE)
l ibrary ( s e q i n r )
library(seqinr)
choosebanck('genbank')
choosebank('genbank')
biv<-c("modiolus modiolus","acmaea testudinaria","anomalocardia brasileana")
search<-tryCatch(query("bb", paste("sp=", biv[1],"et k=COI",sep="")))
help(getsequence)
help(getSequence)
source('C:/Users/Paula/Dropbox/toPaula/newR/find_species_range_Paula.r')
```{r}
summary(cars)
```
You can also embed plots, for example:
```{r fig.width=7, fig.height=6}
plot(cars)
```
install.packages("knitr")
install.packages("pandoc")
install.packages("e1071")
library(rmarkdown)
install.packages("rmarkdown")
devtools::install_github("rstudio/rmarkdown")
install.packages("rmarkdown")
install.packages("treebase")
library(devtools)
install_github("treebase", "ropensci")
library(devtools)
install_github("treebase", "ropensci")
library(devtools)
install_github("ape", "ropensci")
install.packages("taxize")
install_github("rfishbase", "ropensci")
install.packages("rfishbase")
install.packages("C:/Users/Paula/Desktop/rfishbase_0.2-2.tar.gz", repos = NULL, type = "source")
library(fishbase)
library(rfishbase)
install.packages("C:/Users/Paula/Desktop/taxize_0.3.0.tar.gz", repos = NULL, type = "source")
install.packages("rdryad")
install.packages("C:/Users/Paula/Desktop/rdryad_0.1.1.tar.gz", repos = NULL, type = "source")
install.packages("treebase")
install.packages("rfishbase")
install.packages("taxize")
download.packages("treebase", destdir="/Users/Paula", type="source") # replace destdir param with any path on your computer
install.packages("/Users/Paula/treebase_0.0-7.1.tar.gz", repos=NULL, type="source")
download.packages("treebase", destdir="C:/Users/Paula/Desktop/", type="source") # replace destdir param with any path on your computer
install.packages("C:/Users/Paula/Desktop/treebase_0.0-7.1.tar.gz", repos=NULL, type="source")
download.packages("treebase", destdir="C:/Users/Paula/Desktop", type="source") # replace destdir param with any path on your computer
install.packages("C:/Users/Paula/Desktop/treebase_0.0-7.1.tar.gz", repos=NULL, type="source")
download.packages("treebase", destdir="c:/Users/Paula/desktop", type="source") # replace destdir param with any path on your computer
install.packages("c:/Users/Paula/desktop/treebase_0.0-7.1.tar.gz", repos=NULL, type="source")
download.packages("treebase", destdir="c:/Users/Paula/desktop", type="source")
install.packages("c:/Users/Paula/desktop/treebase_0.0-7.1.tar.gz", repos=NULL, type="source")
download.packages("treebase", destdir="C:/Users/Paula/desktop", type="source")
install.packages("C:/Users/Paula/desktop/treebase_0.0-7.1.tar.gz", repos=NULL, type="source")
install.packages("c:/Users/Paula/desktop/treebase_0.0-7.1.tar.gz", repos=NULL, type="source")
install.packages("c:/Users/Paula/desktop/treebase_0.0-7.1.tar", repos=NULL, type="source")
install.packages("c:/Users/Paula/desktop/treebase_0.0-7.1.tar.gz", repos=NULL, type="source")
install.packages("C:/Users/Paula/Desktop/treebase_0.0-7.1.tar.gz", repos = NULL, type = "source")
install.packages("C:/Users/Paula/Desktop/treebase_0.0-7.1.tar.gz", repos = NULL, type = "source")
install.packages("C:/Users/Paula/Desktop/rdryad_0.1.1.tar.gz", repos = NULL, type = "source")
install.packages("survnnet")
ta<-cbind(c(1,2),c("Male","Female"),c("Blue","Pink"))
names(ta)<-c("A","B","C")
ta
colnames(ta)<-c("A","B","C")
ta
ta<-cbind(c(1,2),c("Male","Female"),c("Blue","Pink"))
colnames(ta)<-c("A","B","C")
kable(ta)
library(knitr)
kable(ta)
plot(1)
load("C:/Users/Paula/Dropbox/Picoroco MS/Picoroco_Paula.Rmd")
plot(1,2)
plot(1,2,main="prueba",xlab="para ver resolucion")
library(pegas)
> data(woodmouse)
> x <- woodmouse[sample(15, size = 110, replace = TRUE), ]
> h <- haplotype(x)
> net <- haploNet(h)
> plot(net, size=attr(net, "freq"), scale.ratio = 2, cex = 0.8)
data(woodmouse)
x <- woodmouse[sample(15, size = 110, replace = TRUE), ]
h <- haplotype(x)
net <- haploNet(h)
plot(net, size=attr(net, "freq"), scale.ratio = 2, cex = 0.8)
help(summary.loci)
require(adegenet)
data(nancycats)
x <- as.loci(nancycats)
s <- summary(x)
plot(s, layout=20, las=2)
View(nancycats)
vignette('reading files')
vignette('ReadingFiles')
help(plot.haploNet)
data(woodmouse)
x <- woodmouse[sample(15, size = 110, replace = TRUE), ]
h <- haplotype(x)
net <- haploNet(h)
plot(net, size=attr(net, "freq"), scale.ratio = 2, cex = 0.8)
data(woodmouse)
x <- woodmouse[sample(15, size = 110, replace = TRUE), ]
h <- haplotype(x)
net <- haploNet(h)
plot(net, size=attr(net, "freq"), scale.ratio = 2, cex = 0.8)
data(woodmouse)
x <- woodmouse[sample(15, size = 110, replace = TRUE), ]
h <- haplotype(x)
net <- haploNet(h)
plot(net, size=attr(net, "freq"), scale.ratio = 2, cex = 0.8)
plot(!)
plot(1)
library(ggmap)
geocode("Eastern and Midwestern Regions of Canada")
geocode("Eastern and Midwestern Canada")
geocode("Eastern Canada")
geocode("Lebanon, New Hampshire")
geocode("St. Johnsbury, Vermont")
geocode("Salem, New York")
geocode("The Marine Mammal Center")
geocode("yeale, africa")
geocode("yeale, ivory coast")
geocode("northern and central Japan")
geocode("Japan")
geocode("University of Kentucky")
geocode("Tsavo National Park")
geocode("Nairobi National Park")
geocode("solio ranch")
geocode("Fakahatchee Strand,florida")
geocode("Tussen-die-Riviere Game Farm, Orange Free State")
geocode("Tussen-die-Riviere Game Farm")
geocode("Orange Free State")
geocode("Maple, Ontario")
geocode("Maple district, Ontario")
geocode("Sapulot, Sabah")
geocode("Sapulot, Sabah, Malasya")
geocode("Sapulot, Sabah, Malaysia")
geocode("chaco, argentina")
geocode("Corvallis, Oregon")
geocode("Svanoy, western Norway")
geocode("Svanoy, Norway")
geocode("Bremerhaven, Germany")
geocode("Engerdal Municipality, Norway")
geocode("Birganj Forest District")
geocode("Darjeeling")
geocode("Karnataka")
geocode("Shikari Bas, Asia")
geocode("Parsa, Asia")
geocode("Parsa, Shikari Bas, Asia")
geocode("tenasserim, Asia")
geocode("tenasserim")
geocode("kalimatan")
geocode("japan")
geocode("Hluhluwe–iMfolozi Park")
geocode("Hluhluwe–iMfolozi")
geocode("Mtethomusha")
geocode("thomas baine")
geocode("Thomas Baines Nature Reserve")
sessionInfo()
sessionInfo()
setwd("~/GitHub/QuBar")
library(PopGenome)
# In PopGenome, we can read all our fasta files at the same time, from our defined folder
# I think I found a useful trick to name the path that will work for both of us
ourpath<-getwd()
gitpath<-paste(ourpath,"/SimSeqs",sep="")
simSeq<-readData(gitpath,include.unknown=T)
simSeq@n.sites # gives the number of sites in the alignment
get.sum.data(simSeq) # gives the summary information of the alignment, with the @ you can get all of those summaries, for example:
Varsites<-simSeq@n.biallelic.sites #number of biallelic sites (SNPs)
Varsites
neuResults<-neutrality.stats(simSeq,theta=T)
neu<-get.neutrality(simSeq,theta=T,stats=T)
neu<-get.neutrality(neuResults,theta=T,stats=T)
neuResults<-neutrality.stats(simSeq)
neu<-get.neutrality(neuResults,theta=T,stats=T)
neu
nTajout<-neuResults@Tajima.D
Tajout
Tajout<-neuResults@Tajima.D
Tajout
neuResults@n.segregating.sites
set.seed(123)
tree1<-ms(nsam=20, nreps=1, opts= "-T -t 1")
simtree1<-read.tree(text=tree1[3])
library(phyclust)
set.seed(123)
tree1<-ms(nsam=20, nreps=1, opts= "-T -t 1")
simtree1<-read.tree(text=tree1[3])
set.seed(123)
seqs1<-seqgen(opts= "-mHKY -l600 -q -d2", rooted.tree=simtree1)
seqs.easy1<-read.seqgen(seqs1)
write.fasta(seqs.easy1$org,"test_d2.fas")
set.seed(123)
seqs2<-seqgen(opts= "-mHKY -l600 -q -d3", rooted.tree=simtree1)
seqs.easy2<-read.seqgen(seqs2)
write.fasta(seqs.easy2$org,"test_d3.fas")
set.seed(123)
seqs3<-seqgen(opts= "-mHKY -l600 -q -d4", rooted.tree=simtree1)
seqs.easy3<-read.seqgen(seqs3)
write.fasta(seqs.easy3$org,"test_d4.fas")
ourpath<-getwd()
gitpath<-paste(ourpath,"/SimSeqs",sep="")
# converting FASTA file to GENOME object
simSeq<-readData(gitpath,include.unknown=T)
simSeq@n.sites # gives the number of sites in the alignment
get.sum.data(simSeq) # gives the summary information of the alignment, with the @ you can get all of those summaries, for example:
Varsites<-simSeq@n.biallelic.sites #number of biallelic sites (SNPs)
Varsites
# aplying the "diversity.stats" methods
diversity.stats(simSeq,pi=TRUE)->divResults
Piout<-divResults@Pi
Piout
Totsites<-divResults@n.sites
Piout2<-Piout/Totsites
Piout2
# aplying the "neutrality.stats"
neuResults<-neutrality.stats(simSeq)
neu<-get.neutrality(neuResults,theta=T,stats=T)
Tajout<-neuResults@Tajima.D
Tajout
neuResults@n.segregating.sites
ourpath<-getwd()
gitpath<-paste(ourpath,"/SimSeqs",sep="")
# converting FASTA file to GENOME object
simSeq<-readData(gitpath,include.unknown=T)
simSeq@n.sites # gives the number of sites in the alignment
get.sum.data(simSeq) # gives the summary information of the alignment, with the @ you can get all of those summaries, for example:
Varsites<-simSeq@n.biallelic.sites #number of biallelic sites (SNPs)
Varsites
# aplying the "diversity.stats" methods
diversity.stats(simSeq,pi=TRUE)->divResults
Piout<-divResults@Pi
Piout
Totsites<-divResults@n.sites
Piout2<-Piout/Totsites
Piout2
# aplying the "neutrality.stats"
neuResults<-neutrality.stats(simSeq)
neu<-get.neutrality(neuResults,theta=T,stats=T)
Tajout<-neuResults@Tajima.D
Tajout
neuResults@n.segregating.sites
set.seed(123)
tree1<-ms(nsam=20, nreps=1, opts= "-T -t 10")
simtree1<-read.tree(text=tree1[3])
ourpath<-getwd()
gitpath<-paste(ourpath,"/SimSeqs",sep="")
# converting FASTA file to GENOME object
simSeq<-readData(gitpath,include.unknown=T)
simSeq@n.sites # gives the number of sites in the alignment
get.sum.data(simSeq) # gives the summary information of the alignment, with the @ you can get all of those summaries, for example:
Varsites<-simSeq@n.biallelic.sites #number of biallelic sites (SNPs)
Varsites
# aplying the "diversity.stats" methods
diversity.stats(simSeq,pi=TRUE)->divResults
Piout<-divResults@Pi
Piout
Totsites<-divResults@n.sites
Piout2<-Piout/Totsites
Piout2
# aplying the "neutrality.stats"
neuResults<-neutrality.stats(simSeq)
neu<-get.neutrality(neuResults,theta=T,stats=T)
Tajout<-neuResults@Tajima.D
Tajout
neuResults@n.segregating.sites
tree1
set.seed(123)
seqs1<-seqgen(opts= "-mHKY -l600 -q -d2.5", rooted.tree=simtree1)
seqs.easy1<-read.seqgen(seqs1)
write.fasta(seqs.easy1$org,"test_d2_5.fas")
set.seed(123)
seqs2<-seqgen(opts= "-mHKY -l600 -q -d3.5", rooted.tree=simtree1)
seqs.easy2<-read.seqgen(seqs2)
write.fasta(seqs.easy2$org,"test_d3_5.fas")
set.seed(123)
seqs3<-seqgen(opts= "-mHKY -l600 -q -d11", rooted.tree=simtree1)
seqs.easy3<-read.seqgen(seqs3)
write.fasta(seqs.easy3$org,"test_d11.fas")
ourpath<-getwd()
gitpath<-paste(ourpath,"/SimSeqs",sep="")
# converting FASTA file to GENOME object
simSeq<-readData(gitpath,include.unknown=T)
simSeq@n.sites # gives the number of sites in the alignment
get.sum.data(simSeq) # gives the summary information of the alignment, with the @ you can get all of those summaries, for example:
Varsites<-simSeq@n.biallelic.sites #number of biallelic sites (SNPs)
Varsites
# aplying the "diversity.stats" methods
diversity.stats(simSeq,pi=TRUE)->divResults
Piout<-divResults@Pi
Piout
Totsites<-divResults@n.sites
Piout2<-Piout/Totsites
Piout2
# aplying the "neutrality.stats"
neuResults<-neutrality.stats(simSeq)
neu<-get.neutrality(neuResults,theta=T,stats=T)
Tajout<-neuResults@Tajima.D
Tajout
neuResults@n.segregating.sites
set.seed(123)
seqs1<-seqgen(opts= "-mHKY -l600 -q -d12", rooted.tree=simtree1)
seqs.easy1<-read.seqgen(seqs1)
write.fasta(seqs.easy1$org,"test_d12.fas")
set.seed(123)
seqs2<-seqgen(opts= "-mHKY -l600 -q -d13", rooted.tree=simtree1)
seqs.easy2<-read.seqgen(seqs2)
write.fasta(seqs.easy2$org,"test_d13.fas")
set.seed(123)
seqs3<-seqgen(opts= "-mHKY -l600 -q -d14", rooted.tree=simtree1)
seqs.easy3<-read.seqgen(seqs3)
write.fasta(seqs.easy3$org,"test_d14.fas")
ourpath<-getwd()
gitpath<-paste(ourpath,"/SimSeqs",sep="")
# converting FASTA file to GENOME object
simSeq<-readData(gitpath,include.unknown=T)
simSeq@n.sites # gives the number of sites in the alignment
get.sum.data(simSeq) # gives the summary information of the alignment, with the @ you can get all of those summaries, for example:
Varsites<-simSeq@n.biallelic.sites #number of biallelic sites (SNPs)
Varsites
# aplying the "diversity.stats" methods
diversity.stats(simSeq,pi=TRUE)->divResults
Piout<-divResults@Pi
Piout
Totsites<-divResults@n.sites
Piout2<-Piout/Totsites
Piout2
# aplying the "neutrality.stats"
neuResults<-neutrality.stats(simSeq)
neu<-get.neutrality(neuResults,theta=T,stats=T)
Tajout<-neuResults@Tajima.D
Tajout
neuResults@n.segregating.sites
1+1/2+1/3+1/4+1/5+1/6+1/7+1/8+1/9
1+1/2+1/3+1/4+1/5+1/6+1/7+1/8+1/9+1/10+1/11+1/12+1/13+1/14+1/15+1/16+1/17+1/18+1/19
5/3.5774
2/3.5774
3/3.5774
4/3.5774
set.seed(123)
seqs1<-seqgen(opts= "-mHKY -l600 -q -d6", rooted.tree=simtree1)
seqs.easy1<-read.seqgen(seqs1)
write.fasta(seqs.easy1$org,"test_d6.fas")
set.seed(123)
seqs2<-seqgen(opts= "-mHKY -l600 -q -d7", rooted.tree=simtree1)
seqs.easy2<-read.seqgen(seqs2)
write.fasta(seqs.easy2$org,"test_d7.fas")
set.seed(123)
seqs3<-seqgen(opts= "-mHKY -l600 -q -d8", rooted.tree=simtree1)
seqs.easy3<-read.seqgen(seqs3)
write.fasta(seqs.easy3$org,"test_d8.fas")
# sequences are identical!!#$%& sigh...
ourpath<-getwd()
gitpath<-paste(ourpath,"/SimSeqs",sep="")
# converting FASTA file to GENOME object
simSeq<-readData(gitpath,include.unknown=T)
simSeq@n.sites # gives the number of sites in the alignment
get.sum.data(simSeq) # gives the summary information of the alignment, with the @ you can get all of those summaries, for example:
Varsites<-simSeq@n.biallelic.sites #number of biallelic sites (SNPs)
Varsites
# aplying the "diversity.stats" methods
diversity.stats(simSeq,pi=TRUE)->divResults
Piout<-divResults@Pi
Piout
Totsites<-divResults@n.sites
Piout2<-Piout/Totsites
Piout2
# aplying the "neutrality.stats"
neuResults<-neutrality.stats(simSeq)
neu<-get.neutrality(neuResults,theta=T,stats=T)
Tajout<-neuResults@Tajima.D
Tajout
neuResults@n.segregating.sites
599*600
359400/2
divResults@hap.diversity.within
help(pgamma)
help(cdf)
pgamma(1,10,0.75)
numhaps=10
Hapdiv=0.75 #minvalue 0.001 if no information; this is PRIOR information
####################################
x=1
cdf=0
indprob=0
array<-NULL
while (cdf<0.99) {
cdfprev<-cdf
#  cdf<-pgamma(x,1,Hapdiv)
#  if use 1 as shape parameter keeping shape parameter constant doesn't account for increased variance (?) as numhaps go up,
#  e.g. error may be higher as you observe more...once it is working run it by somebody mathier.
cdf<-pgamma(x,numhaps,Hapdiv) #might be that numhaps is actually the shape parameter!!!! or: something else...non-gamma.
indprob<-cdf-cdfprev
happrob<-numhaps+(x-1)
array<-c(array,happrob)
array<-c(array,cdf)
array<-c(array,indprob)
#  print(happrob)
#  print(cdf)
x=x+1
}
class(array)
View(array)
probs<-t(matrix(array,nrow=3))
probs
View(probs)
plot(probs[,1],probs[,3],col='red')
plot(probs[,1],probs[,2],col='red')
dataobject(probs)
objectcode(probs)
=======
setwd("~/Desktop/QuBar")
install.packages("entropart")
>>>>>>> Stashed changes
