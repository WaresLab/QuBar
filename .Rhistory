maxPred<-probs[which(probs[,3]==max),1]
toFill$Max.Pred.value[i+count]<-maxPred
toFill$Obs.n[i+count]<-numsamp[j]
toFill$Population[i+count]<-"Pop1"
}
count+100->count
}
# Loop population 2
count<-700
for (j in 1:7){
pop2haps[[j]]->ourSize
names(ourSize)<-NULL
for(i in 1:100){
x=1
cdf=0
indprob=0
array<-NULL
while (cdf<0.99) {
cdfprev<-cdf
cdf<-pgamma(x,ourSize[i],hapdiv[1])
indprob<-cdf-cdfprev
happrob<-ourSize[i]+(x-1)
array<-c(array,happrob)
array<-c(array,cdf)
array<-c(array,indprob)
x=x+1
}
probs<-t(matrix(array,nrow=3))
probs
max<-max(probs[,3])
maxPred<-probs[which(probs[,3]==max),1]
toFill$Max.Pred.value[i+count]<-maxPred
toFill$Obs.n[i+count]<-numsamp[j]
toFill$Population[i+count]<-"Pop2"
}
count+100->count
}
head(toFill)
tail(toFill)
Population<-rep(NA,2800)
Max.Pred.value<-rep(NA,2800)
data.frame(Population,Max.Pred.value)->toFill
count<-700
for (j in 1:7){
pop2haps[[j]]->ourSize
names(ourSize)<-NULL
for(i in 1:100){
x=1
cdf=0
indprob=0
array<-NULL
while (cdf<0.99) {
cdfprev<-cdf
cdf<-pgamma(x,ourSize[i],hapdiv[1])
indprob<-cdf-cdfprev
happrob<-ourSize[i]+(x-1)
array<-c(array,happrob)
array<-c(array,cdf)
array<-c(array,indprob)
x=x+1
}
probs<-t(matrix(array,nrow=3))
probs
max<-max(probs[,3])
maxPred<-probs[which(probs[,3]==max),1]
toFill$Max.Pred.value[i+count]<-maxPred
toFill$Obs.n[i+count]<-numsamp[j]
toFill$Population[i+count]<-"Pop2"
}
count+100->count
}
Population<-rep(NA,700)
Max.Pred.value<-rep(NA,700)
data.frame(Population,Max.Pred.value)->toFill
# Loop population 1
count<-0
for (j in 1:7){
pop1haps[[j]]->ourSize
names(ourSize)<-NULL
for(i in 1:100){
x=1
cdf=0
indprob=0
array<-NULL
while (cdf<0.99) {
cdfprev<-cdf
cdf<-pgamma(x,ourSize[i],hapdiv[1])
indprob<-cdf-cdfprev
happrob<-ourSize[i]+(x-1)
array<-c(array,happrob)
array<-c(array,cdf)
array<-c(array,indprob)
x=x+1
}
probs<-t(matrix(array,nrow=3))
probs
max<-max(probs[,3])
maxPred<-probs[which(probs[,3]==max),1]
toFill$Max.Pred.value[i+count]<-maxPred
toFill$Obs.n[i+count]<-numsamp[j]
toFill$Population[i+count]<-"Pop1"
}
count+100->count
}
Population<-rep(NA,700)
Max.Pred.value<-rep(NA,700)
data.frame(Population,Max.Pred.value)->toFill
toFill->toFill2
toFill->toFill3
toFill->toFill4
count<-0
for (j in 1:7){
pop2haps[[j]]->ourSize
names(ourSize)<-NULL
for(i in 1:100){
x=1
cdf=0
indprob=0
array<-NULL
while (cdf<0.99) {
cdfprev<-cdf
cdf<-pgamma(x,ourSize[i],hapdiv[1])
indprob<-cdf-cdfprev
happrob<-ourSize[i]+(x-1)
array<-c(array,happrob)
array<-c(array,cdf)
array<-c(array,indprob)
x=x+1
}
probs<-t(matrix(array,nrow=3))
probs
max<-max(probs[,3])
maxPred<-probs[which(probs[,3]==max),1]
toFill2$Max.Pred.value[i+count]<-maxPred
toFill2$Obs.n[i+count]<-numsamp[j]
toFill2$Population[i+count]<-"Pop2"
}
count+100->count
}
View(toFill2)
# Loop population 3
count<-0
for (j in 1:7){
pop3haps[[j]]->ourSize
names(ourSize)<-NULL
for(i in 1:100){
x=1
cdf=0
indprob=0
array<-NULL
while (cdf<0.99) {
cdfprev<-cdf
cdf<-pgamma(x,ourSize[i],hapdiv[1])
indprob<-cdf-cdfprev
happrob<-ourSize[i]+(x-1)
array<-c(array,happrob)
array<-c(array,cdf)
array<-c(array,indprob)
x=x+1
}
probs<-t(matrix(array,nrow=3))
probs
max<-max(probs[,3])
maxPred<-probs[which(probs[,3]==max),1]
toFill3$Max.Pred.value[i+count]<-maxPred
toFill3$Obs.n[i+count]<-numsamp[j]
toFill3$Population[i+count]<-"Pop3"
}
count+100->count
}
# Loop population 4
count<-0
for (j in 1:7){
pop4haps[[j]]->ourSize
names(ourSize)<-NULL
for(i in 1:100){
x=1
cdf=0
indprob=0
array<-NULL
while (cdf<0.99) {
cdfprev<-cdf
cdf<-pgamma(x,ourSize[i],hapdiv[1])
indprob<-cdf-cdfprev
happrob<-ourSize[i]+(x-1)
array<-c(array,happrob)
array<-c(array,cdf)
array<-c(array,indprob)
x=x+1
}
probs<-t(matrix(array,nrow=3))
probs
max<-max(probs[,3])
maxPred<-probs[which(probs[,3]==max),1]
toFill4$Max.Pred.value[i+count]<-maxPred
toFill4$Obs.n[i+count]<-numsamp[j]
toFill4$Population[i+count]<-"Pop4"
}
count+100->count
}
rbind(toFill,toFill2,toFill3,toFill4)->gammaData
cbind(toFill,toFill2,toFill3,toFill4)->gammaData
head(gammaData)
View(toFill)
count<-0
for (j in 1:7){
pop1haps[[j]]->ourSize
names(ourSize)<-NULL
for(i in 1:100){
x=1
cdf=0
indprob=0
array<-NULL
while (cdf<0.99) {
cdfprev<-cdf
cdf<-pgamma(x,ourSize[i],hapdiv[1])
indprob<-cdf-cdfprev
happrob<-ourSize[i]+(x-1)
array<-c(array,happrob)
array<-c(array,cdf)
array<-c(array,indprob)
x=x+1
}
probs<-t(matrix(array,nrow=3))
probs
max<-max(probs[,3])
maxPred<-probs[which(probs[,3]==max),1]
toFill$Max.Pred.value[i+count]<-maxPred
toFill$Obs.n[i+count]<-numsamp[j]
toFill$Population[i+count]<-"Pop1"
}
count+100->count
}
View(toFill)
rbind(toFill,toFill2,toFill3,toFill4)->gammaData
View(gammaData)
tail(gammaData)
plot(Max.Pred.value~Obs.n,data=gammaData,color=Population)
plot(Max.Pred.value~Obs.n,data=gammaData,col=Population)
plot(gammaData$Obs.n,gammaData$Max.Pred.Value,col=gammaData$Population)
plot(gammaData$Obs.n,gammaData$Max.Pred.Value,col=gammaData$Population)
plot(gammaData$Obs.n,gammaData$Max.Pred.Value,color=gammaData$Population)
View(gammaData)
warnings()
library(ggplot)
library(ggplot2)
qplot(Obs.n,Max.Pred.Value,data=gammaData,color=Population)
qplot(Obs.n,Max.Pred.value,data=gammaData,color=Population)
plot(gammaData$Obs.n,gammaData$Max.Pred.value,color=gammaData$Population)
plot(Max.Pred.value~Obs.n,data=gammaData,col=Population)
qplot(Obs.n,Max.Pred.Value,data=gammaData,color=Population)
qplot(Obs.n,Max.Pred.value,data=gammaData,color=Population)
write.csv(gammaData,"gammaData.csv")
qplot(Obs.n,Max.Pred.value,data=gammaData,color=Population,geom=c("point","smooth"))
qplot(Obs.n,Max.Pred.value,data=gammaData,color=Population,geom=c("point","smooth"),method="loess")
qplot(Obs.n,Max.Pred.value,data=gammaData,color=Population,geom=c("point","smooth"),method="loess")->bp
bp+scale_fill_discrete(breaks=c("Pop1","Pop2","Pop3","Pop4"),labels=c("Theta=2g", "Theta=2ng","Theta=10g", "Theta=10ng"))
bp+scale_fill_continous(breaks=c("Pop1","Pop2","Pop3","Pop4"),labels=c("Theta=2g", "Theta=2ng","Theta=10g", "Theta=10ng"))
bp+scale_shape_discrete(breaks=c("Pop1","Pop2","Pop3","Pop4"),labels=c("Theta=2g", "Theta=2ng","Theta=10g", "Theta=10ng"))
bp+scale_shape_discrete(breaks=c("Pop1","Pop2","Pop3","Pop4"),labels=c("Theta=2g", "Theta=2ng","Theta=10g", "Theta=10ng"))->plot
plot
# A basic graph
lp <- ggplot(data=df1, aes(x=time, y=total_bill, group=sex, shape=sex)) + geom_line() + geom_point()
lp
df1 <- data.frame(
sex = factor(c("Female","Female","Male","Male")),
time = factor(c("Lunch","Dinner","Lunch","Dinner"), levels=c("Lunch","Dinner")),
total_bill = c(13.53, 16.81, 16.24, 17.42)
)
# A basic graph
lp <- ggplot(data=df1, aes(x=time, y=total_bill, group=sex, shape=sex)) + geom_line() + geom_point()
lp
# Change the legend
lp + scale_shape_discrete(name  ="Payer",
breaks=c("Female", "Male"),
labels=c("Woman", "Man"))
qplot(Obs.n,Max.Pred.value,data=gammaData,color=Population)
qplot(Obs.n,Max.Pred.value,data=gammaData,color=Population)->a
a+scale_shape_discrete(breaks=c("Pop1","Pop2","Pop3","Pop4"),labels=c("Theta=2g", "Theta=2ng","Theta=10g", "Theta=10ng"))
bp <- ggplot(data=PlantGrowth, aes(x=group, y=weight, fill=group)) + geom_boxplot()
bp
bp + scale_fill_discrete(name="Experimental\nCondition",
breaks=c("ctrl", "trt1", "trt2"),
labels=c("Control", "Treatment 1", "Treatment 2"))
qplot(Obs.n,Max.Pred.value,data=gammaData,group=Population,geom=c("point","smooth"),method="loess")->bp
bp+scale_shape_discrete(breaks=c("Pop1","Pop2","Pop3","Pop4"),labels=c("Theta=2g", "Theta=2ng","Theta=10g", "Theta=10ng"))->plot
plot
qplot(Obs.n,Max.Pred.value,data=gammaData,color=Population,geom=c("point","smooth"),method="loess",aes(x=group, y=weight, fill=group))->bp
bp
bp+scale_shape_discrete(breaks=c("Pop1","Pop2","Pop3","Pop4"),labels=c("Theta=2g", "Theta=2ng","Theta=10g", "Theta=10ng"))
head(PlantGrowth)
qplot(Obs.n,Max.Pred.value,data=gammaData,color=Population,geom=c("point","smooth"),method="loess",aes(fill=Population))->bp
bp
bp+scale_shape_discrete(breaks=c("Pop1","Pop2","Pop3","Pop4"),labels=c("Theta=2g", "Theta=2ng","Theta=10g", "Theta=10ng"))
bp+scale_fill_discrete(breaks=c("Pop1","Pop2","Pop3","Pop4"),labels=c("Theta=2g", "Theta=2ng","Theta=10g", "Theta=10ng"))
str(gammaData)
as.factor(gamaData$Population)->gammaData$Pop
as.factor(gammaData$Population)->gammaData$Pop
qplot(Obs.n,Max.Pred.value,data=gammaData,color=Pop,geom=c("point","smooth"),method="loess",aes(fill=Pop))->bp
bp+scale_fill_discrete(breaks=c("Pop1","Pop2","Pop3","Pop4"),labels=c("Theta=2g", "Theta=2ng","Theta=10g", "Theta=10ng"))
qplot(Obs.n,Max.Pred.value,data=gammaData,geom=c("point","smooth"),method="loess",aes(fill=Pop))->bp
bp
qplot(Obs.n,Max.Pred.value,data=gammaData,color=Pop,geom=c("point","smooth"),method="loess",aes(fill=Pop))->bp
bp+scale_shaoe_discrete(breaks=c("Pop1","Pop2","Pop3","Pop4"),labels=c("Theta=2g", "Theta=2ng","Theta=10g", "Theta=10ng"))
bp+scale_shape_discrete(breaks=c("Pop1","Pop2","Pop3","Pop4"),labels=c("Theta=2g", "Theta=2ng","Theta=10g", "Theta=10ng"))
qplot(Obs.n,Max.Pred.value,data=gammaData,color=Pop,geom=c("point","smooth"),method="loess",aes(fill=Pop,shape=Pop))->bp
bp+scale_shape_discrete(breaks=c("Pop1","Pop2","Pop3","Pop4"),labels=c("Theta=2g", "Theta=2ng","Theta=10g", "Theta=10ng"))
bp+scale_shape_discrete(name="Populations",breaks=c("Pop1","Pop2","Pop3","Pop4"),labels=c("Theta=2g", "Theta=2ng","Theta=10g", "Theta=10ng"))
qplot(Obs.n,Max.Pred.value,data=gammaData,color=Pop,fill=Pop,shape=Pop,geom=c("point","smooth"),method="loess")->bp
bp+scale_shape_discrete(name="Populations",breaks=c("Pop1","Pop2","Pop3","Pop4"),labels=c("Theta=2g", "Theta=2ng","Theta=10g", "Theta=10ng"))
bp+scale_fill_discrete(name="Populations",breaks=c("Pop1","Pop2","Pop3","Pop4"),labels=c("Theta=2g", "Theta=2ng","Theta=10g", "Theta=10ng"))
qplot(Obs.n,Max.Pred.value,data=gammaData,color=Pop,fill=Pop,shape=Pop,geom=c("point","smooth"),method="loess")->bp
bp+scale_shape_discrete(name="Populations",breaks=c("Pop1","Pop2","Pop3","Pop4"),labels=c("Theta=2g", "Theta=2ng","Theta=10g", "Theta=10ng"))
qplot(Obs.n,Max.Pred.value,data=gammaData,color=Pop,fill=Pop,geom=c("point","smooth"),method="loess")->bp
bp+scale_shape_discrete(name="Populations",breaks=c("Pop1","Pop2","Pop3","Pop4"),labels=c("Theta=2g", "Theta=2ng","Theta=10g", "Theta=10ng"))
bp+scale_fill_discrete(name="Populations",breaks=c("Pop1","Pop2","Pop3","Pop4"),labels=c("Theta=2g", "Theta=2ng","Theta=10g", "Theta=10ng"))
library(plot3D)
library(plot3D)
Q = 2 # this is PRIOR information from what you know of input SPECIES, not that particular data set (N. scab Q about 10)
maxn = min(4*Q,50) #above 70 this behaves funny???? OR IT MAY BE SOME MULTIPLE OF Q*maxn that is problem?
obsvdk = 13
maxk = 2*obsvdk #must be greater than obsvdk
a <- c(1:maxn)
b <- c(1:maxk)
PSKv <- numeric(maxn*maxk)
PSKv <- matrix(PSKv,ncol=maxn)
colnames(PSKv)<-a
rownames(PSKv)<-b
for (n in 2:maxn) {
#  print ("n")
#  print (n)
for (k in 0:maxk) {
#    print (k)
PSK=0
for (i in 2:n) {
#      print (i)
PSK<-PSK + ((-1)^i)*(choose((n-1),(i-1)))*((i-1)/(Q+i-1))*(Q/(Q+i-1))^k
}
#    print (PSK)
PSKv[k,n]<-PSKv[k,n]+PSK
obsvd<-PSKv[obsvdk,]
}
}
hist3D(x=seq(0,1,length.out=nrow(PSKv)),y=seq(0,1,length.out=ncol(PSKv)),PSKv,col=NULL,border="black",theta=30,phi=30,xlab="k",ylab="n",zlab="P{S=k}",alpha=0.35,main=paste((expression(theta))," = ",Q))
par(mfrow=c(1,1,))
par(mfrow=c(1,1))
library(plot3D)
Q = 2 # this is PRIOR information from what you know of input SPECIES, not that particular data set (N. scab Q about 10)
maxn = min(4*Q,50) #above 70 this behaves funny???? OR IT MAY BE SOME MULTIPLE OF Q*maxn that is problem?
obsvdk = 13
maxk = 2*obsvdk #must be greater than obsvdk
a <- c(1:maxn)
b <- c(1:maxk)
PSKv <- numeric(maxn*maxk)
PSKv <- matrix(PSKv,ncol=maxn)
colnames(PSKv)<-a
rownames(PSKv)<-b
for (n in 2:maxn) {
#  print ("n")
#  print (n)
for (k in 0:maxk) {
#    print (k)
PSK=0
for (i in 2:n) {
#      print (i)
PSK<-PSK + ((-1)^i)*(choose((n-1),(i-1)))*((i-1)/(Q+i-1))*(Q/(Q+i-1))^k
}
#    print (PSK)
PSKv[k,n]<-PSKv[k,n]+PSK
obsvd<-PSKv[obsvdk,]
}
}
hist3D(x=seq(0,1,length.out=nrow(PSKv)),y=seq(0,1,length.out=ncol(PSKv)),PSKv,col=NULL,border="black",theta=30,phi=30,xlab="k",ylab="n",zlab="P{S=k}",alpha=0.35,main=paste((expression(theta))," = ",Q))
estimate.segSites <- function(myMatrix){
answers<-rep(NA,(nrow(myMatrix)-1))
sites<-rep(NA,ncol(myMatrix))
for (j in 1:ncol(myMatrix)){
for (i in 1:(nrow(myMatrix)-1)){
(myMatrix[i+1,j]==myMatrix[1,j])->answers[i]
}
if (all(answers)==TRUE) {0->sites[j]}
else {1->sites[j]}
}
sum(sites,na.rm=T)->segSites
return(segSites)
}
segResults<-list()
for(i in 1:length(pop)){
populations[[i]]->popnow
namepop<-paste("popOrigen",i,sep="")
sapply(popnow,estimate.segSites)->segsites
segsites->segResults[[namepop]]
} # now segResults is a list of vectors with the number of segregating sites for each population, in each sample size
segResults
estimate.segSites(a)
cbind(c(1,2,3),c(3,5,6))
cbind(c(1,2,3),c(3,5,6))->a
estimate.segSites(a)
segResults<-list()
for(i in 1:length(pop)){
populations[[i]]->popnow
namepop<-paste("popOrigen",i,sep="")
samples<-list()
for (j in 1:length(popsizes)){
popnow[[j]]->samplenow
for (k in 1:100){
sapply(samplenow,function(x) estimate.segSites(x))->result
unlist(result)->replicates
}
replicates->samples[[namesample]]
}
samples->segResults[[namepop]]
}  # now segResults is a list of vectors with the number of segregating sites for each population, in each sample size
segResults
segResults[[1]]->pop1segsites
segResults[[2]]->pop2segsites
segResults[[3]]->pop3segsites
segResults[[4]]->pop4segsites
head(pop1segsites)
str(pop1segsites)
estimate.segSites(a)
estimate.segSites(a)->
estimate.segSites(a)->b
class(b)
str(b)
populations[[1]]->popnow
namepop<-paste("popOrigen",1,sep="")
samples<-list()
popnow[[1]]
popnow[[1]]->samplenow
sapply(samplenow,function(x) estimate.segSites(x))->result
class(result)
result
str(result)
class(result)
segResults<-list()
for(i in 1:length(pop)){
populations[[i]]->popnow
namepop<-paste("popOrigen",i,sep="")
samples<-list()
for (j in 1:length(popsizes)){
namesample<-paste("sampleSize",j,sep="")
popnow[[j]]->samplenow
sapply(samplenow,function(x) estimate.segSites(x))->result
result->samples[[namesample]]
}
samples->segResults[[namepop]]
}
str(segResults)
class(segResults)
segResults[[1]]->pop1segsites
segResults[[2]]->pop2segsites
segResults[[3]]->pop3segsites
segResults[[4]]->pop4segsites
class(pop1segsites)
help(sapply)
sapply(pop1segsites,max())
c(3,4,5)->b
max(b)
sapply(pop1segsites,function (x) max(x))
max1<-max(maxpop1)
sapply(pop1segsites,function (x) max(x))->maxpop1
max1<-max(maxpop1)
max1
# And we can calculate the max to set our axes
sapply(pop1segsites,function (x) max(x))->maxpop1
max1<-max(maxpop1)
sapply(pop2segsites,function (x) max(x))->maxpop2
max2<-max(maxpop2)
sapply(pop3segsites,function (x) max(x))->maxpop3
max3<-max(maxpop3)
sapply(pop4segsites,function (x) max(x))->maxpop4
max4<-max(maxpop4)
max1
max2
max3
max4
1300000*3
maxn=128
maxk=max(c(max1,max2,max3,max4))
maxk
a <- c(1:maxn)
b <- c(1:maxk)
PSKv <- numeric(maxn*maxk)
PSKv <- matrix(PSKv,ncol=maxn)
colnames(PSKv)<-a
rownames(PSKv)<-b
for (n in 2:maxn) {
#  print ("n")
#  print (n)
for (k in 0:maxk) {
#    print (k)
PSK=0
for (i in 2:n) {
#      print (i)
PSK<-PSK + ((-1)^i)*(choose((n-1),(i-1)))*((i-1)/(Q+i-1))*(Q/(Q+i-1))^k
}
#    print (PSK)
PSKv[k,n]<-PSKv[k,n]+PSK
obsvd<-PSKv[obsvdk,]
}
}
PSK
hist3D(x=seq(0,1,length.out=nrow(PSKv)),y=seq(0,1,length.out=ncol(PSKv)),PSKv,col=NULL,border="black",theta=30,phi=30,xlab="k",ylab="n",zlab="P{S=k}",alpha=0.35,main=paste((expression(theta))," = ",Q))
pop1segsites
hist(pop1segsites)
class(pop1segsites)
class(pop1segsites[[1]])
hist(pop1segsites[[1]])
plot(obsvd,xlab="n",ylab="P(n|k)",ylim=c(0,0.15),main=paste("for K =",obsvdk, "and theta =",Q,"in black; for hapdiv in red"))
points(probs[,1],probs[,3],col='red')
abline(v=actual)
