net <- haploNet(h)
plot(net, size=attr(net, "freq"), scale.ratio = 2, cex = 0.8)
data(woodmouse)
x <- woodmouse[sample(15, size = 110, replace = TRUE), ]
h <- haplotype(x)
net <- haploNet(h)
plot(net, size=attr(net, "freq"), scale.ratio = 2, cex = 0.8)
plot(!)
plot(1)
library(ggmap)
geocode("Eastern and Midwestern Regions of Canada")
geocode("Eastern and Midwestern Canada")
geocode("Eastern Canada")
geocode("Lebanon, New Hampshire")
geocode("St. Johnsbury, Vermont")
geocode("Salem, New York")
geocode("The Marine Mammal Center")
geocode("yeale, africa")
geocode("yeale, ivory coast")
geocode("northern and central Japan")
geocode("Japan")
geocode("University of Kentucky")
geocode("Tsavo National Park")
geocode("Nairobi National Park")
geocode("solio ranch")
geocode("Fakahatchee Strand,florida")
geocode("Tussen-die-Riviere Game Farm, Orange Free State")
geocode("Tussen-die-Riviere Game Farm")
geocode("Orange Free State")
geocode("Maple, Ontario")
geocode("Maple district, Ontario")
geocode("Sapulot, Sabah")
geocode("Sapulot, Sabah, Malasya")
geocode("Sapulot, Sabah, Malaysia")
geocode("chaco, argentina")
geocode("Corvallis, Oregon")
geocode("Svanoy, western Norway")
geocode("Svanoy, Norway")
geocode("Bremerhaven, Germany")
geocode("Engerdal Municipality, Norway")
geocode("Birganj Forest District")
geocode("Darjeeling")
geocode("Karnataka")
geocode("Shikari Bas, Asia")
geocode("Parsa, Asia")
geocode("Parsa, Shikari Bas, Asia")
geocode("tenasserim, Asia")
geocode("tenasserim")
geocode("kalimatan")
geocode("japan")
geocode("Hluhluwe–iMfolozi Park")
geocode("Hluhluwe–iMfolozi")
geocode("Mtethomusha")
geocode("thomas baine")
geocode("Thomas Baines Nature Reserve")
sessionInfo()
sessionInfo()
setwd("C:/Users/Paula/Dropbox/Picoroco MS/ms")
austroGB <- read.delim("picoroco27Mar2015_allBarnacles.txt",header=TRUE)
picoroco<-subset(austroGB, grepl("psit",austroGB$Species))
# Removing Fabio samples
fabio <- which(picoroco$Origen=='museum')
picoroco[-fabio,]->picoroco
View(picoroco)
library(PopGenome)
# PopGenome have differents modules and by default each module ran all the possible analysis. Modules are: neutrality statistics, linkage disequilibrium, recombination statistics, diversities, selective sweeps, FST estimates, MKT, mixed statistics, BayeScanR
# converting FASTA file to GENOME object
picoGen<-readData("C:/Users/Paula/Dropbox/Picoroco MS/alignout",include.unknown=T)
picoGen@n.sites # gives the number of sites in the alignment
get.sum.data(picoGen) # gives the summary information of the alignment, with the @ you can get all of those summaries, for example:
picoGen
str(picoGen)
nrow(picoroco)
# This chunk reads in the main data file and makes a dataframe
# Load main file
austroGB <- read.delim("picoroco27Mar2015_allBarnacles.txt",header=TRUE)
# ----Cleaning data----
# To use in the analysis with ONLY picoroco
# Subsetting just Austromegabalanus psittacus samples
picoroco<-subset(austroGB, grepl("psit",austroGB$Species))
# Removing Fabio samples
fabio <- which(picoroco$Origen=='museum')
picoroco[-fabio,]->picoroco
# deleting taltal
taltal<-which(picoroco$SiteName=='Taltal') # there is only one sample
picoroco[-taltal,]->picoroco
droplevels(picoroco)->pico
# subsetting just sequences from this study for Supplementary Table 3
supTable3<-pico[,c("AccessionNumber","FullSiteName","sequenceLength")]
write.csv(supTable3,"suppTable3.csv")
# to keep the table we need for the haplotype network
picoLocations<-pico[,c("Label","SiteName","Latitude","Longitude")]
# ----Things to use in the text built-in scripts----
# subset latitude without NAs
austroGBlat<-austroGB[complete.cases(austroGB$Latitude),]
# checking latitudinal extremes
northernLat<-(-1)*(max(austroGBlat$Latitude))
southernLat<-(-1)*(min(austroGBlat$Latitude))
# checking range of sequence lengths analyzed
minLength<-min(pico$sequenceLength,na.rm=T)
maxLength<-max(pico$sequenceLength,na.rm=T)
# some useful stuff to use in the text
FP <- austroGB[grep('PF',austroGB$Label),]
FPconc <-nrow(subset(FP,Species == 'Megabalanus concinnus'))
FPpsit <- nrow(subset(FP,Species == 'Austromegabalanus psittacus'))
IquMcon<-nrow(subset(austroGB,grepl("Aps_Iqu_",austroGB$Label)))
# I added a column "bothReads", if yes, means that we were able to assembly the foward and reverse reads, if no, means we only had one read.
contigYes<-austroGB[grep('yes',austroGB$bothReads),]
contigNo<-austroGB[grep('no',austroGB$bothReads),]
both<-(nrow(contigYes)*100)/nrow(austroGB)
one<-(nrow(contigNo)*100)/nrow(austroGB)
# Number of replicates used for subsequent permutational tests
reps=1000
nrow(picoroco)
head(picoroco)
supTable3<-pico[,c("AccessionNumber","FullSiteName","Latitude","sequenceLength")]
write.csv(supTable3,"suppTable3.csv")
picoroco<-subset(austroGB, grepl("psit",austroGB$Species))
# Removing Fabio samples
fabio <- which(picoroco$Origen=='museum')
picoroco[-fabio,]->picoroco
# subsetting just sequences from this study for Supplementary Table 3
supTable3<-picoroco[,c("AccessionNumber","FullSiteName","Latitude","sequenceLength")]
write.csv(supTable3,"suppTable3.csv")
# load libraries
library(mapdata)
library(maptools)
library(calibrate)
# define limits to plot
latlim = c(-50,-14)
lonlim = c(-75,-70)
# to search colors: colors()[grep("gray", colors())]
data(wrld_simpl)
plot(wrld_simpl, xlim=lonlim, ylim=latlim, axes=TRUE,col="gray85",cex=0.8,cex.axis=0.8)
box()
legend("topleft","Pacific Ocean",bty="n",cex=0.7)
# info useful for map
table1 <- read.delim("Table_1.txt",header=TRUE)
tablePico<-table1[grep('this study',table1$Origen),]
tableFabio<-table1[grep('MNRJ',table1$Origen),]
# subset locations of Fabio vs this study
locations<-unique(tablePico[,c("SiteName","Latitude","Longitude")])
locationsFP<-unique(tableFabio[,c("SiteName","Latitude","Longitude")])
# to add the "sampling" locations, remember is always LON,LAT
points(x=locations$Longitude,y=locations$Latitude,col='black',pch=19)
points(x=locationsFP$Longitude+0.5,y=locationsFP$Latitude,col='red',pch=19)
# to add numbers for the location that can match with the table
#textxy(locations$Longitude+0.3,locations$Latitude+0.6,locations$SiteName,cex=0.5)
#names one by one with colors like haplotype network
#textxy(locations$Longitude[1]+0.3,locations$Latitude[1]+0.6,locations$SiteName[1],cex=0.5,col="greenyellow")
#textxy(locations$Longitude[2]+0.3,locations$Latitude[2]+0.6,locations$SiteName[2],cex=0.5,col="slategray4")
#textxy(locations$Longitude[3]+0.3,locations$Latitude[3]+0.6,locations$SiteName[3],cex=0.5,col="orchid3")
#textxy(locations$Longitude[4]+0.3,locations$Latitude[4]+0.6,locations$SiteName[4],cex=0.5,col="black")
#textxy(locations$Longitude[5]+0.3,locations$Latitude[5]+0.6,locations$SiteName[5],cex=0.5,col="hotpink")
#textxy(locations$Longitude[6]+0.3,locations$Latitude[6]+0.6,locations$SiteName[6],cex=0.5,col="springgreen")
#textxy(locations$Longitude[7]+0.3,locations$Latitude[7]+0.6,locations$SiteName[7],cex=0.5,col="turquoise3")
#textxy(locations$Longitude[8]+0.3,locations$Latitude[8]+0.6,locations$SiteName[8],cex=0.5,col="orange2")
#textxy(locations$Longitude[9]+0.3,locations$Latitude[9]+0.6,locations$SiteName[9],cex=0.5,col="dodgerblue")
#textxy(locations$Longitude[10]+0.3,locations$Latitude[10]+0.6,locations$SiteName[10],cex=0.5,col="tomato")
#textxy(locations$Longitude[11]+0.3,locations$Latitude[11]+0.6,locations$SiteName[11],cex=0.5,col="green4")
# to add numbers for the location that can match with the table
textxy(locationsFP$Longitude[1]+5,locationsFP$Latitude[1]+0.7,locationsFP$SiteName[1],cex=0.5)
textxy(locationsFP$Longitude[2:3]+9,locationsFP$Latitude[2:3]+0.7,locationsFP$SiteName[2:3],cex=0.5)
# to copy the figure to a pdf file
dev.copy(pdf, "picoFigures/Figure1_map.pdf", width=6, height=7)
dev.off()
# load libraries
library(mapdata)
library(maptools)
library(calibrate)
# define limits to plot
latlim = c(-50,-14)
lonlim = c(-75,-70)
# to search colors: colors()[grep("gray", colors())]
data(wrld_simpl)
plot(wrld_simpl, xlim=lonlim, ylim=latlim, axes=TRUE,col="gray85",cex=0.8,cex.axis=0.8)
box()
legend("topleft","Pacific Ocean",bty="n",cex=0.7)
# info useful for map
table1 <- read.delim("Table_1.txt",header=TRUE)
tablePico<-table1[grep('this study',table1$Origen),]
tableFabio<-table1[grep('MNRJ',table1$Origen),]
# subset locations of Fabio vs this study
locations<-unique(tablePico[,c("SiteName","Latitude","Longitude")])
locationsFP<-unique(tableFabio[,c("SiteName","Latitude","Longitude")])
# to add the "sampling" locations, remember is always LON,LAT
points(x=locations$Longitude,y=locations$Latitude,col='black',pch=19)
points(x=locationsFP$Longitude+0.5,y=locationsFP$Latitude,col='red',pch=19)
# to add numbers for the location that can match with the table
textxy(locations$Longitude+0.3,locations$Latitude+0.6,locations$SiteName,cex=0.5)
#names one by one with colors like haplotype network
#textxy(locations$Longitude[1]+0.3,locations$Latitude[1]+0.6,locations$SiteName[1],cex=0.5,col="greenyellow")
#textxy(locations$Longitude[2]+0.3,locations$Latitude[2]+0.6,locations$SiteName[2],cex=0.5,col="slategray4")
#textxy(locations$Longitude[3]+0.3,locations$Latitude[3]+0.6,locations$SiteName[3],cex=0.5,col="orchid3")
#textxy(locations$Longitude[4]+0.3,locations$Latitude[4]+0.6,locations$SiteName[4],cex=0.5,col="black")
#textxy(locations$Longitude[5]+0.3,locations$Latitude[5]+0.6,locations$SiteName[5],cex=0.5,col="hotpink")
#textxy(locations$Longitude[6]+0.3,locations$Latitude[6]+0.6,locations$SiteName[6],cex=0.5,col="springgreen")
#textxy(locations$Longitude[7]+0.3,locations$Latitude[7]+0.6,locations$SiteName[7],cex=0.5,col="turquoise3")
#textxy(locations$Longitude[8]+0.3,locations$Latitude[8]+0.6,locations$SiteName[8],cex=0.5,col="orange2")
#textxy(locations$Longitude[9]+0.3,locations$Latitude[9]+0.6,locations$SiteName[9],cex=0.5,col="dodgerblue")
#textxy(locations$Longitude[10]+0.3,locations$Latitude[10]+0.6,locations$SiteName[10],cex=0.5,col="tomato")
#textxy(locations$Longitude[11]+0.3,locations$Latitude[11]+0.6,locations$SiteName[11],cex=0.5,col="green4")
# to add numbers for the location that can match with the table
textxy(locationsFP$Longitude[1]+5,locationsFP$Latitude[1]+0.7,locationsFP$SiteName[1],cex=0.5)
textxy(locationsFP$Longitude[2:3]+9,locationsFP$Latitude[2:3]+0.7,locationsFP$SiteName[2:3],cex=0.5)
# to copy the figure to a pdf file
dev.copy(pdf, "picoFigures/Figure1_map.pdf", width=6, height=7)
dev.off()
points(x=locations$Longitude,y=locations$Latitude,col='black',pch=19)
points(x=locationsFP$Longitude+0.5,y=locationsFP$Latitude,col='red',pch=19)
table1 <- read.delim("Table_1.txt",header=TRUE)
tablePico<-table1[grep('this study',table1$Origen),]
tableFabio<-table1[grep('MNRJ',table1$Origen),]
View(tableFabio)
table1
# load libraries
library(mapdata)
library(maptools)
library(calibrate)
# define limits to plot
latlim = c(-50,-14)
lonlim = c(-75,-70)
# to search colors: colors()[grep("gray", colors())]
data(wrld_simpl)
plot(wrld_simpl, xlim=lonlim, ylim=latlim, axes=TRUE,col="gray85",cex=0.8,cex.axis=0.8)
box()
legend("topleft","Pacific Ocean",bty="n",cex=0.7)
# info useful for map
table1 <- read.delim("Table_1.txt",header=TRUE)
tablePico<-table1[grep('this study',table1$Origin),]
tableFabio<-table1[grep('MNRJ',table1$Origin),]
# subset locations of Fabio vs this study
locations<-unique(tablePico[,c("SiteName","Latitude","Longitude")])
locationsFP<-unique(tableFabio[,c("SiteName","Latitude","Longitude")])
# to add the "sampling" locations, remember is always LON,LAT
points(x=locations$Longitude,y=locations$Latitude,col='black',pch=19)
points(x=locationsFP$Longitude+0.5,y=locationsFP$Latitude,col='red',pch=19)
# to add numbers for the location that can match with the table
textxy(locations$Longitude+0.3,locations$Latitude+0.6,locations$SiteName,cex=0.5)
#names one by one with colors like haplotype network
#textxy(locations$Longitude[1]+0.3,locations$Latitude[1]+0.6,locations$SiteName[1],cex=0.5,col="greenyellow")
#textxy(locations$Longitude[2]+0.3,locations$Latitude[2]+0.6,locations$SiteName[2],cex=0.5,col="slategray4")
#textxy(locations$Longitude[3]+0.3,locations$Latitude[3]+0.6,locations$SiteName[3],cex=0.5,col="orchid3")
#textxy(locations$Longitude[4]+0.3,locations$Latitude[4]+0.6,locations$SiteName[4],cex=0.5,col="black")
#textxy(locations$Longitude[5]+0.3,locations$Latitude[5]+0.6,locations$SiteName[5],cex=0.5,col="hotpink")
#textxy(locations$Longitude[6]+0.3,locations$Latitude[6]+0.6,locations$SiteName[6],cex=0.5,col="springgreen")
#textxy(locations$Longitude[7]+0.3,locations$Latitude[7]+0.6,locations$SiteName[7],cex=0.5,col="turquoise3")
#textxy(locations$Longitude[8]+0.3,locations$Latitude[8]+0.6,locations$SiteName[8],cex=0.5,col="orange2")
#textxy(locations$Longitude[9]+0.3,locations$Latitude[9]+0.6,locations$SiteName[9],cex=0.5,col="dodgerblue")
#textxy(locations$Longitude[10]+0.3,locations$Latitude[10]+0.6,locations$SiteName[10],cex=0.5,col="tomato")
#textxy(locations$Longitude[11]+0.3,locations$Latitude[11]+0.6,locations$SiteName[11],cex=0.5,col="green4")
# to add numbers for the location that can match with the table
textxy(locationsFP$Longitude[1]+5,locationsFP$Latitude[1]+0.7,locationsFP$SiteName[1],cex=0.5)
textxy(locationsFP$Longitude[2:3]+9,locationsFP$Latitude[2:3]+0.7,locationsFP$SiteName[2:3],cex=0.5)
# to copy the figure to a pdf file
dev.copy(pdf, "picoFigures/Figure1_map.pdf", width=6, height=7)
dev.off()
library(lattice)
library(ggplot2)
library(vioplot)
# now we have the dataframe "gammaData" with all the values we need to plot
gammaData<-read.csv("gammaData.csv",header=T)
table(gammaData$Population,gammaData$Obs.n)
setwd("~/GitHub/QuBar")
gammaData<-read.csv("gammaData.csv",header=T)
table(gammaData$Population,gammaData$Obs.n)
qplot(Obs.n,Max.Pred.value,data=gammaData,color=Pop,fill=Pop,geom=c("point","smooth"),method="loess")->bp
bp
View(gammaData)
qplot(Obs.n,Max.Pred.value,data=gammaData,color=Population,fill=Population,geom=c("point","smooth"),method="loess")->bp
bp
data<-read.csv("hapsegData.csv",header=T)
factor(data$sampleSize)->data$sampleSizeF
data<-data[with(data,order(Haplotypes)),]
databp<-data[with(data,order(Populations)),]
pop1<-data[which(data$Populations=='Pop1'),]
View(pop1)
plot(pop1[1:100])
plot(pop1[1:100,])
plot(pop1$Haplotypes[1:100,])
plot(pop1$Haplotypes[1:100])
require(graphics)
plot(density(c(-20, rep(0,98), 20)), xlim = c(-4, 4))
plot(density(pop1$Haplotypes[1:100]))
plot(density(pop1$Haplotypes[1:100],bw=0.55))
plot(density(pop1$Haplotypes[1:100],bw=0.3377))
plot(density(pop1$Haplotypes[1:100],bw=0.89))
pop3<-data[which(data$Populations=='Pop3'),]
plot(density(pop2$Haplotypes[1:100]))
pop2<-data[which(data$Populations=='Pop2'),]
plot(density(pop2$Haplotypes[1:100]))
plot(density(pop3$Haplotypes[1:100]))
plot(density(pop3$Haplotypes[1:100],bw=0.89))
plot(density(pop3$Haplotypes[300:400]))
databp<-data[with(data,order(Populations,sampleSizeF)),]
pop1<-databp[which(databp$Populations=='Pop1'),]
databp<-data[with(data,order(Populations,sampleSizeF)),]
# plotting multiples boxplot with lattice
with(data,bwplot(Haplotypes~sampleSizeF|Populations,layout=c(2,2)))
pop1<-databp[which(databp$Populations=='Pop1'),]
pop2<-databp[which(databp$Populations=='Pop2'),]
pop3<-databp[which(databp$Populations=='Pop3'),]
pop4<-databp[which(databp$Populations=='Pop4'),]
View(pop3)
View(pop3[400:500,])
View(pop3[401:500,])
plot(density(pop3$Haplotypes[401:500]))
plot(density(pop3$Haplotypes[401:500]),bw=0.89)
plot(density(pop3$Haplotypes[401:500],bw=0.89))
hist(pop3$Haplotypes[401:500])
install.packages("evmix")
library(evmix)
set.seed(1)
par(mfrow = c(1, 1))
n=100
x = rgamma(n, shape = 1, scale = 2)
xx = seq(-0.5, 12, 0.01)
plot(xx, dgamma(xx, shape = 1, scale = 2), type = "l")
rug(x)
xx = seq(-0.5, 12, 0.01)
plot(xx, dgamma(xx, shape = 2, scale = 2), type = "l")
xx = seq(-0.5, 12, 0.01)
plot(xx, dgamma(xx, shape = 3, scale = 2), type = "l")
xx = seq(-0.5, 12, 0.01)
plot(xx, dgamma(xx, shape = 1, scale = 2), type = "l")
x
plot(x)
xx = seq(-0.5, 12, 0.01)
plot(xx, dgamma(xx, shape = 2, scale = 2), type = "l")
lines(xx, dbckden(xx, x, lambda = 1), lwd = 2, col = "red")
xx = seq(-0.5, 12, 0.01)
plot(xx, dgamma(xx, shape = 1, scale = 2), type = "l")
lines(xx, dbckden(xx, x, lambda = 1), lwd = 2, col = "red")
# Demonstrate renormalisation (usually small difference)
n=1000
x = rgamma(n, shape = 1, scale = 2)
xx = seq(-0.5, 15, 0.01)
plot(xx, dgamma(xx, shape = 1, scale = 2), type = "l")
rug(x)
lines(xx, dbckden(xx, x, lambda = 0.5, bcmethod = "simple", proper = TRUE),
lwd = 2, col = "purple")
lines(xx, dbckden(pop3$Haplotypes[401:500], lambda = 1), lwd = 2, col = "red")
x = rgamma(n, shape = 1, scale = 2)
plot()
x
plot(x)
xx = seq(-0.5, 12, 0.01)
xx
plot(xx)
dbckdengpd(pop1$Haplotypes)
dbckdengpd(pop1$Haplotypes,pop1$Haplotypes)
dbckdengpd(pop1$Haplotypes,pop1$Haplotypes,bw=0.5)
uni3<-unique(pop3$Haplotypes)
dbckdengpd(pop1$Haplotypes,uni3,bw=0.5)->a
plot(a)
with(pop1,plot(sampleSize,Haplotypes))
with(pop1,plot(Haplotypes, sampleSize))
library(vioplot)
vioplot(pop1$Haplotypes)
with(pop1,vioplot(Haplotypes,sampleSize))
vio2<-pop1$Haplotypes[pop1$sampleSize==2]
vio2
vio2<-pop1$Haplotypes[pop1$sampleSize==2]
vio4<-pop1$Haplotypes[pop1$sampleSize==4]
vio8<-pop1$Haplotypes[pop1$sampleSize==8]
vio16<-pop1$Haplotypes[pop1$sampleSize==16]
vio32<-pop1$Haplotypes[pop1$sampleSize==32]
vio64<-pop1$Haplotypes[pop1$sampleSize==64]
vio128<-pop1$Haplotypes[pop1$sampleSize==128]
vioplot(vio2,vio4,vio8,vio16,vio32,vio64,vio128)
par(mfrow=c(1,2))
vio2<-pop1$Haplotypes[pop1$sampleSize==2]
vio4<-pop1$Haplotypes[pop1$sampleSize==4]
vio8<-pop1$Haplotypes[pop1$sampleSize==8]
vio16<-pop1$Haplotypes[pop1$sampleSize==16]
vio32<-pop1$Haplotypes[pop1$sampleSize==32]
vio64<-pop1$Haplotypes[pop1$sampleSize==64]
vio128<-pop1$Haplotypes[pop1$sampleSize==128]
vioplot(vio2,vio4,vio8,vio16,vio32,vio64,vio128)
title("Population 1-theta 2")
$sampleSize==128]
vioplot(vio2,vio4,vio8,vio16,vio32,vio64,vio128)
title("Population 3-theta 10")
vio2<-pop3$Haplotypes[pop3$sampleSize==2]
vio4<-pop3$Haplotypes[pop3$sampleSize==4]
vio8<-pop3$Haplotypes[pop3$sampleSize==8]
vio16<-pop3$Haplotypes[pop3$sampleSize==16]
vio32<-pop3$Haplotypes[pop3$sampleSize==32]
vio64<-pop3$Haplotypes[pop3$sampleSize==64]
vio128<-pop3$Haplotypes[pop3$sampleSize==128]
vioplot(vio2,vio4,vio8,vio16,vio32,vio64,vio128)
title("Population 3-theta 10")
vio2<-pop1$Haplotypes[pop1$sampleSize==2]
vio4<-pop1$Haplotypes[pop1$sampleSize==4]
vio8<-pop1$Haplotypes[pop1$sampleSize==8]
vio16<-pop1$Haplotypes[pop1$sampleSize==16]
vio32<-pop1$Haplotypes[pop1$sampleSize==32]
vio64<-pop1$Haplotypes[pop1$sampleSize==64]
vio128<-pop1$Haplotypes[pop1$sampleSize==128]
vioplot(vio2,vio4,vio8,vio16,vio32,vio64,vio128)
title("Population 1-theta 2")
range(Pop1$Haplotypes)
range(pop1$Haplotypes)
range(pop3$Haplotypes)
help(vioplot)
text(1,5,"sample size2")
text(1,5,"sample size2",las=2)
text(1,5,"sample size2",las=2)
help(text)
text(1,5,"sample size2",str=2)
text(1,5,"sample size2",srt=2)
?par
text(1,5,"sample size2",srt=90)
vioplot(vio2,vio4,vio8,vio16,vio32,vio64,vio128,col="aquamarine")
par(mfrow=c(1,2))
vio2<-pop1$Haplotypes[pop1$sampleSize==2]
vio4<-pop1$Haplotypes[pop1$sampleSize==4]
vio8<-pop1$Haplotypes[pop1$sampleSize==8]
vio16<-pop1$Haplotypes[pop1$sampleSize==16]
vio32<-pop1$Haplotypes[pop1$sampleSize==32]
vio64<-pop1$Haplotypes[pop1$sampleSize==64]
vio128<-pop1$Haplotypes[pop1$sampleSize==128]
vioplot(vio2,vio4,vio8,vio16,vio32,vio64,vio128,col="aquamarine")
title("Population 1-theta 2")
# add to an existing plot
x <- rnorm(100)
y <- rnorm(100)
plot(x, y, xlim=c(-5,5), ylim=c(-5,5))
vioplot(x, col="tomato", horizontal=TRUE, at=-4, add=TRUE,lty=2, rectCol="gray")
vioplot(y, col="cyan", horizontal=FALSE, at=-4, add=TRUE,lty=2)
# add to an existing plot
x <- rnorm(100)
y <- rnorm(100)
plot(x, y, xlim=c(-5,5), ylim=c(-5,5))
vioplot(x, col="tomato", horizontal=TRUE, at=-4, add=TRUE,lty=2, rectCol="gray")
vioplot(y, col="cyan", horizontal=FALSE, at=-4, add=TRUE,lty=2,ylab="plot"
# add to an existing plot
x <- rnorm(100)
y <- rnorm(100)
plot(x, y, xlim=c(-5,5), ylim=c(-5,5))
vioplot(x, col="tomato", horizontal=TRUE, at=-4, add=TRUE,lty=2, rectCol="gray")
vioplot(y, col="cyan", horizontal=FALSE, at=-4, add=TRUE,lty=2,ylab="plot")
plot(0:10,0:7,type="n",axes=FALSE,ann=FALSE)
plot(0:10,0:10,type="n",axes=FALSE,ann=FALSE)
vioplot(vio2,vio4,vio8,vio16,vio32,vio64,vio128,col="aquamarine")
plot(0:10,0:10,type="n",axes=FALSE,ann=FALSE)
plot(0:10,0:10,type="n",axes=FALSE,ann=FALSE,ylab="Number of haplotypes"
plot(0:10,0:10,type="n",axes=FALSE,ann=FALSE,ylab="Number of haplotypes")
plot(0:10,0:10,type="n",axes=FALSE,ylab="Number of haplotypes")
axis(side=1,at=1:3,labels=c("first","second","third"))
plot(0:10,0:10,type="n",axes=FALSE,ann=FALSE,ylab="Number of haplotypes",xlab="sampling Size")
par(mfrow=c(1,2))
plot(0:10,0:10,type="n",axes=FALSE,ylab="Number of haplotypes",xlab="sampling Size")
vioplot(vio2,vio4,vio8,vio16,vio32,vio64,vio128,col="aquamarine",names=c("n=2","n=4","n=8","n=16","n=32","n=64","n=128"")
plot(0:10,0:10,type="n",axes=FALSE,ylab="Number of haplotypes",xlab="sampling Size")
vioplot(vio2,vio4,vio8,vio16,vio32,vio64,vio128,col="aquamarine",names=c("n=2","n=4","n=8","n=16","n=32","n=64","n=128")
title("Population 1-theta 2")
vioplot(vio2,vio4,vio8,vio16,vio32,vio64,vio128,col="aquamarine",names=c("n=2","n=4","n=8","n=16","n=32","n=64","n=128"))
plot(0:10,0:10,type="n",axes=FALSE,ylab="Number of haplotypes",xlab="sampling Size")
vioplot(vio2,vio4,vio8,vio16,vio32,vio64,vio128,col="aquamarine",names=c("n=2","n=4","n=8","n=16","n=32","n=64","n=128"),add=T)
title("Population 1-theta 2")
vioplot(vio2,vio4,vio8,vio16,vio32,vio64,vio128,col="aquamarine",names=c("n=2","n=4","n=8","n=16","n=32","n=64","n=128"))
title("Population 1-theta 2")
vio2<-pop3$Haplotypes[pop3$sampleSize==2]
vio4<-pop3$Haplotypes[pop3$sampleSize==4]
vio8<-pop3$Haplotypes[pop3$sampleSize==8]
vio16<-pop3$Haplotypes[pop3$sampleSize==16]
vio32<-pop3$Haplotypes[pop3$sampleSize==32]
vio64<-pop3$Haplotypes[pop3$sampleSize==64]
vio128<-pop3$Haplotypes[pop3$sampleSize==128]
vioplot(vio2,vio4,vio8,vio16,vio32,vio64,vio128,col="orchid",names=c("n2","n4","n8","n16","n32","n64","n128"))
title("Population 3-theta 10")
vioplot(vio2,vio4,vio8,vio16,vio32,vio64,vio128,col="darkcyan",names=c("n2","n4","n8","n16","n32","n64","n128"))
par(mfrow=c(1,2))
vio2<-pop1$Haplotypes[pop1$sampleSize==2]
vio4<-pop1$Haplotypes[pop1$sampleSize==4]
vio8<-pop1$Haplotypes[pop1$sampleSize==8]
vio16<-pop1$Haplotypes[pop1$sampleSize==16]
vio32<-pop1$Haplotypes[pop1$sampleSize==32]
vio64<-pop1$Haplotypes[pop1$sampleSize==64]
vio128<-pop1$Haplotypes[pop1$sampleSize==128]
vioplot(vio2,vio4,vio8,vio16,vio32,vio64,vio128,col="aquamarine",names=c("n2","n4","n8","n16","n32","n64","n128"))
title("Population 1-theta 2")
vio2<-pop3$Haplotypes[pop3$sampleSize==2]
vio4<-pop3$Haplotypes[pop3$sampleSize==4]
vio8<-pop3$Haplotypes[pop3$sampleSize==8]
vio16<-pop3$Haplotypes[pop3$sampleSize==16]
vio32<-pop3$Haplotypes[pop3$sampleSize==32]
vio64<-pop3$Haplotypes[pop3$sampleSize==64]
vio128<-pop3$Haplotypes[pop3$sampleSize==128]
vioplot(vio2,vio4,vio8,vio16,vio32,vio64,vio128,col="darkcyan",names=c("n2","n4","n8","n16","n32","n64","n128"))
title("Population 3-theta 10")
vioplot(vio2,vio4,vio8,vio16,vio32,vio64,vio128,col="aquamarine",names=c("n2","n4","n8","n16","n32","n64","n128"),horizontal=T)
par(mfrow=c(1,2))
vio2<-pop1$Haplotypes[pop1$sampleSize==2]
vio4<-pop1$Haplotypes[pop1$sampleSize==4]
vio8<-pop1$Haplotypes[pop1$sampleSize==8]
vio16<-pop1$Haplotypes[pop1$sampleSize==16]
vio32<-pop1$Haplotypes[pop1$sampleSize==32]
vio64<-pop1$Haplotypes[pop1$sampleSize==64]
vio128<-pop1$Haplotypes[pop1$sampleSize==128]
vioplot(vio2,vio4,vio8,vio16,vio32,vio64,vio128,col="aquamarine",names=c("n2","n4","n8","n16","n32","n64","n128"),horizontal=T)
title("Population 1-theta 2")
vio2<-pop3$Haplotypes[pop3$sampleSize==2]
vio4<-pop3$Haplotypes[pop3$sampleSize==4]
vio8<-pop3$Haplotypes[pop3$sampleSize==8]
vio16<-pop3$Haplotypes[pop3$sampleSize==16]
vio32<-pop3$Haplotypes[pop3$sampleSize==32]
vio64<-pop3$Haplotypes[pop3$sampleSize==64]
vio128<-pop3$Haplotypes[pop3$sampleSize==128]
vioplot(vio2,vio4,vio8,vio16,vio32,vio64,vio128,col="darkcyan",names=c("n2","n4","n8","n16","n32","n64","n128"),horizontal=T)
title("Population 3-theta 10")
