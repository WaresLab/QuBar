while (cdf<0.99) {
cdfprev<-cdf
cdf<-pgamma(x,scale=hapnum$Haplotypes[i],shape=hapnum$hap.diversity[i])
indprob<-cdf-cdfprev
happrob<-hapnum$Haplotypes[i]+(x-1)
array<-c(array,happrob)
array<-c(array,cdf)
array<-c(array,indprob)
x=x+1
}
probs<-t(matrix(array,nrow=3))
max<-max(probs[,3])
maxPred<-probs[which(probs[,3]==max),1]
hapnum$Max.Gamma.value[i]<-maxPred
}
hapnum[hapnum$Populations=='Pop1',]->pop1
table(pop1$Max.Gamma.value,pop1$sampleSize)
cdf
array
class(array)
head(probs)
plot(probs[,1],probs[,3],col='red')
plot(probs[,1],probs[,3],col='red')
plot(probs[,1],probs[,2],col='red')
####################################
numhaps=9
hapdiv=0.5 #minvalue 0.001 if no information; this is PRIOR information
####################################
x=1
cdf=0
indprob=0
array<-NULL
while (cdf<0.99) {
cdfprev<-cdf
#  cdf<-pgamma(x,1,Hapdiv)
#  if use 1 as shape parameter keeping shape parameter constant doesn't account for increased variance (?) as numhaps go up,
#  e.g. error may be higher as you observe more...once it is working run it by somebody mathier.
cdf<-pgamma(x,shape=1,scale=hapdiv) #might be that numhaps is actually the shape parameter!!!! or: something else...non-gamma.
indprob<-cdf-cdfprev
happrob<-numhaps+(x-1)
array<-c(array,happrob)
array<-c(array,cdf)
array<-c(array,indprob)
#  print(happrob)
#  print(cdf)
x=x+1
}
par(mfrow=c(3,1))
probs<-t(matrix(array,nrow=3))
probs
plot(probs[,1],probs[,3],col='red')
x=1
cdf=0
indprob=0
array<-NULL
while (cdf<0.99) {
cdfprev<-cdf
#  cdf<-pgamma(x,1,Hapdiv)
#  if use 1 as shape parameter keeping shape parameter constant doesn't account for increased variance (?) as numhaps go up,
#  e.g. error may be higher as you observe more...once it is working run it by somebody mathier.
cdf<-pgamma(x,shape=1,scale=0.8) #might be that numhaps is actually the shape parameter!!!! or: something else...non-gamma.
indprob<-cdf-cdfprev
happrob<-numhaps+(x-1)
array<-c(array,happrob)
array<-c(array,cdf)
array<-c(array,indprob)
#  print(happrob)
#  print(cdf)
x=x+1
}
par(mfrow=c(3,1))
probs<-t(matrix(array,nrow=3))
probs
plot(probs[,1],probs[,3],col='red')
x=1
cdf=0
indprob=0
array<-NULL
while (cdf<0.99) {
cdfprev<-cdf
#  cdf<-pgamma(x,1,Hapdiv)
#  if use 1 as shape parameter keeping shape parameter constant doesn't account for increased variance (?) as numhaps go up,
#  e.g. error may be higher as you observe more...once it is working run it by somebody mathier.
cdf<-pgamma(x,shape=1,scale=0.8) #might be that numhaps is actually the shape parameter!!!! or: something else...non-gamma.
indprob<-cdf-cdfprev
happrob<-1+(x-1)
array<-c(array,happrob)
array<-c(array,cdf)
array<-c(array,indprob)
#  print(happrob)
#  print(cdf)
x=x+1
}
probs<-t(matrix(array,nrow=3))
probs
plot(probs[,1],probs[,3],col='red')
####################################
numhaps=9
hapdiv=0.5 #minvalue 0.001 if no information; this is PRIOR information
####################################
x=1
cdf=0
indprob=0
array<-NULL
while (cdf<0.99) {
cdfprev<-cdf
#  cdf<-pgamma(x,1,Hapdiv)
#  if use 1 as shape parameter keeping shape parameter constant doesn't account for increased variance (?) as numhaps go up,
#  e.g. error may be higher as you observe more...once it is working run it by somebody mathier.
cdf<-pgamma(x,shape=5,scale=0.8) #might be that numhaps is actually the shape parameter!!!! or: something else...non-gamma.
indprob<-cdf-cdfprev
happrob<-numhaps+(x-1)
array<-c(array,happrob)
array<-c(array,cdf)
array<-c(array,indprob)
#  print(happrob)
#  print(cdf)
x=x+1
}
par(mfrow=c(3,1))
probs<-t(matrix(array,nrow=3))
probs
plot(probs[,1],probs[,3],col='red')
####################################
numhaps=9
hapdiv=0.5 #minvalue 0.001 if no information; this is PRIOR information
####################################
x=1
cdf=0
indprob=0
array<-NULL
while (cdf<0.99) {
cdfprev<-cdf
#  cdf<-pgamma(x,1,Hapdiv)
#  if use 1 as shape parameter keeping shape parameter constant doesn't account for increased variance (?) as numhaps go up,
#  e.g. error may be higher as you observe more...once it is working run it by somebody mathier.
cdf<-pgamma(x,shape=5,scale=0.3) #might be that numhaps is actually the shape parameter!!!! or: something else...non-gamma.
indprob<-cdf-cdfprev
happrob<-numhaps+(x-1)
array<-c(array,happrob)
array<-c(array,cdf)
array<-c(array,indprob)
#  print(happrob)
#  print(cdf)
x=x+1
}
probs<-t(matrix(array,nrow=3))
probs
plot(probs[,1],probs[,3],col='red')
####################################
numhaps=9
hapdiv=0.5 #minvalue 0.001 if no information; this is PRIOR information
####################################
x=1
cdf=0
indprob=0
array<-NULL
while (cdf<0.99) {
cdfprev<-cdf
#  cdf<-pgamma(x,1,Hapdiv)
#  if use 1 as shape parameter keeping shape parameter constant doesn't account for increased variance (?) as numhaps go up,
#  e.g. error may be higher as you observe more...once it is working run it by somebody mathier.
cdf<-pgamma(x,shape=1,scale=0.3) #might be that numhaps is actually the shape parameter!!!! or: something else...non-gamma.
indprob<-cdf-cdfprev
happrob<-numhaps+(x-1)
array<-c(array,happrob)
array<-c(array,cdf)
array<-c(array,indprob)
#  print(happrob)
#  print(cdf)
x=x+1
}
probs<-t(matrix(array,nrow=3))
probs
plot(probs[,1],probs[,3],col='red')
####################################
numhaps=9
hapdiv=0.5 #minvalue 0.001 if no information; this is PRIOR information
####################################
x=1
cdf=0
indprob=0
array<-NULL
while (cdf<0.99) {
cdfprev<-cdf
#  cdf<-pgamma(x,1,Hapdiv)
#  if use 1 as shape parameter keeping shape parameter constant doesn't account for increased variance (?) as numhaps go up,
#  e.g. error may be higher as you observe more...once it is working run it by somebody mathier.
cdf<-pgamma(x,shape=1,scale=0.8) #might be that numhaps is actually the shape parameter!!!! or: something else...non-gamma.
indprob<-cdf-cdfprev
happrob<-numhaps+(x-1)
array<-c(array,happrob)
array<-c(array,cdf)
array<-c(array,indprob)
#  print(happrob)
#  print(cdf)
x=x+1
}
probs<-t(matrix(array,nrow=3))
probs
plot(probs[,1],probs[,3],col='red')
cdf<-pgamma(x,shape=1,scale=0.3) #might be that numhaps is actually the shape parameter!!!! or: something else...non-gamma.
####################################
numhaps=9
hapdiv=0.5 #minvalue 0.001 if no information; this is PRIOR information
####################################
x=1
cdf=0
indprob=0
array<-NULL
while (cdf<0.99) {
cdfprev<-cdf
#  cdf<-pgamma(x,1,Hapdiv)
#  if use 1 as shape parameter keeping shape parameter constant doesn't account for increased variance (?) as numhaps go up,
#  e.g. error may be higher as you observe more...once it is working run it by somebody mathier.
cdf<-pgamma(x,shape=1,scale=0.3) #might be that numhaps is actually the shape parameter!!!! or: something else...non-gamma.
indprob<-cdf-cdfprev
happrob<-numhaps+(x-1)
array<-c(array,happrob)
array<-c(array,cdf)
array<-c(array,indprob)
#  print(happrob)
#  print(cdf)
x=x+1
}
probs<-t(matrix(array,nrow=3))
probs
plot(probs[,1],probs[,3],col='red')
####################################
numhaps=9
hapdiv=0.5 #minvalue 0.001 if no information; this is PRIOR information
####################################
x=1
cdf=0
indprob=0
array<-NULL
while (cdf<0.99) {
cdfprev<-cdf
#  cdf<-pgamma(x,1,Hapdiv)
#  if use 1 as shape parameter keeping shape parameter constant doesn't account for increased variance (?) as numhaps go up,
#  e.g. error may be higher as you observe more...once it is working run it by somebody mathier.
cdf<-pgamma(x,shape=9,scale=0.3) #might be that numhaps is actually the shape parameter!!!! or: something else...non-gamma.
indprob<-cdf-cdfprev
happrob<-numhaps+(x-1)
array<-c(array,happrob)
array<-c(array,cdf)
array<-c(array,indprob)
#  print(happrob)
#  print(cdf)
x=x+1
}
probs<-t(matrix(array,nrow=3))
probs
plot(probs[,1],probs[,3],col='red')
####################################
numhaps=9
hapdiv=0.5 #minvalue 0.001 if no information; this is PRIOR information
####################################
x=1
cdf=0
indprob=0
array<-NULL
while (cdf<0.99) {
cdfprev<-cdf
#  cdf<-pgamma(x,1,Hapdiv)
#  if use 1 as shape parameter keeping shape parameter constant doesn't account for increased variance (?) as numhaps go up,
#  e.g. error may be higher as you observe more...once it is working run it by somebody mathier.
cdf<-pgamma(x,shape=9,scale=0.1) #might be that numhaps is actually the shape parameter!!!! or: something else...non-gamma.
indprob<-cdf-cdfprev
happrob<-numhaps+(x-1)
array<-c(array,happrob)
array<-c(array,cdf)
array<-c(array,indprob)
#  print(happrob)
#  print(cdf)
x=x+1
}
probs<-t(matrix(array,nrow=3))
probs
plot(probs[,1],probs[,3],col='red')
####################################
numhaps=9
hapdiv=0.5 #minvalue 0.001 if no information; this is PRIOR information
####################################
x=1
cdf=0
indprob=0
array<-NULL
while (cdf<0.99) {
cdfprev<-cdf
#  cdf<-pgamma(x,1,Hapdiv)
#  if use 1 as shape parameter keeping shape parameter constant doesn't account for increased variance (?) as numhaps go up,
#  e.g. error may be higher as you observe more...once it is working run it by somebody mathier.
cdf<-pgamma(x,shape=9,scale=0.9) #might be that numhaps is actually the shape parameter!!!! or: something else...non-gamma.
indprob<-cdf-cdfprev
happrob<-numhaps+(x-1)
array<-c(array,happrob)
array<-c(array,cdf)
array<-c(array,indprob)
#  print(happrob)
#  print(cdf)
x=x+1
}
probs<-t(matrix(array,nrow=3))
probs
plot(probs[,1],probs[,3],col='red')
####################################
numhaps=9
hapdiv=0.5 #minvalue 0.001 if no information; this is PRIOR information
####################################
x=1
cdf=0
indprob=0
array<-NULL
while (cdf<0.99) {
cdfprev<-cdf
#  cdf<-pgamma(x,1,Hapdiv)
#  if use 1 as shape parameter keeping shape parameter constant doesn't account for increased variance (?) as numhaps go up,
#  e.g. error may be higher as you observe more...once it is working run it by somebody mathier.
cdf<-pgamma(x,shape=1,scale=9) #might be that numhaps is actually the shape parameter!!!! or: something else...non-gamma.
indprob<-cdf-cdfprev
happrob<-numhaps+(x-1)
array<-c(array,happrob)
array<-c(array,cdf)
array<-c(array,indprob)
#  print(happrob)
#  print(cdf)
x=x+1
}
probs<-t(matrix(array,nrow=3))
probs
plot(probs[,1],probs[,3],col='red')
####################################
numhaps=9
hapdiv=0.5 #minvalue 0.001 if no information; this is PRIOR information
####################################
x=1
cdf=0
indprob=0
array<-NULL
while (cdf<0.99) {
cdfprev<-cdf
#  cdf<-pgamma(x,1,Hapdiv)
#  if use 1 as shape parameter keeping shape parameter constant doesn't account for increased variance (?) as numhaps go up,
#  e.g. error may be higher as you observe more...once it is working run it by somebody mathier.
cdf<-pgamma(x,shape=0.4,scale=9) #might be that numhaps is actually the shape parameter!!!! or: something else...non-gamma.
indprob<-cdf-cdfprev
happrob<-numhaps+(x-1)
array<-c(array,happrob)
array<-c(array,cdf)
array<-c(array,indprob)
#  print(happrob)
#  print(cdf)
x=x+1
}
probs<-t(matrix(array,nrow=3))
probs
plot(probs[,1],probs[,3],col='red')
####################################
numhaps=9
hapdiv=0.5 #minvalue 0.001 if no information; this is PRIOR information
####################################
x=1
cdf=0
indprob=0
array<-NULL
while (cdf<0.99) {
cdfprev<-cdf
#  cdf<-pgamma(x,1,Hapdiv)
#  if use 1 as shape parameter keeping shape parameter constant doesn't account for increased variance (?) as numhaps go up,
#  e.g. error may be higher as you observe more...once it is working run it by somebody mathier.
cdf<-pgamma(x,shape=6,scale=9) #might be that numhaps is actually the shape parameter!!!! or: something else...non-gamma.
indprob<-cdf-cdfprev
happrob<-numhaps+(x-1)
array<-c(array,happrob)
array<-c(array,cdf)
array<-c(array,indprob)
#  print(happrob)
#  print(cdf)
x=x+1
}
probs<-t(matrix(array,nrow=3))
probs
plot(probs[,1],probs[,3],col='red')
write.csv(hapnum,"gammaData.csv")
library(lattice)
library(ggplot2)
library(vioplot)
# now we have the dataframe "gammaData" with all the values we need to plot
gammaData<-read.csv("gammaData.csv",header=T)
table(gammaData$Population,gammaData$Obs.n)
par(mfrow=c(1,1))
plot(Pred.value~Obs.n,data=toFill)
vioplot(toFill$Pred.value,add=T,horizontal=F,lty=2)
# plotting with ggplot, need to fix legends
#http://www.cookbook-r.com/Graphs/Legends_(ggplot2)/
qplot(Obs.n,Max.Pred.value,data=gammaData,color=Population,fill=Population,geom=c("point","smooth"),method="loess")->bp
bp+scale_fill_discrete(name="Populations",breaks=c("Pop1","Pop2","Pop3","Pop4"),labels=c("Theta=2g", "Theta=2ng","Theta=10g", "Theta=10ng"))
library(lattice)
library(evmix) #it includes gamma kernels
# load data with observed haplotypesin the samples
data<-read.csv("hapsegData.csv",header=T)
factor(data$sampleSize)->data$sampleSizeF
data<-data[with(data,order(Haplotypes)),]
databp<-data[with(data,order(Populations,sampleSizeF)),]
# plotting density kernels
plot(density(pop3$Haplotypes[401:500],bw=0.89))
# plotting multiples boxplot with lattice
with(data,bwplot(Haplotypes~sampleSizeF|Populations,layout=c(2,2)))
pop1<-databp[which(databp$Populations=='Pop1'),]
pop2<-databp[which(databp$Populations=='Pop2'),]
pop3<-databp[which(databp$Populations=='Pop3'),]
uni3<-unique(pop3$Haplotypes)
pop4<-databp[which(databp$Populations=='Pop4'),]
par(mfrow=c(1,2))
vio2<-pop1$Haplotypes[pop1$sampleSize==2]
vio4<-pop1$Haplotypes[pop1$sampleSize==4]
vio8<-pop1$Haplotypes[pop1$sampleSize==8]
vio16<-pop1$Haplotypes[pop1$sampleSize==16]
vio32<-pop1$Haplotypes[pop1$sampleSize==32]
vio64<-pop1$Haplotypes[pop1$sampleSize==64]
vio128<-pop1$Haplotypes[pop1$sampleSize==128]
vioplot(vio2,vio4,vio8,vio16,vio32,vio64,vio128,col="aquamarine",names=c("n2","n4","n8","n16","n32","n64","n128"),horizontal=T)
title("Population 1-theta 2")
vio2<-pop3$Haplotypes[pop3$sampleSize==2]
vio4<-pop3$Haplotypes[pop3$sampleSize==4]
vio8<-pop3$Haplotypes[pop3$sampleSize==8]
vio16<-pop3$Haplotypes[pop3$sampleSize==16]
vio32<-pop3$Haplotypes[pop3$sampleSize==32]
vio64<-pop3$Haplotypes[pop3$sampleSize==64]
vio128<-pop3$Haplotypes[pop3$sampleSize==128]
vioplot(vio2,vio4,vio8,vio16,vio32,vio64,vio128,col="darkcyan",names=c("n2","n4","n8","n16","n32","n64","n128"),horizontal=T)
title("Population 3-theta 10")
# to plot multiples histogram with lattice
with(pop2,histogram(~Haplotypes|sampleSizeF,layout=c(2,4)))
plot(data$Haplotypes,col=data$sampleSize)
plot(data$Haplotypes,col=data$Population)
gammaData<-read.csv("gammaData.csv",header=T)
table(gammaData$Population,gammaData$Obs.n)
table(gammaData$Populations,gammaData$sampleSize)
qplot(sampleSize,Max.Gamma.value,data=gammaData,color=Population,fill=Populations,geom=c("point","smooth"),method="loess")->bp
qplot(sampleSize,Max.Gamma.value,data=gammaData,color=Populations,fill=Populations,geom=c("point","smooth"),method="loess")->bp
View(gammaData)
plot(gammaData$sampleSize,gammaData$Max.Gamma.value)
qplot(sampleSize,Max.Gamma.value,data=gammaData,color=Populations,fill=Populations,geom=c("point","smooth"),method="loess")->bp
str(gammaData)
gammaData<-read.csv("gammaData.csv",header=T)
qplot(sampleSize,Max.Gamma.value,data=gammaData,color=Populations,fill=Populations,geom=c("point","smooth"),method="loess")->bp
qplot(Max.Gamma.value,data=gammaData,color=Populations,fill=Populations,geom=c("point","smooth"),method="loess")->bp
qplot(gammaData,aes(x=sampleSize,y=Max.Gamma.value),color=Populations,fill=Populations,geom=c("point","smooth"),method="loess")->bp
qplot(gammaData,aes(x=sampleSize,y=Max.Gamma.value,color=Populations,fill=Populations),geom=c("point","smooth"),method="loess")->bp
qplot(gammaData,aes(x=sampleSize,y=Max.Gamma.value,fill=Populations),geom=c("point","smooth"),method="loess")->bp
qplot(gammaData,aes(x=Haplotypes,y=Max.Gamma.value,fill=Populations),geom=c("point","smooth"),method="loess")->bp
qplot(gammaData,aes(x=sampleSize,y=Max.Gamma.value,fill=Populations),geom=c("point","smooth"))->bp
qplot(gammaData,aes(x=sampleSize,y=Max.Gamma.value))
ggplot(gammaData, aes(x = sampleSize,y=Max.Gamma.value)) + geom_dotplot()
ggplot(gammaData, aes(x = sampleSize,y=Max.Gamma.value)) + geom_point()
factor(gammaData$Populations)->pops
ggplot(gammaData, aes(x = sampleSize,y=Max.Gamma.value,fill=pops)) + geom_point()
ggplot(gammaData, aes(x = sampleSize,y=Max.Gamma.value,fill=pops,color=pops)) + geom_point()
ggplot(gammaData, aes(x = sampleSize,y=Max.Gamma.value,fill=pops,color=pops)) + geom_point()+smooth()
ggplot(gammaData, aes(x = sampleSize,y=Max.Gamma.value,fill=pops,color=pops)) + geom_point()+stat_smooth()
ggplot(gammaData, aes(x = sampleSize,y=Max.Gamma.value,fill=pops,color=pops)) + geom_point()+stat_smooth(method="loess")
ggplot(gammaData, aes(x = sampleSize,y=Max.Gamma.value,fill=pops,color=pops)) + geom_point()+stat_smooth(method="loess")+geom_abline(0,1)
ggplot(gammaData, aes(x = sampleSize,y=Max.Gamma.value,fill=pops,color=pops)) + geom_point()+stat_smooth(method="loess")+geom_abline()
minigamma<-gammaData[gammaData$sampleSize<33,]
ggplot(minigama, aes(x = sampleSize,y=Max.Gamma.value,fill=pops,color=pops)) + geom_point()+stat_smooth(method="loess")+geom_abline()
minigamma<-gammaData[gammaData$sampleSize<33,]
par(mfrow=c(1,2))
# plotting with ggplot, need to fix legends
#http://www.cookbook-r.com/Graphs/Legends_(ggplot2)/
ggplot(minigama, aes(x = sampleSize,y=Max.Gamma.value,fill=pops,color=pops)) + geom_point()+stat_smooth(method="loess")+geom_abline()
ggplot(minigamma, aes(x = sampleSize,y=Max.Gamma.value,fill=pops,color=pops)) + geom_point()+stat_smooth(method="loess")+geom_abline()
class(minigamma)
droplevels(minigamma)
droplevels(minigamma)->minigamma
ggplot(minigamma, aes(x = sampleSize,y=Max.Gamma.value,fill=pops,color=pops)) + geom_point()+stat_smooth(method="loess")+geom_abline()
par(mfrow=c(1,2))
ggplot(gammaData, aes(x = sampleSize,y=Max.Gamma.value,fill=pops,color=pops)) + geom_point()+stat_smooth(method="loess")+geom_abline()
ggplot(gammaData, aes(x = sampleSize,y=Max.Gamma.value,fill=pops,color=pops)) + geom_point()+stat_smooth(method="loess")+geom_abline()
ggplot(minigamma, aes(x = sampleSize,y=Max.Gamma.value,fill=pops,color=pops)) + geom_point()+stat_smooth(method="loess")+geom_abline()+xlim(0,33)
ggplot(minigamma, aes(x = sampleSize,y=Max.Gamma.value,fill=pops,color=pops)) + geom_point()+stat_smooth(method="loess")+geom_abline()+xlim(0,32)
ggplot(minigamma, aes(x = sampleSize,y=Max.Gamma.value,fill=pops,color=pops)) + geom_point()+stat_smooth(method="loess")+geom_abline()+coord_cartesian(xlim=c(0,32))
nrow(minigamma)
nrow(dataGamma)
nrow(gammaData)
head(minigamma)
View(minigamma)
minigamma$pops
gammaData<-read.csv("gammaData.csv",header=T)
minigamma<-gammaData[gammaData$sampleSize<33,]
factor(gammaData$Populations)->gammaData$pops
factor(minigamma$Populations)->minigamma$minipops
ggplot(minigamma, aes(x = sampleSize,y=Max.Gamma.value,fill=pops,color=pops)) + geom_point()+stat_smooth(method="loess")+geom_abline()+coord_cartesian(xlim=c(0,32))
ggplot(minigamma, aes(x = sampleSize,y=Max.Gamma.value,fill=minipops,color=minipops)) + geom_point()+stat_smooth(method="loess")+geom_abline()+coord_cartesian(xlim=c(0,32))
ggplot(minigamma, aes(x = sampleSize,y=Max.Gamma.value,fill=minipops,color=minipops)) + geom_point()+stat_smooth(method="loess")+geom_abline()+xlim=c(0,35)+ylim=c(0,30))
ggplot(minigamma, aes(x = sampleSize,y=Max.Gamma.value,fill=minipops,color=minipops)) + geom_point()+stat_smooth(method="loess")+geom_abline()+xlim=c(0,35)+ylim=c(0,30)
ggplot(minigamma, aes(x = sampleSize,y=Max.Gamma.value,fill=minipops,color=minipops)) + geom_point()+stat_smooth(method="loess")+geom_abline()+xlim(0,35)+ylim(0,30)
ggplot(gammaData, aes(x = sampleSize,y=Max.Gamma.value,fill=pops,color=pops)) + geom_point()+stat_smooth(method="loess")+geom_abline()+scale_fill_discrete(name="Populations",breaks=c("Pop1","Pop2","Pop3","Pop4"),labels=c("Theta=2g", "Theta=2ng","Theta=10g", "Theta=10ng")
ggplot(gammaData, aes(x = sampleSize,y=Max.Gamma.value,fill=pops,color=pops)) + geom_point()+stat_smooth(method="loess")+geom_abline()+scale_fill_discrete(name="Populations",breaks=c("Pop1","Pop2","Pop3","Pop4"),labels=c("Theta=2g", "Theta=2ng","Theta=10g", "Theta=10ng"))
ggplot(minigamma, aes(x = sampleSize,y=Max.Gamma.value,fill=minipops,color=minipops)) + geom_boxplot()+xlim(0,35)+ylim(0,30)
ggplot(minigamma, aes(x = sampleSize,y=Max.Gamma.value,fill=minipops,color=minipops)) + geom_boxplot()+xlim(0,35)+ylim(0,30)+geom_abline()
ggplot(minigamma, aes(x = sampleSize,y=Max.Gamma.value,fill=minipops,color=minipops)) + geom_point()+xlim(0,35)+ylim(0,30)+geom_abline()
ggplot(minigamma, aes(x = sampleSize,y=Max.Gamma.value,fill=minipops,color=minipops)) + geom_boxplot(aes(fill=pops)+xlim(0,35)+ylim(0,30)+geom_abline()
ggplot(minigamma, aes(x = sampleSize,y=Max.Gamma.value,fill=minipops,color=minipops)) + geom_boxplot(aes(fill=pops))+xlim(0,35)+ylim(0,30)+geom_abline()
ggplot(minigamma, aes(x = sampleSize,y=Max.Gamma.value,fill=minipops,color=minipops)) + geom_boxplot(aes(fill=minipops))+xlim(0,35)+ylim(0,30)+geom_abline()
ggplot(minigamma, aes(x = sampleSizeF,y=Max.Gamma.value,fill=minipops,color=minipops)) + geom_boxplot(aes(fill=minipops))+xlim(0,35)+ylim(0,30)+geom_abline()
factor(minigamma$sampleSize)->minigamma$sampleSizeF
ggplot(minigamma, aes(x = sampleSizeF,y=Max.Gamma.value,fill=minipops,color=minipops)) + geom_boxplot(aes(fill=minipops))+xlim(0,35)+ylim(0,30)+geom_abline()
ggplot(minigamma, aes(x = sampleSizeF,y=Max.Gamma.value,fill=minipops,color=minipops)) + geom_boxplot(aes(fill=minipops))+ylim(0,30)+geom_abline()
ggplot(minigamma, aes(x = sampleSizeF,y=Max.Gamma.value,fill=minipops,color=minipops)) + geom_boxplot(aes(fill=minipops))+ylim(0,20)+geom_abline()
ggplot(minigamma, aes(x = sampleSizeF,y=Max.Gamma.value,fill=minipops,color=minipops)) + geom_boxplot(aes(fill=minipops))+ylim(0,20)
