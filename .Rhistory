for (i in 1:length(x)) {
AphiaRecord <- iface@functions$getAphiaRecordByID(x[i],('http://www.marinespecies.org/aphia.php?p=soap'))
result<-c(result, slot(AphiaRecord, "valid_AphiaID"))
}
return(result)
}
MySpecList$AccTaxID<-SynResolv(MySpecList$OrigTaxID)
MySpecList
#---------------------------------------------------------------------
# Add full record information (classification, ranking, authority,...)
#---------------------------------------------------------------------
getFullRecord <- function(x) {
result<-NULL
for (i in 1:length(x)) {
AphiaRecord <- iface@functions$getAphiaRecordByID(x[i],('http://www.marinespecies.org/aphia.php?p=soap'))
slotnames <- slotNames(AphiaRecord)
slotlist <- data.frame(rbind(1:length(slotnames)))
names(slotlist) <- slotnames
for(y in slotnames) {
#R cannot handle a slot name "class"
if (y == "CLASS") {slotlist[1,y] <- '(empty)'}
else {slotlist[1, y] <- slot(AphiaRecord,  y)}
}
result<-rbind(result, slotlist)
}
return(result)
}
AphiaRecords<-getFullRecord(MySpecList$AccTaxID)
MySpecList<-cbind(MySpecList, AphiaRecords)
MySpecList
str(MySpecList)
install.packages("seqinr", dependencies = TRUE)
l ibrary ( s e q i n r )
library(seqinr)
choosebanck('genbank')
choosebank('genbank')
biv<-c("modiolus modiolus","acmaea testudinaria","anomalocardia brasileana")
search<-tryCatch(query("bb", paste("sp=", biv[1],"et k=COI",sep="")))
help(getsequence)
help(getSequence)
source('C:/Users/Paula/Dropbox/toPaula/newR/find_species_range_Paula.r')
```{r}
summary(cars)
```
You can also embed plots, for example:
```{r fig.width=7, fig.height=6}
plot(cars)
```
install.packages("knitr")
install.packages("pandoc")
install.packages("e1071")
library(rmarkdown)
install.packages("rmarkdown")
devtools::install_github("rstudio/rmarkdown")
install.packages("rmarkdown")
install.packages("treebase")
library(devtools)
install_github("treebase", "ropensci")
library(devtools)
install_github("treebase", "ropensci")
library(devtools)
install_github("ape", "ropensci")
install.packages("taxize")
install_github("rfishbase", "ropensci")
install.packages("rfishbase")
install.packages("C:/Users/Paula/Desktop/rfishbase_0.2-2.tar.gz", repos = NULL, type = "source")
library(fishbase)
library(rfishbase)
install.packages("C:/Users/Paula/Desktop/taxize_0.3.0.tar.gz", repos = NULL, type = "source")
install.packages("rdryad")
install.packages("C:/Users/Paula/Desktop/rdryad_0.1.1.tar.gz", repos = NULL, type = "source")
install.packages("treebase")
install.packages("rfishbase")
install.packages("taxize")
download.packages("treebase", destdir="/Users/Paula", type="source") # replace destdir param with any path on your computer
install.packages("/Users/Paula/treebase_0.0-7.1.tar.gz", repos=NULL, type="source")
download.packages("treebase", destdir="C:/Users/Paula/Desktop/", type="source") # replace destdir param with any path on your computer
install.packages("C:/Users/Paula/Desktop/treebase_0.0-7.1.tar.gz", repos=NULL, type="source")
download.packages("treebase", destdir="C:/Users/Paula/Desktop", type="source") # replace destdir param with any path on your computer
install.packages("C:/Users/Paula/Desktop/treebase_0.0-7.1.tar.gz", repos=NULL, type="source")
download.packages("treebase", destdir="c:/Users/Paula/desktop", type="source") # replace destdir param with any path on your computer
install.packages("c:/Users/Paula/desktop/treebase_0.0-7.1.tar.gz", repos=NULL, type="source")
download.packages("treebase", destdir="c:/Users/Paula/desktop", type="source")
install.packages("c:/Users/Paula/desktop/treebase_0.0-7.1.tar.gz", repos=NULL, type="source")
download.packages("treebase", destdir="C:/Users/Paula/desktop", type="source")
install.packages("C:/Users/Paula/desktop/treebase_0.0-7.1.tar.gz", repos=NULL, type="source")
install.packages("c:/Users/Paula/desktop/treebase_0.0-7.1.tar.gz", repos=NULL, type="source")
install.packages("c:/Users/Paula/desktop/treebase_0.0-7.1.tar", repos=NULL, type="source")
install.packages("c:/Users/Paula/desktop/treebase_0.0-7.1.tar.gz", repos=NULL, type="source")
install.packages("C:/Users/Paula/Desktop/treebase_0.0-7.1.tar.gz", repos = NULL, type = "source")
install.packages("C:/Users/Paula/Desktop/treebase_0.0-7.1.tar.gz", repos = NULL, type = "source")
install.packages("C:/Users/Paula/Desktop/rdryad_0.1.1.tar.gz", repos = NULL, type = "source")
install.packages("survnnet")
ta<-cbind(c(1,2),c("Male","Female"),c("Blue","Pink"))
names(ta)<-c("A","B","C")
ta
colnames(ta)<-c("A","B","C")
ta
ta<-cbind(c(1,2),c("Male","Female"),c("Blue","Pink"))
colnames(ta)<-c("A","B","C")
kable(ta)
library(knitr)
kable(ta)
plot(1)
load("C:/Users/Paula/Dropbox/Picoroco MS/Picoroco_Paula.Rmd")
plot(1,2)
plot(1,2,main="prueba",xlab="para ver resolucion")
library(pegas)
> data(woodmouse)
> x <- woodmouse[sample(15, size = 110, replace = TRUE), ]
> h <- haplotype(x)
> net <- haploNet(h)
> plot(net, size=attr(net, "freq"), scale.ratio = 2, cex = 0.8)
data(woodmouse)
x <- woodmouse[sample(15, size = 110, replace = TRUE), ]
h <- haplotype(x)
net <- haploNet(h)
plot(net, size=attr(net, "freq"), scale.ratio = 2, cex = 0.8)
help(summary.loci)
require(adegenet)
data(nancycats)
x <- as.loci(nancycats)
s <- summary(x)
plot(s, layout=20, las=2)
View(nancycats)
vignette('reading files')
vignette('ReadingFiles')
help(plot.haploNet)
data(woodmouse)
x <- woodmouse[sample(15, size = 110, replace = TRUE), ]
h <- haplotype(x)
net <- haploNet(h)
plot(net, size=attr(net, "freq"), scale.ratio = 2, cex = 0.8)
data(woodmouse)
x <- woodmouse[sample(15, size = 110, replace = TRUE), ]
h <- haplotype(x)
net <- haploNet(h)
plot(net, size=attr(net, "freq"), scale.ratio = 2, cex = 0.8)
data(woodmouse)
x <- woodmouse[sample(15, size = 110, replace = TRUE), ]
h <- haplotype(x)
net <- haploNet(h)
plot(net, size=attr(net, "freq"), scale.ratio = 2, cex = 0.8)
plot(!)
plot(1)
library(ggmap)
geocode("Eastern and Midwestern Regions of Canada")
geocode("Eastern and Midwestern Canada")
geocode("Eastern Canada")
geocode("Lebanon, New Hampshire")
geocode("St. Johnsbury, Vermont")
geocode("Salem, New York")
geocode("The Marine Mammal Center")
geocode("yeale, africa")
geocode("yeale, ivory coast")
geocode("northern and central Japan")
geocode("Japan")
geocode("University of Kentucky")
geocode("Tsavo National Park")
geocode("Nairobi National Park")
geocode("solio ranch")
geocode("Fakahatchee Strand,florida")
geocode("Tussen-die-Riviere Game Farm, Orange Free State")
geocode("Tussen-die-Riviere Game Farm")
geocode("Orange Free State")
geocode("Maple, Ontario")
geocode("Maple district, Ontario")
geocode("Sapulot, Sabah")
geocode("Sapulot, Sabah, Malasya")
geocode("Sapulot, Sabah, Malaysia")
geocode("chaco, argentina")
geocode("Corvallis, Oregon")
geocode("Svanoy, western Norway")
geocode("Svanoy, Norway")
geocode("Bremerhaven, Germany")
geocode("Engerdal Municipality, Norway")
geocode("Birganj Forest District")
geocode("Darjeeling")
geocode("Karnataka")
geocode("Shikari Bas, Asia")
geocode("Parsa, Asia")
geocode("Parsa, Shikari Bas, Asia")
geocode("tenasserim, Asia")
geocode("tenasserim")
geocode("kalimatan")
geocode("japan")
geocode("Hluhluwe–iMfolozi Park")
geocode("Hluhluwe–iMfolozi")
geocode("Mtethomusha")
geocode("thomas baine")
geocode("Thomas Baines Nature Reserve")
sessionInfo()
sessionInfo()
library(gap)
library(PopGenome)
read.ms.output("msNew.out")->msGap
setwd("~/GitHub/QuBar")
read.ms.output("msNew.out")->msGap
#class(msGap) #this is a list with the results
#str(msGap)
# the "haplotypes" are in gametes, the haplotype number can be extracted by doing unique() of the haplotype number matrix and then counting rows. Now we need a loop to extract the haplotype number for all simulations.
# haplotype number
haplotypes<-rep(NA,msGap$nreps)
for( i in 1:msGap$nreps){
msGap$gametes[[i]]->mat
nrow(unique(mat))->hapN
hapN->haplotypes[i]
}
hapN
haplotypes
class(haplotypes)
msGap
hist(msGap[1])
help(readMS)
readMS("msNew.out")->msPopGen
msPopGen
str(msPopGen)
msPopGen@region.stats@haplotype.diversity
F_ST.stats(msPopGen)->msPopGen
msPopGen
msPopGen@region.stats@haplotype.diversity
get.sum.data(msPopGen)
msGap$segsites
get.sum.data(msPopGen)
msPopGen
Get.the.Result(msPopGen)
msPopGen@Get.the.Result
get.diversity(msPopGen)
get.diversity(msPopGen[1])
get.diversity(msPopGen[[1]])
get.diversity(msPopGen)
get.F_ST(msPopGen)
msPopGen@region.stats@haplotype.diversity
class(msPopGen@region.stats@haplotype.diversity)
msPopGen@region.stats@haplotype.diversity->hapDiv
unlist(hapDiv)->Hresults
Hresults
msGap
haplotypes
Hresults
round(Hresults,2)
numhaps<-c(7,8,6,8,8,13,12,6,12,9) # I will have this vector for real
numSamp<-rep(18,10) #niter in MS
numhaps
numSamp
numsamp<-rep(18,10) #niter in MS
hapdiv<-c(0.71,0.76,0.58,0.74,0.80,0.84,0.84,0.61,0.84,0.72)
length(hapdiv)
hapdiv
numhaps<-c(7,8,6,8,8,13,12,6,12,9) # I will have this vector for real
numsamp<-rep(18,10) #niter in MS
hapdiv<-c(0.71,0.76,0.58,0.74,0.80,0.84,0.84,0.61,0.84,0.72) #minvalue 0.001 if no information; this is PRIOR information
# set plot space depending number of datasets
par(mfrow=c(2,5))
# loop through all the haplotypes and generate plots
for(i in 1:length(numhaps)){
x=1
cdf=0
indprob=0
array<-NULL
while (cdf<0.99) {
cdfprev<-cdf
#  cdf<-pgamma(x,1,Hapdiv)
#  if use 1 as shape parameter keeping shape parameter constant doesn't account for increased variance (?) as numhaps go up,
#  e.g. error may be higher as you observe more...once it is working run it by somebody mathier.
cdf<-pgamma(x,numhaps[i],hapdiv[i]) #might be that numhaps is actually the shape parameter!!!! or: something else...non-gamma.
indprob<-cdf-cdfprev
happrob<-numhaps[i]+(x-1)
array<-c(array,happrob)
array<-c(array,cdf)
array<-c(array,indprob)
#  print(happrob)
#  print(cdf)
x=x+1
}
probs<-t(matrix(array,nrow=3))
probs
title<-paste(c("n=",numSamp[i]))
plot(probs[,1],probs[,3],col='red',main=title)
}
msGap
msGap$segsites
get.sum.data(msPopGen)
msGap$segsites
get.sum.data(msPopGen)
msGp
msGap
str(msGap)
msGap$segsites
msGap$call
readMS("msNew.out")->msPopGen
#class(msPop) #this is a class genome object
# run F_ST stats and check haplotype diversity
F_ST.stats(msPopGen)->msPopGen
msPopGen@region.stats@haplotype.diversity->hapDiv
unlist(hapDiv)->Hresults
Hresults
read.ms.output("msNew.out")->msGap
#class(msGap) #this is a list with the results
#str(msGap)
# the "haplotypes" are in gametes, the haplotype number can be extracted by doing unique() of the haplotype number matrix and then counting rows. Now we need a loop to extract the haplotype number for all simulations.
# haplotype number
haplotypes<-rep(NA,msGap$nreps)
for( i in 1:msGap$nreps){
# haplotype number
haplotypes<-rep(NA,msGap$nreps)
for( i in 1:msGap$nreps){
msGap$gametes[[i]]->mat
nrow(unique(mat))->hapN
hapN->haplotypes[i]
}
haplotypes
msGap$segsites
get.sum.data(msPopGen)
msGap
system("ms 5 4 -s 5 > ms.out")
system("ms 5 4 -s 5 >ms.out")
read.ms.output("msNew.out")->msGap
msGap$call
read.ms.output("ms.out")->msGap
msGap$call
u
tree<-ms(nsam=20, nreps=1, opts= "-t 1 -G 10 >msnew.out")
library(phyclust)
tree<-ms(nsam=20, nreps=1, opts= "-t 1 -G 10 >msnew.out")
msout <- system("ms 5 4 -s 5 -L", intern=TRUE)
msout3 <- read.ms.output(msout,FALSE)
msout3$call
msout3
cbind(c(1,2),c(3,4))
cbind(c(1,2),c(3,4))->a
as.matrix(a)->b
b
t(b)->c
c
cbind(c(1,2),c(3,4),c(5,6),c(7,8))->a
as.matrix(a)->b
t(b)->c
c
a
b
c
msGap$gametes[[1]]->mat
mat
class(mat)
# haplotype number
haplotypes<-rep(NA,msGap$nreps)
for( i in 1:msGap$nreps){
msGap$gametes[[i]]->mat
t(mat)->matHap
nrow(unique(matHap))->hapN
hapN->haplotypes[i]
}
haplotypes
msout <- system("ms 5 4 -s 5 -L", intern=TRUE)
msgap <- read.ms.output(msout,FALSE)
#read.ms.output("ms.out")->msGap #reads from a file in the current folder
#class(msGap) #this is a list with the results
#str(msGap)
# the "haplotypes" are in gametes, the haplotype number can be extracted by doing unique() of the haplotype number matrix and then counting rows. Now we need a loop to extract the haplotype number for all simulations.
# haplotype number
haplotypes<-rep(NA,msGap$nreps)
for( i in 1:msGap$nreps){
msGap$gametes[[i]]->mat
t(mat)->matHap
nrow(unique(matHap))->hapN
hapN->haplotypes[i]
}
haplotypes
ls()
rm(list=ls())
ls
ls()
msout <- system("ms 5 4 -s 5 -L", intern=TRUE)
msgap <- read.ms.output(msout,FALSE)
#read.ms.output("ms.out")->msGap #reads from a file in the current folder
#class(msGap) #this is a list with the results
#str(msGap)
# the "haplotypes" are in gametes, the haplotype number can be extracted by doing unique() of the haplotype number matrix and then counting rows. Now we need a loop to extract the haplotype number for all simulations.
# haplotype number
haplotypes<-rep(NA,msGap$nreps)
for( i in 1:msGap$nreps){
msGap$gametes[[i]]->mat
t(mat)->matHap
nrow(unique(matHap))->hapN
hapN->haplotypes[i]
}
haplotypes
setwd("~/GitHub/QuBar")
library(gap)
library(PopGenome)
msout <- system("ms 5 4 -s 5 -L", intern=TRUE)
msgap <- read.ms.output(msout,FALSE)
#read.ms.output("ms.out")->msGap #reads from a file in the current folder
#class(msGap) #this is a list with the results
#str(msGap)
# the "haplotypes" are in gametes, the haplotype number can be extracted by doing unique() of the haplotype number matrix and then counting rows. Now we need a loop to extract the haplotype number for all simulations.
# haplotype number
haplotypes<-rep(NA,msGap$nreps)
for( i in 1:msGap$nreps){
msGap$gametes[[i]]->mat
t(mat)->matHap
nrow(unique(matHap))->hapN
hapN->haplotypes[i]
}
haplotypes
msout <- system("ms 5 4 -s 5 -L", intern=TRUE)
msGap <- read.ms.output(msout,FALSE)
#read.ms.output("ms.out")->msGap #reads from a file in the current folder
#class(msGap) #this is a list with the results
#str(msGap)
# the "haplotypes" are in gametes, the haplotype number can be extracted by doing unique() of the haplotype number matrix and then counting rows. Now we need a loop to extract the haplotype number for all simulations.
# haplotype number
haplotypes<-rep(NA,msGap$nreps)
for( i in 1:msGap$nreps){
msGap$gametes[[i]]->mat
t(mat)->matHap
nrow(unique(matHap))->hapN
hapN->haplotypes[i]
}
haplotypes
readMS(msout)
system("ms 5 4 -s 5 -L")
system("ms 5 4 -s 5 -L <ms.out")
system("ms 5 4 -s 5 -L < ms.out")
system("ms 5 4 -s 5 -L -< ms.out")
system("ms 5 4 -s 5 -L > ms.out")
system("ms 5 4 -s 5 -L -> ms.out")
system("ms 50 4 -s 5 > ms.out")
write.table(msout,"msout")
write(msout,"ms.out")
readMS("ms.out")->msPopGen
F_ST.stats(msPopGen)->msPopGen
msPopGen@region.stats@haplotype.diversity->hapDiv
unlist(hapDiv)->Hresults
Hresults
msout <- system("ms 5 4 -s 5 -L", intern=TRUE)
msGap <- read.ms.output(msout,FALSE)
class(msout)
class(msGap)
# haplotype number
haplotypes<-rep(NA,msGap$nreps)
for( i in 1:msGap$nreps){
msGap$gametes[[i]]->mat
t(mat)->matHap
nrow(unique(matHap))->hapN
hapN->haplotypes[i]
}
haplotypes
msPopGen<-neutrality.stats(msPopGen)
msPopGen
msPopGen@region.stats
Tajout<-msPopGen@Tajima.D
Tajout
msGap
msout <- system("ms 10 20 -t 5", intern=TRUE)
msGap <- read.ms.output(msout,FALSE)
msGap
write(msout,"ms.out")
haplotypes<-rep(NA,msGap$nreps)
for( i in 1:msGap$nreps){
for( i in 1:msGap$nreps){
msGap$gametes[[i]]->mat
t(mat)->matHap
nrow(unique(matHap))->hapN
hapN->haplotypes[i]
}
haplotypes
# -----PopGenome ----
readMS("ms.out")->msPopGen #gives a "genome" object
# run F_ST stats and check haplotype diversity
F_ST.stats(msPopGen)->msPopGen
msPopGen@region.stats@haplotype.diversity->hapDiv
unlist(hapDiv)->Hresults
Hresults
# run neutrality.stats to check that Tajima's D is negative and looks real
msPopGen<-neutrality.stats(msPopGen)
Tajout<-msPopGen@Tajima.D
Tajout
# to check that PopGenome and gap read the same, we can see the number of segregating sites
msGap$segsites
get.sum.data(msPopGen)
theta2Growth <- system("ms 1000 1 -t 2 -G 10", intern=TRUE)
theta2NoGrowth <- system("ms 1000 1 -t 2", intern=TRUE)
theta10Growth <- system("ms 1000 1 -t 10 -G 10", intern=TRUE)
theta10NoGrowth <- system("ms 1000 1 -t 10", intern=TRUE)
write(theta2Growth,"theta2Growth.out")
write(theta2NoGrowth,"theta2NoGrowth.out")
write(theta10Growth,"theta10Growth.out")
write(theta10NoGrowth,"theta10NoGrowth.out")
readMS("theta2Growth.out")->popgen.t2g #gives a "genome" object
readMS("theta2NoGrowth.out")->popgen.t2ng
readMS("theta10Growth.out")->popgen.t10g
readMS("theta10NoGrowth.out")->popgen.t10ng
unlist(popgen.t2g@region.stats@haplotype.diversity)->hapDiv.t2g
unlist(popgen.t2ng@region.stats@haplotype.diversity)->hapDiv.t2ng
unlist(popgen.t10g@region.stats@haplotype.diversity)->hapDiv.t10g
unlist(popgen.t10ng@region.stats@haplotype.diversity)->hapDiv.t10ng
hapDiv<-c(hapDiv.t2g,hapDiv.t2ng,hapDiv.t10g,hapDiv.t10ng)
hapDiv
hapDiv.t2g
F_ST.stats(popgen.t2g)->popgen.t2g
F_ST.stats(popgen.t2ng)->popgen.t2ng
F_ST.stats(popgen.t10g)->popgen.t10g
F_ST.stats(popgen.t10ng)->popgen.t10ng
# get haplotype diversity for each source population
unlist(popgen.t2g@region.stats@haplotype.diversity)->hapDiv.t2g
unlist(popgen.t2ng@region.stats@haplotype.diversity)->hapDiv.t2ng
unlist(popgen.t10g@region.stats@haplotype.diversity)->hapDiv.t10g
unlist(popgen.t10ng@region.stats@haplotype.diversity)->hapDiv.t10ng
hapDiv<-c(hapDiv.t2g,hapDiv.t2ng,hapDiv.t10g,hapDiv.t10ng)
hapDiv
