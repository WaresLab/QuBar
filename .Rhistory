for(y in slotnames) {
#R cannot handle a slot name "class"
if (y == "CLASS") {slotlist[1,y] <- '(empty)'}
else {slotlist[1, y] <- slot(AphiaRecord,  y)}
}
result<-rbind(result, slotlist)
}
return(result)
}
AphiaRecords<-getFullRecord(MySpecList$AccTaxID)
MySpecList<-cbind(MySpecList, AphiaRecords)
MySpecList
library(SSOAP)
w = processWSDL("http://www.marinespecies.org/aphia.php?p=soap&wsdl=1")
iface = genSOAPClientInterface(, w)
#-------------------------------------------
# Look up AphiaID
#-------------------------------------------
AphiaID = iface@functions$getAphiaID("Solea solea",1,('http://www.marinespecies.org/aphia.php?p=soap'))
print(AphiaID) #should output '[0] 127160'
#-------------------------------------------
# Create your specieslist
#-------------------------------------------
MySpecies<-c("solea solea", "lanice conchilega", "abra alba", "Polydora audax")
MySpecies<-data.frame(MySpecies)
MySpecList<-data.frame(unique(MySpecies))
#-------------------------------------------
# Get original AphiaID's for specieslist
#-------------------------------------------
AphiaMatch <- function(x) {
result<-NULL
for (i in 1:length(x)) {
AphiaRecord <- iface@functions$getAphiaID(x[i],1,('http://www.marinespecies.org/aphia.php?p=soap'))
result<-c(result, AphiaRecord)
}
return(result)
}
MySpecList$OrigTaxID<-AphiaMatch(MySpecList$MySpecies)
MySpecList
#-------------------------------------------
# Get accepted synonym AphiaID's for specieslist
#-------------------------------------------
SynResolv <- function(x) {
result<-NULL
for (i in 1:length(x)) {
AphiaRecord <- iface@functions$getAphiaRecordByID(x[i],('http://www.marinespecies.org/aphia.php?p=soap'))
result<-c(result, slot(AphiaRecord, "valid_AphiaID"))
}
return(result)
}
MySpecList$AccTaxID<-SynResolv(MySpecList$OrigTaxID)
MySpecList
#---------------------------------------------------------------------
# Add full record information (classification, ranking, authority,...)
#---------------------------------------------------------------------
getFullRecord <- function(x) {
result<-NULL
for (i in 1:length(x)) {
AphiaRecord <- iface@functions$getAphiaRecordByID(x[i],('http://www.marinespecies.org/aphia.php?p=soap'))
slotnames <- slotNames(AphiaRecord)
slotlist <- data.frame(rbind(1:length(slotnames)))
names(slotlist) <- slotnames
for(y in slotnames) {
#R cannot handle a slot name "class"
if (y == "CLASS") {slotlist[1,y] <- '(empty)'}
else {slotlist[1, y] <- slot(AphiaRecord,  y)}
}
result<-rbind(result, slotlist)
}
return(result)
}
AphiaRecords<-getFullRecord(MySpecList$AccTaxID)
MySpecList<-cbind(MySpecList, AphiaRecords)
MySpecList
#-------------------------------------------
source('C:/Users/Paula/Dropbox/toPaula/BodySize RangeSize/script_to use WORMS in R.R')
-------------------------------------------
# Install and load library, process WSDL and prepare R SOAP functions
#-------------------------------------------
#install.packages("SSOAP", repos = "http://www.omegahat.org/R", dependencies = TRUE)
library(SSOAP)
w = processWSDL("http://www.marinespecies.org/aphia.php?p=soap&wsdl=1")
iface = genSOAPClientInterface(, w)
#-------------------------------------------
# Look up AphiaID
#-------------------------------------------
AphiaID = iface@functions$getAphiaID("Solea solea",1,('http://www.marinespecies.org/aphia.php?p=soap'))
print(AphiaID) #should output '[0] 127160'
#-------------------------------------------
# Create your specieslist
#-------------------------------------------
MySpecies<-c("solea solea", "lanice conchilega", "abra alba", "Polydora audax")
MySpecies<-data.frame(MySpecies)
MySpecList<-data.frame(unique(MySpecies))
#-------------------------------------------
# Get original AphiaID's for specieslist
#-------------------------------------------
AphiaMatch <- function(x) {
result<-NULL
for (i in 1:length(x)) {
AphiaRecord <- iface@functions$getAphiaID(x[i],1,('http://www.marinespecies.org/aphia.php?p=soap'))
result<-c(result, AphiaRecord)
}
return(result)
}
MySpecList$OrigTaxID<-AphiaMatch(MySpecList$MySpecies)
MySpecList
#-------------------------------------------
# Get accepted synonym AphiaID's for specieslist
#-------------------------------------------
SynResolv <- function(x) {
result<-NULL
for (i in 1:length(x)) {
AphiaRecord <- iface@functions$getAphiaRecordByID(x[i],('http://www.marinespecies.org/aphia.php?p=soap'))
result<-c(result, slot(AphiaRecord, "valid_AphiaID"))
}
return(result)
}
MySpecList$AccTaxID<-SynResolv(MySpecList$OrigTaxID)
MySpecList
#---------------------------------------------------------------------
# Add full record information (classification, ranking, authority,...)
#---------------------------------------------------------------------
getFullRecord <- function(x) {
result<-NULL
for (i in 1:length(x)) {
AphiaRecord <- iface@functions$getAphiaRecordByID(x[i],('http://www.marinespecies.org/aphia.php?p=soap'))
slotnames <- slotNames(AphiaRecord)
slotlist <- data.frame(rbind(1:length(slotnames)))
names(slotlist) <- slotnames
for(y in slotnames) {
#R cannot handle a slot name "class"
if (y == "CLASS") {slotlist[1,y] <- '(empty)'}
else {slotlist[1, y] <- slot(AphiaRecord,  y)}
}
result<-rbind(result, slotlist)
}
return(result)
}
AphiaRecords<-getFullRecord(MySpecList$AccTaxID)
MySpecList<-cbind(MySpecList, AphiaRecords)
MySpecList
-------------------------------------------
source('C:/Users/Paula/Dropbox/toPaula/BodySize RangeSize/script_to use WORMS in R.R')
# Install and load library, process WSDL and prepare R SOAP functions
#-------------------------------------------
#install.packages("SSOAP", repos = "http://www.omegahat.org/R", dependencies = TRUE)
library(SSOAP)
w = processWSDL("http://www.marinespecies.org/aphia.php?p=soap&wsdl=1")
iface = genSOAPClientInterface(, w)
#-------------------------------------------
# Look up AphiaID
#-------------------------------------------
AphiaID = iface@functions$getAphiaID("Solea solea",1,('http://www.marinespecies.org/aphia.php?p=soap'))
print(AphiaID) #should output '[0] 127160'
#-------------------------------------------
# Create your specieslist
#-------------------------------------------
MySpecies<-c("solea solea", "lanice conchilega", "abra alba", "Polydora audax")
MySpecies<-data.frame(MySpecies)
MySpecList<-data.frame(unique(MySpecies))
#-------------------------------------------
# Get original AphiaID's for specieslist
#-------------------------------------------
AphiaMatch <- function(x) {
result<-NULL
for (i in 1:length(x)) {
AphiaRecord <- iface@functions$getAphiaID(x[i],1,('http://www.marinespecies.org/aphia.php?p=soap'))
result<-c(result, AphiaRecord)
}
return(result)
}
MySpecList$OrigTaxID<-AphiaMatch(MySpecList$MySpecies)
MySpecList
#-------------------------------------------
# Get accepted synonym AphiaID's for specieslist
#-------------------------------------------
SynResolv <- function(x) {
result<-NULL
for (i in 1:length(x)) {
AphiaRecord <- iface@functions$getAphiaRecordByID(x[i],('http://www.marinespecies.org/aphia.php?p=soap'))
result<-c(result, slot(AphiaRecord, "valid_AphiaID"))
}
return(result)
}
MySpecList$AccTaxID<-SynResolv(MySpecList$OrigTaxID)
MySpecList
#---------------------------------------------------------------------
# Add full record information (classification, ranking, authority,...)
#---------------------------------------------------------------------
getFullRecord <- function(x) {
result<-NULL
for (i in 1:length(x)) {
AphiaRecord <- iface@functions$getAphiaRecordByID(x[i],('http://www.marinespecies.org/aphia.php?p=soap'))
slotnames <- slotNames(AphiaRecord)
slotlist <- data.frame(rbind(1:length(slotnames)))
names(slotlist) <- slotnames
for(y in slotnames) {
#R cannot handle a slot name "class"
if (y == "CLASS") {slotlist[1,y] <- '(empty)'}
else {slotlist[1, y] <- slot(AphiaRecord,  y)}
}
result<-rbind(result, slotlist)
}
return(result)
}
AphiaRecords<-getFullRecord(MySpecList$AccTaxID)
MySpecList<-cbind(MySpecList, AphiaRecords)
MySpecList
str(MySpecList)
install.packages("seqinr", dependencies = TRUE)
l ibrary ( s e q i n r )
library(seqinr)
choosebanck('genbank')
choosebank('genbank')
biv<-c("modiolus modiolus","acmaea testudinaria","anomalocardia brasileana")
search<-tryCatch(query("bb", paste("sp=", biv[1],"et k=COI",sep="")))
help(getsequence)
help(getSequence)
source('C:/Users/Paula/Dropbox/toPaula/newR/find_species_range_Paula.r')
```{r}
summary(cars)
```
You can also embed plots, for example:
```{r fig.width=7, fig.height=6}
plot(cars)
```
install.packages("knitr")
install.packages("pandoc")
install.packages("e1071")
library(rmarkdown)
install.packages("rmarkdown")
devtools::install_github("rstudio/rmarkdown")
install.packages("rmarkdown")
install.packages("treebase")
library(devtools)
install_github("treebase", "ropensci")
library(devtools)
install_github("treebase", "ropensci")
library(devtools)
install_github("ape", "ropensci")
install.packages("taxize")
install_github("rfishbase", "ropensci")
install.packages("rfishbase")
install.packages("C:/Users/Paula/Desktop/rfishbase_0.2-2.tar.gz", repos = NULL, type = "source")
library(fishbase)
library(rfishbase)
install.packages("C:/Users/Paula/Desktop/taxize_0.3.0.tar.gz", repos = NULL, type = "source")
install.packages("rdryad")
install.packages("C:/Users/Paula/Desktop/rdryad_0.1.1.tar.gz", repos = NULL, type = "source")
install.packages("treebase")
install.packages("rfishbase")
install.packages("taxize")
download.packages("treebase", destdir="/Users/Paula", type="source") # replace destdir param with any path on your computer
install.packages("/Users/Paula/treebase_0.0-7.1.tar.gz", repos=NULL, type="source")
download.packages("treebase", destdir="C:/Users/Paula/Desktop/", type="source") # replace destdir param with any path on your computer
install.packages("C:/Users/Paula/Desktop/treebase_0.0-7.1.tar.gz", repos=NULL, type="source")
download.packages("treebase", destdir="C:/Users/Paula/Desktop", type="source") # replace destdir param with any path on your computer
install.packages("C:/Users/Paula/Desktop/treebase_0.0-7.1.tar.gz", repos=NULL, type="source")
download.packages("treebase", destdir="c:/Users/Paula/desktop", type="source") # replace destdir param with any path on your computer
install.packages("c:/Users/Paula/desktop/treebase_0.0-7.1.tar.gz", repos=NULL, type="source")
download.packages("treebase", destdir="c:/Users/Paula/desktop", type="source")
install.packages("c:/Users/Paula/desktop/treebase_0.0-7.1.tar.gz", repos=NULL, type="source")
download.packages("treebase", destdir="C:/Users/Paula/desktop", type="source")
install.packages("C:/Users/Paula/desktop/treebase_0.0-7.1.tar.gz", repos=NULL, type="source")
install.packages("c:/Users/Paula/desktop/treebase_0.0-7.1.tar.gz", repos=NULL, type="source")
install.packages("c:/Users/Paula/desktop/treebase_0.0-7.1.tar", repos=NULL, type="source")
install.packages("c:/Users/Paula/desktop/treebase_0.0-7.1.tar.gz", repos=NULL, type="source")
install.packages("C:/Users/Paula/Desktop/treebase_0.0-7.1.tar.gz", repos = NULL, type = "source")
install.packages("C:/Users/Paula/Desktop/treebase_0.0-7.1.tar.gz", repos = NULL, type = "source")
install.packages("C:/Users/Paula/Desktop/rdryad_0.1.1.tar.gz", repos = NULL, type = "source")
install.packages("survnnet")
ta<-cbind(c(1,2),c("Male","Female"),c("Blue","Pink"))
names(ta)<-c("A","B","C")
ta
colnames(ta)<-c("A","B","C")
ta
ta<-cbind(c(1,2),c("Male","Female"),c("Blue","Pink"))
colnames(ta)<-c("A","B","C")
kable(ta)
library(knitr)
kable(ta)
plot(1)
load("C:/Users/Paula/Dropbox/Picoroco MS/Picoroco_Paula.Rmd")
plot(1,2)
plot(1,2,main="prueba",xlab="para ver resolucion")
library(pegas)
> data(woodmouse)
> x <- woodmouse[sample(15, size = 110, replace = TRUE), ]
> h <- haplotype(x)
> net <- haploNet(h)
> plot(net, size=attr(net, "freq"), scale.ratio = 2, cex = 0.8)
data(woodmouse)
x <- woodmouse[sample(15, size = 110, replace = TRUE), ]
h <- haplotype(x)
net <- haploNet(h)
plot(net, size=attr(net, "freq"), scale.ratio = 2, cex = 0.8)
help(summary.loci)
require(adegenet)
data(nancycats)
x <- as.loci(nancycats)
s <- summary(x)
plot(s, layout=20, las=2)
View(nancycats)
vignette('reading files')
vignette('ReadingFiles')
help(plot.haploNet)
data(woodmouse)
x <- woodmouse[sample(15, size = 110, replace = TRUE), ]
h <- haplotype(x)
net <- haploNet(h)
plot(net, size=attr(net, "freq"), scale.ratio = 2, cex = 0.8)
data(woodmouse)
x <- woodmouse[sample(15, size = 110, replace = TRUE), ]
h <- haplotype(x)
net <- haploNet(h)
plot(net, size=attr(net, "freq"), scale.ratio = 2, cex = 0.8)
data(woodmouse)
x <- woodmouse[sample(15, size = 110, replace = TRUE), ]
h <- haplotype(x)
net <- haploNet(h)
plot(net, size=attr(net, "freq"), scale.ratio = 2, cex = 0.8)
plot(!)
plot(1)
library(ggmap)
geocode("Eastern and Midwestern Regions of Canada")
geocode("Eastern and Midwestern Canada")
geocode("Eastern Canada")
geocode("Lebanon, New Hampshire")
geocode("St. Johnsbury, Vermont")
geocode("Salem, New York")
geocode("The Marine Mammal Center")
geocode("yeale, africa")
geocode("yeale, ivory coast")
geocode("northern and central Japan")
geocode("Japan")
geocode("University of Kentucky")
geocode("Tsavo National Park")
geocode("Nairobi National Park")
geocode("solio ranch")
geocode("Fakahatchee Strand,florida")
geocode("Tussen-die-Riviere Game Farm, Orange Free State")
geocode("Tussen-die-Riviere Game Farm")
geocode("Orange Free State")
geocode("Maple, Ontario")
geocode("Maple district, Ontario")
geocode("Sapulot, Sabah")
geocode("Sapulot, Sabah, Malasya")
geocode("Sapulot, Sabah, Malaysia")
geocode("chaco, argentina")
geocode("Corvallis, Oregon")
geocode("Svanoy, western Norway")
geocode("Svanoy, Norway")
geocode("Bremerhaven, Germany")
geocode("Engerdal Municipality, Norway")
geocode("Birganj Forest District")
geocode("Darjeeling")
geocode("Karnataka")
geocode("Shikari Bas, Asia")
geocode("Parsa, Asia")
geocode("Parsa, Shikari Bas, Asia")
geocode("tenasserim, Asia")
geocode("tenasserim")
geocode("kalimatan")
geocode("japan")
geocode("Hluhluwe–iMfolozi Park")
geocode("Hluhluwe–iMfolozi")
geocode("Mtethomusha")
geocode("thomas baine")
geocode("Thomas Baines Nature Reserve")
sessionInfo()
sessionInfo()
setwd("~/GitHub/QuBar")
library(PopGenome)
readMS(ms.out)
readMS("ms.out")
readMS("ms.out")->a
a
readData(A)
readData(a)
help(readMS)
readMS("ms.out.txt")->a
file<-readData("FastaSeqsPau",include.unknown=T)
file<-neutrality.stats(file)
# or the F_ST stats if we want haplotype diversity
file<-F_ST.stats(file,only.haplotype.counts=T)
ms.file <- MS(file, niter=20,thetaID="Tajima", neutrality=TRUE)
readMS("ms.out")->a
a
a@region.names
a@region.names[1]
a<-F_ST.stats(a,only.haplotype.counts=T)
a@Pi
a@region.stats
a@region.stats@haplotype.counts
a@region.stats
a@region.stats@nucleotide.diversity
a
a@region.stats[1]
a@region.names[1]->b
b
class(b)
class(a)
get.sum.data()
get.sum.data(a)
install.packages("gap")
library(gap)
read.ms.output("ms.out")->ms.File
ms.File
str(ms.File)
read.ms.output("ms.out")->msGap
readMS("ms.out")->msPop
class(msPop) #this is a class genome object
str(msPop)
class(msGap)
str(msGap)
file<-readData("FastaSeqs",include.unknown=T)
get.sum.data(file)
# checking if the ms output simulated using two modules are identical
file<-neutrality.stats(file)
file<-F_ST.stats(file,only.haplotype.counts=T)
ms.file <- MS(file, niter=100,thetaID="Tajima", neutrality=TRUE)
ms.file <- MS(file, niter=50,thetaID="Tajima", neutrality=TRUE)
ms.file <- MS(file, niter=20,thetaID="Tajima", neutrality=TRUE)
ms.file <- MS(file, niter=10,thetaID="Tajima", neutrality=TRUE)
readMS("ms.out")->msPop
class(msPop) #this is a class genome object
str(msPop)
get.sum.data(msPop)
set.seed(123)
ms.file <- MS(file, niter=10,thetaID="Tajima", neutrality=TRUE)
readMS("ms.out")->msPop
class(msPop) #this is a class genome object
get.sum.data(msPop)
read.ms.output("ms.out")->msGap
class(msGap) #this is a list with the results
str(msGap)
msGap$gametes[1]
str(msGap$gametes)
get.sum.data(msPop)
msPop@region.stats
msPop@region.stats@haplotype.counts
msPop@region.stats@haplotype.counts[1]
msPop@region.stats
msPop@region.stats@nucleotide.diversity
MS_getStats(ms.file) #stats change depending what module we choose
MS_getStats(ms.file)->fileStats #stats change depending what module we choose
fileStats
str(fileStats)
str(ms.file)
ms.file@locus
ms.file@locus[1]
ms.file@locus[1]@n.sam
ms.file@locus[[1]
ms.file@locus[[1]]
ms.file@locus[[1]]@n.sam
ms.file@locus[[1]]@n.iter
ms.file@locus[[1]]@n.theta
ms.file@locus[[1]]@theta
ms.file@locus[[1]]@n.iter
ms.file@locus[[1]]@n.sam
msPop@Pi #Nei's diversity (within population)
file<-F_ST.stats(file,only.haplotype.counts=T,Pi=T)
file@region.stats@haplotype.counts->haplotypecounts
haplotypecounts
hapfreq<-unlist(haplotypecounts)
actual<-sum(hapfreq)
hapfreq<-hapfreq/actual
numhaps<-length(hapfreq)
numhaps
str(haplotypecounts)
msPop
readData(msPop)
get.F_ST(msPop)
file<-F_ST.stats(file,only.haplotype.counts=T)
get.F_ST(msPop)
file<-F_ST.stats(file)
get.F_ST(msPop)
readMS("ms.out")->msPop
#class(msPop) #this is a class genome object
get.sum.data(msPop)
file<-readData("FastaSeqs",include.unknown=T)
get.sum.data(file)
file<-F_ST.stats(file,only.haplotype.counts=T)
ms.file <- MS(file, niter=10,thetaID="Tajima", F_ST=TRUE)
str(msGap)
read.ms.output("ms.out")->msGap
#class(msGap) #this is a list with the results
readMS("ms.out")->msPop
#class(msPop) #this is a class genome object
get.sum.data(msPop)
msPop@region.stats
readMS("ms.out")->msPop
get.sum.data(msPop)
read.ms.output("ms.out")->msGap
#class(msGap) #this is a list with the results
str(msGap)
setwd("~/GitHub/QuBar")
setwd("~/GitHub/QuBar")
readMS("ms.out")->msPop
#class(msPop) #this is a class genome object
get.sum.data(msPop)
msPop@region.stats
readMS("ms.Newout")->msPop
readMS("msNew.out")->msPop
#class(msPop) #this is a class genome object
get.sum.data(msPop)
read.ms.output("msNew.out")->msGap
library(gap)
read.ms.output("msNew.out")->msGap
#class(msGap) #this is a list with the results
str(msGap)
