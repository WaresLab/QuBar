library(devtools)
install_github("ape", "ropensci")
install.packages("taxize")
install_github("rfishbase", "ropensci")
install.packages("rfishbase")
install.packages("C:/Users/Paula/Desktop/rfishbase_0.2-2.tar.gz", repos = NULL, type = "source")
library(fishbase)
library(rfishbase)
install.packages("C:/Users/Paula/Desktop/taxize_0.3.0.tar.gz", repos = NULL, type = "source")
install.packages("rdryad")
install.packages("C:/Users/Paula/Desktop/rdryad_0.1.1.tar.gz", repos = NULL, type = "source")
install.packages("treebase")
install.packages("rfishbase")
install.packages("taxize")
download.packages("treebase", destdir="/Users/Paula", type="source") # replace destdir param with any path on your computer
install.packages("/Users/Paula/treebase_0.0-7.1.tar.gz", repos=NULL, type="source")
download.packages("treebase", destdir="C:/Users/Paula/Desktop/", type="source") # replace destdir param with any path on your computer
install.packages("C:/Users/Paula/Desktop/treebase_0.0-7.1.tar.gz", repos=NULL, type="source")
download.packages("treebase", destdir="C:/Users/Paula/Desktop", type="source") # replace destdir param with any path on your computer
install.packages("C:/Users/Paula/Desktop/treebase_0.0-7.1.tar.gz", repos=NULL, type="source")
download.packages("treebase", destdir="c:/Users/Paula/desktop", type="source") # replace destdir param with any path on your computer
install.packages("c:/Users/Paula/desktop/treebase_0.0-7.1.tar.gz", repos=NULL, type="source")
download.packages("treebase", destdir="c:/Users/Paula/desktop", type="source")
install.packages("c:/Users/Paula/desktop/treebase_0.0-7.1.tar.gz", repos=NULL, type="source")
download.packages("treebase", destdir="C:/Users/Paula/desktop", type="source")
install.packages("C:/Users/Paula/desktop/treebase_0.0-7.1.tar.gz", repos=NULL, type="source")
install.packages("c:/Users/Paula/desktop/treebase_0.0-7.1.tar.gz", repos=NULL, type="source")
install.packages("c:/Users/Paula/desktop/treebase_0.0-7.1.tar", repos=NULL, type="source")
install.packages("c:/Users/Paula/desktop/treebase_0.0-7.1.tar.gz", repos=NULL, type="source")
install.packages("C:/Users/Paula/Desktop/treebase_0.0-7.1.tar.gz", repos = NULL, type = "source")
install.packages("C:/Users/Paula/Desktop/treebase_0.0-7.1.tar.gz", repos = NULL, type = "source")
install.packages("C:/Users/Paula/Desktop/rdryad_0.1.1.tar.gz", repos = NULL, type = "source")
install.packages("survnnet")
ta<-cbind(c(1,2),c("Male","Female"),c("Blue","Pink"))
names(ta)<-c("A","B","C")
ta
colnames(ta)<-c("A","B","C")
ta
ta<-cbind(c(1,2),c("Male","Female"),c("Blue","Pink"))
colnames(ta)<-c("A","B","C")
kable(ta)
library(knitr)
kable(ta)
plot(1)
load("C:/Users/Paula/Dropbox/Picoroco MS/Picoroco_Paula.Rmd")
plot(1,2)
plot(1,2,main="prueba",xlab="para ver resolucion")
library(pegas)
> data(woodmouse)
> x <- woodmouse[sample(15, size = 110, replace = TRUE), ]
> h <- haplotype(x)
> net <- haploNet(h)
> plot(net, size=attr(net, "freq"), scale.ratio = 2, cex = 0.8)
data(woodmouse)
x <- woodmouse[sample(15, size = 110, replace = TRUE), ]
h <- haplotype(x)
net <- haploNet(h)
plot(net, size=attr(net, "freq"), scale.ratio = 2, cex = 0.8)
help(summary.loci)
require(adegenet)
data(nancycats)
x <- as.loci(nancycats)
s <- summary(x)
plot(s, layout=20, las=2)
View(nancycats)
vignette('reading files')
vignette('ReadingFiles')
help(plot.haploNet)
data(woodmouse)
x <- woodmouse[sample(15, size = 110, replace = TRUE), ]
h <- haplotype(x)
net <- haploNet(h)
plot(net, size=attr(net, "freq"), scale.ratio = 2, cex = 0.8)
data(woodmouse)
x <- woodmouse[sample(15, size = 110, replace = TRUE), ]
h <- haplotype(x)
net <- haploNet(h)
plot(net, size=attr(net, "freq"), scale.ratio = 2, cex = 0.8)
data(woodmouse)
x <- woodmouse[sample(15, size = 110, replace = TRUE), ]
h <- haplotype(x)
net <- haploNet(h)
plot(net, size=attr(net, "freq"), scale.ratio = 2, cex = 0.8)
plot(!)
plot(1)
library(ggmap)
geocode("Eastern and Midwestern Regions of Canada")
geocode("Eastern and Midwestern Canada")
geocode("Eastern Canada")
geocode("Lebanon, New Hampshire")
geocode("St. Johnsbury, Vermont")
geocode("Salem, New York")
geocode("The Marine Mammal Center")
geocode("yeale, africa")
geocode("yeale, ivory coast")
geocode("northern and central Japan")
geocode("Japan")
geocode("University of Kentucky")
geocode("Tsavo National Park")
geocode("Nairobi National Park")
geocode("solio ranch")
geocode("Fakahatchee Strand,florida")
geocode("Tussen-die-Riviere Game Farm, Orange Free State")
geocode("Tussen-die-Riviere Game Farm")
geocode("Orange Free State")
geocode("Maple, Ontario")
geocode("Maple district, Ontario")
geocode("Sapulot, Sabah")
geocode("Sapulot, Sabah, Malasya")
geocode("Sapulot, Sabah, Malaysia")
geocode("chaco, argentina")
geocode("Corvallis, Oregon")
geocode("Svanoy, western Norway")
geocode("Svanoy, Norway")
geocode("Bremerhaven, Germany")
geocode("Engerdal Municipality, Norway")
geocode("Birganj Forest District")
geocode("Darjeeling")
geocode("Karnataka")
geocode("Shikari Bas, Asia")
geocode("Parsa, Asia")
geocode("Parsa, Shikari Bas, Asia")
geocode("tenasserim, Asia")
geocode("tenasserim")
geocode("kalimatan")
geocode("japan")
geocode("Hluhluwe–iMfolozi Park")
geocode("Hluhluwe–iMfolozi")
geocode("Mtethomusha")
geocode("thomas baine")
geocode("Thomas Baines Nature Reserve")
sessionInfo()
sessionInfo()
setwd("C:/Users/Paula/Dropbox/Picoroco MS/ms")
# This chunk reads in the main data file and makes a dataframe
# Load main file
austroGB <- read.delim("picoroco27Mar2015_allBarnacles.txt",header=TRUE)
# ----Cleaning data----
# To use in the analysis with ONLY picoroco
# Subsetting just Austromegabalanus psittacus samples
picoroco<-subset(austroGB, grepl("psit",austroGB$Species))
# Removing Fabio samples
fabio <- which(picoroco$Origen=='museum')
picoroco[-fabio,]->picoroco
# subsetting just sequences from this study for Supplementary Table 3
#supTable3<-picoroco[,c("AccessionNumber","FullSiteName","Latitude","sequenceLength")]
#write.csv(supTable3,"suppTable3.csv")
# deleting taltal
taltal<-which(picoroco$SiteName=='Taltal') # there is only one sample
picoroco[-taltal,]->picoroco
droplevels(picoroco)->pico
# to keep the table we need for the haplotype network
picoLocations<-pico[,c("Label","SiteName","Latitude","Longitude")]
# ----Things to use in the text built-in scripts----
# subset latitude without NAs
austroGBlat<-austroGB[complete.cases(austroGB$Latitude),]
# checking latitudinal extremes
northernLat<-(-1)*(max(picoroco$Latitude))
southernLat<-(-1)*(min(picoroco$Latitude))
# checking range of sequence lengths analyzed
minLength<-min(pico$sequenceLength,na.rm=T)
maxLength<-max(pico$sequenceLength,na.rm=T)
# some useful stuff to use in the text
FP <- austroGB[grep('PF',austroGB$Label),]
FPconc <-nrow(subset(FP,Species == 'Megabalanus concinnus'))
FPpsit <- nrow(subset(FP,Species == 'Austromegabalanus psittacus'))
IquMcon<-nrow(subset(austroGB,grepl("Aps_Iqu_",austroGB$Label)))
# I added a column "bothReads", if yes, means that we were able to assembly the foward and reverse reads, if no, means we only had one read.
contigYes<-austroGB[grep('yes',austroGB$bothReads),]
contigNo<-austroGB[grep('no',austroGB$bothReads),]
both<-(nrow(contigYes)*100)/nrow(austroGB)
one<-(nrow(contigNo)*100)/nrow(austroGB)
# Number of replicates used for subsequent permutational tests
reps=1000
northernLat
southernLat
nrow(picoroco)
nrow(pico)
taltal
nrow(pico)
count(pico)
aggregate(pico,summary)
aggregate(pico,list(Site),summary)
View(pico)
aggregate(pico,list(SiteName),summary)
aggregate(pico,list("SiteName"),summary)
table(pico$SiteName)
nrow(pico)
nrow(picoroco)
IquMcon<-nrow(subset(austroGB,SiteName=="Iquique" && Species == 'Austromegabalanus psittacus'))
IquMcon
IquMcon<-nrow(subset(austroGB,SiteName=="Iquique" & Species == 'Austromegabalanus psittacus'))
IquMcon
IquMcon<-nrow(subset(austroGB,SiteName=="Iquique" & Species == 'Megabalanus concinnus'))
IquMcon
setwd("~/GitHub/QuBar")
# load data with observed haplotypesin the samples
data<-read.csv("hapsegData.csv",header=T)
factor(data$sampleSize)->data$sampleSizeF
data<-data[with(data,order(Haplotypes)),]
databp<-data[with(data,order(Populations,sampleSizeF)),]
pop1<-databp[which(databp$Populations=='Pop1'),]
pop2<-databp[which(databp$Populations=='Pop2'),]
pop3<-databp[which(databp$Populations=='Pop3'),]
uni3<-unique(pop3$Haplotypes)
pop4<-databp[which(databp$Populations=='Pop4'),]
View(pop1)
View(pop3)
View(data)
# load data with observed haplotypesin the samples
data<-read.csv("hapsegData.csv",header=T)
factor(data$sampleSize)->data$sampleSize
databp<-data[with(data,order(Populations,sampleSize,Haplotypes)),]
# subsetting populations
pop1<-databp[which(databp$Populations=='Pop1'),]
pop2<-databp[which(databp$Populations=='Pop2'),]
pop3<-databp[which(databp$Populations=='Pop3'),]
pop4<-databp[which(databp$Populations=='Pop4'),]
View(databp)
data<-data[-"segSites"]
View(data)
data<-data[,-"segSites"]
data<-data[-,c("segSites")]
data<-data[-c("segSites")]
data$segSites<-NULL
str(data)
data$X<-NULL
str(data)
factor(data$sampleSize)->data$sampleSize
databp<-data[with(data,order(Populations,sampleSize,Haplotypes)),]
str(databp)
View(datapb)
View(databp)
row.names(databp)<-NULL
View(databp)
# load data with observed haplotypesin the samples
data<-read.csv("hapsegData.csv",header=T)
data$segSites<-NULL
data$X<-NULL
factor(data$sampleSize)->data$sampleSize
databp<-data[with(data,order(Populations,sampleSize,Haplotypes)),]
row.names(databp)<-NULL
# subsetting populations
pop1<-databp[which(databp$Populations=='Pop1'),]
pop2<-databp[which(databp$Populations=='Pop2'),]
pop3<-databp[which(databp$Populations=='Pop3'),]
pop4<-databp[which(databp$Populations=='Pop4'),]
# calculate all the different k haplotypes given different values of n
theta=10 #define theta
maxn=128 #define max n
# this loop fills a vector with the expected k for a given theta an differents n
meank<-rep(NA,maxn)
for(n in 2:maxn){
n-1->endpoint
res<-rep(NA,endpoint)
for (i in 1:endpoint){
theta/(theta+i)->res[i]
}
1+sum(res)->meank[n]
}
# this loop fills a vector with the variance of k for a given theta an differents n
vark<-rep(NA,maxn)
for(n in 2:maxn){
n-1->endpoint
res<-rep(NA,endpoint)
for (i in 1:endpoint){
(theta^2)/((theta+i)^2)->res[i]
}
meank[n]-sum(res)->vark[n]
}
# now we put together a dataframe with the n,k,and var(k), run it twice changing theta to make dataframe
meank->meank2; vark->vark2
meank->meank10; vark->vark10
dataSampling<-as.data.frame(cbind(c(1:maxn),meank2,vark2,meank10,vark10))
names(data)<-c("n","expHap.t2","varHap.t2","expHap.t10","varHap.t10")
# plot variance
with(data,plot(n,varHap.t10,col="red"))
with(data,points(n,varHap.t2,col="blue"))
legend("topleft", inset=.05, c("theta=2","theta=10"), fill=c("blue","red"), horiz=TRUE)
# save data file
# load data with observed haplotypesin the samples
data<-read.csv("hapsegData.csv",header=T)
data$segSites<-NULL
data$X<-NULL
factor(data$sampleSize)->data$sampleSize
databp<-data[with(data,order(Populations,sampleSize,Haplotypes)),]
row.names(databp)<-NULL
# subsetting populations
pop1<-databp[which(databp$Populations=='Pop1'),]
pop2<-databp[which(databp$Populations=='Pop2'),]
pop3<-databp[which(databp$Populations=='Pop3'),]
pop4<-databp[which(databp$Populations=='Pop4'),]
# calculate all the different k haplotypes given different values of n
theta=10 #define theta
maxn=128 #define max n
# this loop fills a vector with the expected k for a given theta an differents n
meank<-rep(NA,maxn)
for(n in 2:maxn){
n-1->endpoint
res<-rep(NA,endpoint)
for (i in 1:endpoint){
theta/(theta+i)->res[i]
}
1+sum(res)->meank[n]
}
# this loop fills a vector with the variance of k for a given theta an differents n
vark<-rep(NA,maxn)
for(n in 2:maxn){
n-1->endpoint
res<-rep(NA,endpoint)
for (i in 1:endpoint){
(theta^2)/((theta+i)^2)->res[i]
}
meank[n]-sum(res)->vark[n]
}
# now we put together a dataframe with the n,k,and var(k), run it twice changing theta to make dataframe
meank->meank2; vark->vark2
meank->meank10; vark->vark10
dataSampling<-as.data.frame(cbind(c(1:maxn),meank2,vark2,meank10,vark10))
names(dataSampling)<-c("n","expHap.t2","varHap.t2","expHap.t10","varHap.t10")
# plot variance
with(data,plot(n,varHap.t10,col="red"))
with(data,points(n,varHap.t2,col="blue"))
legend("topleft", inset=.05, c("theta=2","theta=10"), fill=c("blue","red"), horiz=TRUE)
with(dataSampling,plot(n,varHap.t10,col="red"))
with(dataSampling,points(n,varHap.t2,col="blue"))
legend("topleft", inset=.05, c("theta=2","theta=10"), fill=c("blue","red"), horiz=TRUE)
with(dataSampling,plot(n,varHap.t10,col="red"))
with(dataSampling,points(n,varHap.t2,col="blue"))
theta=10 #define theta
maxn=128 #define max n
# this loop fills a vector with the expected k for a given theta an differents n
meank<-rep(NA,maxn)
for(n in 2:maxn){
n-1->endpoint
res<-rep(NA,endpoint)
for (i in 1:endpoint){
theta/(theta+i)->res[i]
}
1+sum(res)->meank[n]
}
# this loop fills a vector with the variance of k for a given theta an differents n
vark<-rep(NA,maxn)
for(n in 2:maxn){
n-1->endpoint
res<-rep(NA,endpoint)
for (i in 1:endpoint){
(theta^2)/((theta+i)^2)->res[i]
}
meank[n]-sum(res)->vark[n]
}
# now we put togeth
meank->meank10; vark->vark10
theta=2 #define theta
maxn=128 #define max n
# this loop fills a vector with the expected k for a given theta an differents n
meank<-rep(NA,maxn)
for(n in 2:maxn){
n-1->endpoint
res<-rep(NA,endpoint)
for (i in 1:endpoint){
theta/(theta+i)->res[i]
}
1+sum(res)->meank[n]
}
# this loop fills a vector with the variance of k for a given theta an differents n
vark<-rep(NA,maxn)
for(n in 2:maxn){
n-1->endpoint
res<-rep(NA,endpoint)
for (i in 1:endpoint){
(theta^2)/((theta+i)^2)->res[i]
}
meank[n]-sum(res)->vark[n]
}
meank->meank2; vark->vark2
dataSampling<-as.data.frame(cbind(c(1:maxn),meank2,vark2,meank10,vark10))
names(dataSampling)<-c("n","expHap.t2","varHap.t2","expHap.t10","varHap.t10")
with(dataSampling,plot(n,varHap.t10,col="red"))
with(dataSampling,points(n,varHap.t2,col="blue"))
legend("topleft", inset=.05, c("theta=2","theta=10"), fill=c("blue","red"), horiz=TRUE)
View(dataSampling)
infoSession()
sessionInfo()
library(gap)
library(PopGenome)
sessionInfo()
readMS("theta2Growth.out")->popgen.t2g #gives a "genome" object
readMS("theta2NoGrowth.out")->popgen.t2ng
readMS("theta10Growth.out")->popgen.t10g
readMS("theta10NoGrowth.out")->popgen.t10ng
# run F_ST stats and check haplotype diversity
F_ST.stats(popgen.t2g)->popgen.t2g
F_ST.stats(popgen.t2ng)->popgen.t2ng
F_ST.stats(popgen.t10g)->popgen.t10g
F_ST.stats(popgen.t10ng)->popgen.t10ng
# get haplotype diversity for each source population
unlist(popgen.t2g@region.stats@haplotype.diversity)->hapDiv.t2g
unlist(popgen.t2ng@region.stats@haplotype.diversity)->hapDiv.t2ng
unlist(popgen.t10g@region.stats@haplotype.diversity)->hapDiv.t10g
unlist(popgen.t10ng@region.stats@haplotype.diversity)->hapDiv.t10ng
hapDiv<-c(hapDiv.t2g,hapDiv.t2ng,hapDiv.t10g,hapDiv.t10ng)
hapDiv
# run neutrality.stats to check that Tajima's D is negative and looks real
neutrality.stats(popgen.t2g)->popgen.t2g
neutrality.stats(popgen.t2ng)->popgen.t2ng
neutrality.stats(popgen.t10g)->popgen.t10g
neutrality.stats(popgen.t10ng)->popgen.t10ng
Taj.t2g<-popgen.t10g@Tajima.D
Taj.t2ng<-popgen.t10ng@Tajima.D
Taj.t10g<-popgen.t10g@Tajima.D
Taj.t10ng<-popgen.t10ng@Tajima.D
tajima<-c(Taj.t2g,Taj.t2ng,Taj.t10g,Taj.t10ng)
tajima
cbind(hapdiv,tajima)
cbind(hapDiv,tajima)
thetas<-c(2,2,10,10)
pops<-c("Population 1", "Population 2", "Population 3", "Population 4")
growth<-c("yes","no","yes","no")
sumTable<-cbind(pops,thetas,growth,hapDiv,tajima)
names(sumTable)<-c("Population","Theta","Growth","Haplotype diversity","Tajima's D")
View(sumTable)
class(sumTable)
colnames(sumTable)<-c("Population","Theta","Growth","Haplotype diversity","Tajima's D")
class(sumTable)
View(sumTable)
newhap<-round(hapDiv,2)
newtaj<-round(tajima,2)
sumTable<-cbind(pops,thetas,growth,hapDiv,tajima)
View(sumTable)
round(hapDiv,2)
newhap
thetas<-c(2,2,10,10)
pops<-c("Population 1", "Population 2", "Population 3", "Population 4")
growth<-c("yes","no","yes","no")
newhap<-round(hapDiv,2)
newtaj<-round(tajima,2)
sumTable<-cbind(pops,thetas,growth,newhap,newtaj)
colnames(sumTable)<-c("Population","Theta","Growth","Haplotype diversity","Tajima's D")
kable(sumTable)
library(knitr)
kable(sumTable)
help(sample)
x <- 1:12
# a random permutation
sample(x)
# bootstrap resampling -- only if length(x) > 1 !
sample(x, replace = TRUE)
read.ms.output("theta2Growth.out",is.file=T)->pop1
read.ms.output("theta2NoGrowth.out",is.file=T)->pop2
read.ms.output("theta10Growth.out",is.file=T)->pop3
read.ms.output("theta10NoGrowth.out",is.file=T)->pop4
# --------sampling from each population---------
# vector with all the populations for loops or easy coding
pop<-list(pop1,pop2,pop3,pop4)
popsizes<-seq(1:128)
populations<-list() #empty list to put results
set.seed(123) #set seed for random sampling
# loop in each population to take the field samples, 100 replicates for each sampling size
for(i in 1:length(pop)){
pop[[i]]->ourpop #pick a population
namepop<-paste("popOrigen",i,sep="")
t(ourpop$gametes[[1]])->mat #transpose matrix to have individuals as rows
samples<-list() #empty list to put the sampling of each sample size
for(j in popsizes){
name<-paste("sampleSize",j,sep="")
replicates<-list() #empty list to put each replicate (n=100)
for (k in 1:100){
namerep<-paste("replicate",k,sep="")
mat[sample(nrow(mat),size=j,replace=FALSE),]->rep
rep->replicates[[namerep]]
}
replicates->samples[[name]]
}
samples->populations[[namepop]]
}
hapResults<-list() #create list to save the results
for(i in 1:length(pop)){
populations[[i]]->popnow #choose population to work
namepop<-paste("popOrigen",i,sep="")
samples<-list() #create list to put each sampling size
for (j in 1:length(popsizes)){
namesample<-paste("sampleSize",j,sep="")
popnow[[j]]->samplenow #choose sampling size to work with
for (k in 1:100){
sapply(samplenow,function(x) nrow(unique(x)))->result
unlist(result)->replicates
}
replicates->samples[[namesample]]
}
samples->hapResults[[namepop]]
} # now hapResults is a list of vectors with the haplotypes number for each p
str(populations)
length(pop)
length(populations[[1]])
hapResults<-list() #create list to save the results
for(i in 1:5){
populations[[i]]->popnow #choose population to work
namepop<-paste("popOrigen",i,sep="")
samples<-list() #create list to put each sampling size
for (j in 1:length(popsizes)){
namesample<-paste("sampleSize",j,sep="")
popnow[[j]]->samplenow #choose sampling size to work with
print(paste("working in:",namepop,namesample))
for (k in 1:100){
sapply(samplenow,function(x) nrow(unique(x)))->result
unlist(result)->replicates
}
replicates->samples[[namesample]]
}
samples->hapResults[[namepop]]
} # n
