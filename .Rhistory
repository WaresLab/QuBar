array<-c(array,happrob)
array<-c(array,cdf)
array<-c(array,indprob)
#  print(happrob)
#  print(cdf)
x=x+1
}
probs<-t(matrix(array,nrow=3))
probs
title<-paste(c("n=",numsamp[i],sep=""))
# set plot space depending number of datasets, for each theta we have 7 plots
par(mfrow=c(2,4),oma=c(0,0,2,0)) #oma is to set space for the main tittle
plot(probs[,1],probs[,3],pch=19,col='red',main=title)
mtext("Pop1:Theta 2-growth",outer=T)
dev.copy(pdf, "Pop1_theta2_growth.pdf", width=14, height=8)
dev.off()
}
# Loop population 2
for(i in 1:length(numhapsPop2)){
x=1
cdf=0
indprob=0
array<-NULL
while (cdf<0.99) {
cdfprev<-cdf
#  cdf<-pgamma(x,1,Hapdiv)
#  if use 1 as shape parameter keeping shape parameter constant doesn't account for increased variance (?) as numhaps go up,
#  e.g. error may be higher as you observe more...once it is working run it by somebody mathier.
cdf<-pgamma(x,numhapsPop2[i],hapdiv[2]) #might be that numhaps is actually the shape parameter!!!! or: something else...non-gamma.
indprob<-cdf-cdfprev
happrob<-numhapsPop2[i]+(x-1)
array<-c(array,happrob)
array<-c(array,cdf)
array<-c(array,indprob)
#  print(happrob)
#  print(cdf)
x=x+1
}
probs<-t(matrix(array,nrow=3))
probs
title<-paste(c("n=",numsamp[i],sep=""))
# set plot space depending number of datasets, for each theta we have 7 plots
par(mfrow=c(2,4),oma=c(0,0,2,0)) #oma is to set space for the main tittle
plot(probs[,1],probs[,3],col='red',main=title)
mtext("Pop2:Theta 2-no growth",outer=T)
dev.copy(pdf, "Pop2_theta2_nogrowth.pdf", width=14, height=8)
dev.off()
}
# Loop population 3
for(i in 1:length(numhapsPop3)){
x=1
cdf=0
indprob=0
array<-NULL
while (cdf<0.99) {
cdfprev<-cdf
#  cdf<-pgamma(x,1,Hapdiv)
#  if use 1 as shape parameter keeping shape parameter constant doesn't account for increased variance (?) as numhaps go up,
#  e.g. error may be higher as you observe more...once it is working run it by somebody mathier.
cdf<-pgamma(x,numhapsPop3[i],hapdiv[3]) #might be that numhaps is actually the shape parameter!!!! or: something else...non-gamma.
indprob<-cdf-cdfprev
happrob<-numhapsPop3[i]+(x-1)
array<-c(array,happrob)
array<-c(array,cdf)
array<-c(array,indprob)
#  print(happrob)
#  print(cdf)
x=x+1
}
probs<-t(matrix(array,nrow=3))
probs
title<-paste(c("n=",numsamp[i],sep=""))
# set plot space depending number of datasets, for each theta we have 7 plots
par(mfrow=c(2,4),oma=c(0,0,2,0)) #oma is to set space for the main tittle
plot(probs[,1],probs[,3],col='red',main=title)
mtext("Pop3:Theta 10-growth",outer=T)
dev.copy(pdf, "Pop3_theta10_growth.pdf", width=14, height=8)
dev.off()
}
# Loop population 4
for(i in 1:length(numhapsPop4)){
x=1
cdf=0
indprob=0
array<-NULL
while (cdf<0.99) {
cdfprev<-cdf
#  cdf<-pgamma(x,1,Hapdiv)
#  if use 1 as shape parameter keeping shape parameter constant doesn't account for increased variance (?) as numhaps go up,
#  e.g. error may be higher as you observe more...once it is working run it by somebody mathier.
cdf<-pgamma(x,numhapsPop4[i],hapdiv[4]) #might be that numhaps is actually the shape parameter!!!! or: something else...non-gamma.
indprob<-cdf-cdfprev
happrob<-numhapsPop4[i]+(x-1)
array<-c(array,happrob)
array<-c(array,cdf)
array<-c(array,indprob)
#  print(happrob)
#  print(cdf)
x=x+1
}
probs<-t(matrix(array,nrow=3))
probs
title<-paste(c("n=",numsamp[i],sep=""))
# set plot space depending number of datasets, for each theta we have 7 plots
par(mfrow=c(2,4),oma=c(0,0,2,0)) #oma is to set space for the main tittle
plot(probs[,1],probs[,3],col='red',main=title)
mtext("Pop4:Theta 10-no growth",outer=T)
dev.copy(pdf, "Pop4_theta10_nogrowth.pdf", width=14, height=8)
dev.off()
}
par(mfrow=c(1,1))
par(mfrow=c(1,1))
# Loop population 1
for(i in 1:length(numhapsPop1)){
x=1
cdf=0
indprob=0
array<-NULL
while (cdf<0.99) {
cdfprev<-cdf
#  cdf<-pgamma(x,1,Hapdiv)
#  if use 1 as shape parameter keeping shape parameter constant doesn't account for increased variance (?) as numhaps go up,
#  e.g. error may be higher as you observe more...once it is working run it by somebody mathier.
cdf<-pgamma(x,numhapsPop1[i],hapdiv[1]) #might be that numhaps is actually the shape parameter!!!! or: something else...non-gamma.
indprob<-cdf-cdfprev
happrob<-numhapsPop1[i]+(x-1)
array<-c(array,happrob)
array<-c(array,cdf)
array<-c(array,indprob)
#  print(happrob)
#  print(cdf)
x=x+1
}
probs<-t(matrix(array,nrow=3))
probs
title<-paste(c("n=",numsamp[i],sep=""))
# set plot space depending number of datasets, for each theta we have 7 plots
par(mfrow=c(2,4),oma=c(0,0,2,0)) #oma is to set space for the main tittle
plot(probs[,1],probs[,3],pch=19,col='red',main=title)
mtext("Pop1:Theta 2-growth",outer=T)
dev.copy(pdf, "Pop1_theta2_growth.pdf", width=14, height=8)
dev.off()
}
# Loop population 2
for(i in 1:length(numhapsPop2)){
x=1
cdf=0
indprob=0
array<-NULL
while (cdf<0.99) {
cdfprev<-cdf
#  cdf<-pgamma(x,1,Hapdiv)
#  if use 1 as shape parameter keeping shape parameter constant doesn't account for increased variance (?) as numhaps go up,
#  e.g. error may be higher as you observe more...once it is working run it by somebody mathier.
cdf<-pgamma(x,numhapsPop2[i],hapdiv[2]) #might be that numhaps is actually the shape parameter!!!! or: something else...non-gamma.
indprob<-cdf-cdfprev
happrob<-numhapsPop2[i]+(x-1)
array<-c(array,happrob)
array<-c(array,cdf)
array<-c(array,indprob)
#  print(happrob)
#  print(cdf)
x=x+1
}
probs<-t(matrix(array,nrow=3))
probs
title<-paste(c("n=",numsamp[i],sep=""))
# set plot space depending number of datasets, for each theta we have 7 plots
par(mfrow=c(2,4),oma=c(0,0,2,0)) #oma is to set space for the main tittle
plot(probs[,1],probs[,3],col='red',pch=19,main=title)
mtext("Pop2:Theta 2-no growth",outer=T)
dev.copy(pdf, "Pop2_theta2_nogrowth.pdf", width=14, height=8)
dev.off()
}
# Loop population 3
for(i in 1:length(numhapsPop3)){
x=1
cdf=0
indprob=0
array<-NULL
while (cdf<0.99) {
cdfprev<-cdf
#  cdf<-pgamma(x,1,Hapdiv)
#  if use 1 as shape parameter keeping shape parameter constant doesn't account for increased variance (?) as numhaps go up,
#  e.g. error may be higher as you observe more...once it is working run it by somebody mathier.
cdf<-pgamma(x,numhapsPop3[i],hapdiv[3]) #might be that numhaps is actually the shape parameter!!!! or: something else...non-gamma.
indprob<-cdf-cdfprev
happrob<-numhapsPop3[i]+(x-1)
array<-c(array,happrob)
array<-c(array,cdf)
array<-c(array,indprob)
#  print(happrob)
#  print(cdf)
x=x+1
}
probs<-t(matrix(array,nrow=3))
probs
title<-paste(c("n=",numsamp[i],sep=""))
# set plot space depending number of datasets, for each theta we have 7 plots
par(mfrow=c(2,4),oma=c(0,0,2,0)) #oma is to set space for the main tittle
plot(probs[,1],probs[,3],col='red',pch=19,main=title)
mtext("Pop3:Theta 10-growth",outer=T)
dev.copy(pdf, "Pop3_theta10_growth.pdf", width=14, height=8)
dev.off()
}
# Loop population 4
for(i in 1:length(numhapsPop4)){
x=1
cdf=0
indprob=0
array<-NULL
while (cdf<0.99) {
cdfprev<-cdf
#  cdf<-pgamma(x,1,Hapdiv)
#  if use 1 as shape parameter keeping shape parameter constant doesn't account for increased variance (?) as numhaps go up,
#  e.g. error may be higher as you observe more...once it is working run it by somebody mathier.
cdf<-pgamma(x,numhapsPop4[i],hapdiv[4]) #might be that numhaps is actually the shape parameter!!!! or: something else...non-gamma.
indprob<-cdf-cdfprev
happrob<-numhapsPop4[i]+(x-1)
array<-c(array,happrob)
array<-c(array,cdf)
array<-c(array,indprob)
#  print(happrob)
#  print(cdf)
x=x+1
}
probs<-t(matrix(array,nrow=3))
probs
title<-paste(c("n=",numsamp[i],sep=""))
# set plot space depending number of datasets, for each theta we have 7 plots
par(mfrow=c(2,4),oma=c(0,0,2,0)) #oma is to set space for the main tittle
plot(probs[,1],probs[,3],col='red',pch=19,main=title)
mtext("Pop4:Theta 10-no growth",outer=T)
dev.copy(pdf, "Pop4_theta10_nogrowth.pdf", width=14, height=8)
dev.off()
}
par(mfrow=c(2,4),oma=c(0,0,2,0)) #oma is to set space for the main tittle
plot(probs[,1],probs[,3],col='red',pch=19,main=title)
par(mfrow=c(1,1))
plot(!)
plot(2)
# Loop population 1
for(i in 1:length(numhapsPop1)){
x=1
cdf=0
indprob=0
array<-NULL
while (cdf<0.99) {
cdfprev<-cdf
#  cdf<-pgamma(x,1,Hapdiv)
#  if use 1 as shape parameter keeping shape parameter constant doesn't account for increased variance (?) as numhaps go up,
#  e.g. error may be higher as you observe more...once it is working run it by somebody mathier.
cdf<-pgamma(x,numhapsPop1[i],hapdiv[1]) #might be that numhaps is actually the shape parameter!!!! or: something else...non-gamma.
indprob<-cdf-cdfprev
happrob<-numhapsPop1[i]+(x-1)
array<-c(array,happrob)
array<-c(array,cdf)
array<-c(array,indprob)
#  print(happrob)
#  print(cdf)
x=x+1
}
probs<-t(matrix(array,nrow=3))
probs
title<-paste(c("n=",numsamp[i],sep=""))
# set plot space depending number of datasets, for each theta we have 7 plots
par(mfrow=c(2,4),oma=c(0,0,2,0)) #oma is to set space for the main tittle
plot(probs[,1],probs[,3],pch=19,col='red',main=title)
mtext("Pop1:Theta 2-growth",outer=T)
dev.copy(pdf, "Pop1_theta2_growth.pdf", width=14, height=8)
dev.off()
}
par(mfrow=c(2,4),oma=c(0,0,2,0)) #oma is to set space for the main tittle
plot(probs[,1],probs[,3],col='red',pch=19,main=title)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
a<-c(2,3,4,5,6,7)
summary(a)
max(a)
maxPred<-probs[which(probs[,3]==max(probs[,3]),probs[,1]]
maxPred<-probs[which(probs[,3]==max(probs[,3])),probs[,1]]
max<-max(probs[,3])
max
maxPred<-probs[which(probs[,3]==max),probs[,1]]
class(probs)
maxPred<-probs[which(probs[,3]==max),1]
maxPred
probs
# Loop population 1
for(i in 1:length(numhapsPop1)){
x=1
cdf=0
indprob=0
array<-NULL
while (cdf<0.99) {
cdfprev<-cdf
#  cdf<-pgamma(x,1,Hapdiv)
#  if use 1 as shape parameter keeping shape parameter constant doesn't account for increased variance (?) as numhaps go up,
#  e.g. error may be higher as you observe more...once it is working run it by somebody mathier.
cdf<-pgamma(x,numhapsPop1[i],hapdiv[1]) #might be that numhaps is actually the shape parameter!!!! or: something else...non-gamma.
indprob<-cdf-cdfprev
happrob<-numhapsPop1[i]+(x-1)
array<-c(array,happrob)
array<-c(array,cdf)
array<-c(array,indprob)
#  print(happrob)
#  print(cdf)
x=x+1
}
probs<-t(matrix(array,nrow=3))
probs
title<-paste(c("n=",numsamp[i],sep=""))
max<-max(probs[,3])
maxPred<-probs[which(probs[,3]==max),1]
plot(probs[,1],probs[,3],pch=19,col='red',main=title)
mtext("Pop1:Theta 2-growth",outer=T)
dev.copy(pdf, "Pop1_theta2_growth.pdf", width=14, height=8)
dev.off()
}
max
maxPred
as.data.frame()->toFill
c("Population","theta","growth","Pred.n","Obs.n")->toFillout
as.data.frame(toFillout)->toFill
toFill
as.data.frame(col1,col2,col3)
cbind(rep(Pop1,7),rep(Pop2,7),rep(Pop3,7),rep(Pop4,7))->col1
cbind(rep(two,14),rep(ten,14))->col2
cbind(rep(growth,7),rep(nogrowth,7),rep(growth,7),rep(nogrowth,7))->col3
cbind(rep("Pop1",7),rep("Pop2",7),rep("Pop3",7),rep("Pop4",7))->col1
cbind(rep("two",14),rep("ten",14))->col2
cbind(rep("growth",7),rep("nogrowth",7),rep("growth",7),rep("nogrowth",7))->col3
as.data.frame(col1,col2,col3)
col1
c(rep("Pop1",7),rep("Pop2",7),rep("Pop3",7),rep("Pop4",7))->col1
c(rep("two",14),rep("ten",14))->col2
c(rep("growth",7),rep("nogrowth",7),rep("growth",7),rep("nogrowth",7))->col3
cbind(col1,col2,col3)->mycols
mycols
as.data.frame(mycols)->toFill
colnames(toFill)<-names
names(toFill)<-names
names
c("Population","theta","growth","Pred.n","Obs.n")->namesCols
as.data.frame(mycols)->toFill
names(toFill)<-names
e
names(toFill)<-namesCols
c(rep("Pop1",7),rep("Pop2",7),rep("Pop3",7),rep("Pop4",7))->col1
c(rep("two",14),rep("ten",14))->col2
c(rep("growth",7),rep("nogrowth",7),rep("growth",7),rep("nogrowth",7))->col3
cbind(col1,col2,col3)->mycols
c("Population","theta","growth")->namesCols
as.data.frame(mycols)->toFill
names(toFill)<-namesCols
toFill
# Loop population 1
for(i in 1:length(numhapsPop1)){
x=1
cdf=0
indprob=0
array<-NULL
while (cdf<0.99) {
cdfprev<-cdf
#  cdf<-pgamma(x,1,Hapdiv)
#  if use 1 as shape parameter keeping shape parameter constant doesn't account for increased variance (?) as numhaps go up,
#  e.g. error may be higher as you observe more...once it is working run it by somebody mathier.
cdf<-pgamma(x,numhapsPop1[i],hapdiv[1]) #might be that numhaps is actually the shape parameter!!!! or: something else...non-gamma.
indprob<-cdf-cdfprev
happrob<-numhapsPop1[i]+(x-1)
array<-c(array,happrob)
array<-c(array,cdf)
array<-c(array,indprob)
#  print(happrob)
#  print(cdf)
x=x+1
}
probs<-t(matrix(array,nrow=3))
probs
title<-paste(c("n=",numsamp[i],sep=""))
max<-max(probs[,3])
maxPred<-probs[which(probs[,3]==max),1]
toFill[i]$Pred.value<-maxPred
toFill[i]$Obs.n<-numsamp[i]
plot(probs[,1],probs[,3],pch=19,col='red',main=title)
mtext("Pop1:Theta 2-growth",outer=T)
dev.copy(pdf, "Pop1_theta2_growth.pdf", width=14, height=8)
dev.off()
}
# Loop population 1
for(i in 1:length(numhapsPop1)){
x=1
cdf=0
indprob=0
array<-NULL
while (cdf<0.99) {
cdfprev<-cdf
#  cdf<-pgamma(x,1,Hapdiv)
#  if use 1 as shape parameter keeping shape parameter constant doesn't account for increased variance (?) as numhaps go up,
#  e.g. error may be higher as you observe more...once it is working run it by somebody mathier.
cdf<-pgamma(x,numhapsPop1[i],hapdiv[1]) #might be that numhaps is actually the shape parameter!!!! or: something else...non-gamma.
indprob<-cdf-cdfprev
happrob<-numhapsPop1[i]+(x-1)
array<-c(array,happrob)
array<-c(array,cdf)
array<-c(array,indprob)
#  print(happrob)
#  print(cdf)
x=x+1
}
probs<-t(matrix(array,nrow=3))
probs
title<-paste(c("n=",numsamp[i],sep=""))
max<-max(probs[,3])
maxPred<-probs[which(probs[,3]==max),1]
toFill$Pred.value[i]<-maxPred
toFill$Obs.n[i]<-numsamp[i]
plot(probs[,1],probs[,3],pch=19,col='red',main=title)
mtext("Pop1:Theta 2-growth",outer=T)
dev.copy(pdf, "Pop1_theta2_growth.pdf", width=14, height=8)
dev.off()
}
head(toFill)
# Loop population 2
par(mfrow=c(2,4),oma=c(0,0,2,0))
for(i in 1:length(numhapsPop2)){
x=1
cdf=0
indprob=0
array<-NULL
while (cdf<0.99) {
cdfprev<-cdf
#  cdf<-pgamma(x,1,Hapdiv)
#  if use 1 as shape parameter keeping shape parameter constant doesn't account for increased variance (?) as numhaps go up,
#  e.g. error may be higher as you observe more...once it is working run it by somebody mathier.
cdf<-pgamma(x,numhapsPop2[i],hapdiv[2]) #might be that numhaps is actually the shape parameter!!!! or: something else...non-gamma.
indprob<-cdf-cdfprev
happrob<-numhapsPop2[i]+(x-1)
array<-c(array,happrob)
array<-c(array,cdf)
array<-c(array,indprob)
#  print(happrob)
#  print(cdf)
x=x+1
}
probs<-t(matrix(array,nrow=3))
probs
title<-paste(c("n=",numsamp[i],sep=""))
max<-max(probs[,3])
maxPred<-probs[which(probs[,3]==max),1]
toFill$Pred.value[i+7]<-maxPred
toFill$Obs.n[i+7]<-numsamp[i+7]
plot(probs[,1],probs[,3],col='red',pch=19,main=title)
mtext("Pop2:Theta 2-no growth",outer=T)
dev.copy(pdf, "Pop2_theta2_nogrowth.pdf", width=14, height=8)
dev.off()
}
View(toFill)
# Loop population 3
par(mfrow=c(2,4),oma=c(0,0,2,0))
for(i in 1:length(numhapsPop3)){
x=1
cdf=0
indprob=0
array<-NULL
while (cdf<0.99) {
cdfprev<-cdf
#  cdf<-pgamma(x,1,Hapdiv)
#  if use 1 as shape parameter keeping shape parameter constant doesn't account for increased variance (?) as numhaps go up,
#  e.g. error may be higher as you observe more...once it is working run it by somebody mathier.
cdf<-pgamma(x,numhapsPop3[i],hapdiv[3]) #might be that numhaps is actually the shape parameter!!!! or: something else...non-gamma.
indprob<-cdf-cdfprev
happrob<-numhapsPop3[i]+(x-1)
array<-c(array,happrob)
array<-c(array,cdf)
array<-c(array,indprob)
#  print(happrob)
#  print(cdf)
x=x+1
}
probs<-t(matrix(array,nrow=3))
probs
title<-paste(c("n=",numsamp[i],sep=""))
max<-max(probs[,3])
maxPred<-probs[which(probs[,3]==max),1]
toFill$Pred.value[i+14]<-maxPred
toFill$Obs.n[i+14]<-numsamp[i]
plot(probs[,1],probs[,3],col='red',pch=19,main=title)
mtext("Pop3:Theta 10-growth",outer=T)
dev.copy(pdf, "Pop3_theta10_growth.pdf", width=14, height=8)
dev.off()
}
View(toFill)
source('~/.active-rstudio-document')
View(toFill)
library(lattice)
xyplot(Pred.value~Obs.n|theta*growth,data=toFill)
plot(1)
abline(x=y)
abline(Pred.value=Obs.n,data=toFill)
xyplot(Pred.value~Obs.n|theta*growth,data=toFill,panel=function(x,y,...){
xyplot(Pred.value~Obs.n|theta*growth,data=toFill,panel=function(x,y,...){ panel.xyplot(x,y,...)
xyplot(Pred.value~Obs.n|theta*growth,panel=function(x,y,...){
panel.xyplot(x,y,...)
panel.lines(x,y)})
xyplot(Pred.value~Obs.n|theta*growth,data=toFill,panel=function(x,y,...){
panel.xyplot(x,y,...)
panel.lines(x,y)})
xyplot(Pred.value~Obs.n|theta*growth,data=toFill,panel=function(x,y,...){
panel.xyplot(x,y,...)
panel.lines(x,x)})
