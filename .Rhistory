}
return(result)
}
MySpecList$AccTaxID<-SynResolv(MySpecList$OrigTaxID)
MySpecList
#---------------------------------------------------------------------
# Add full record information (classification, ranking, authority,...)
#---------------------------------------------------------------------
getFullRecord <- function(x) {
result<-NULL
for (i in 1:length(x)) {
AphiaRecord <- iface@functions$getAphiaRecordByID(x[i],('http://www.marinespecies.org/aphia.php?p=soap'))
slotnames <- slotNames(AphiaRecord)
slotlist <- data.frame(rbind(1:length(slotnames)))
names(slotlist) <- slotnames
for(y in slotnames) {
#R cannot handle a slot name "class"
if (y == "CLASS") {slotlist[1,y] <- '(empty)'}
else {slotlist[1, y] <- slot(AphiaRecord,  y)}
}
result<-rbind(result, slotlist)
}
return(result)
}
AphiaRecords<-getFullRecord(MySpecList$AccTaxID)
MySpecList<-cbind(MySpecList, AphiaRecords)
MySpecList
-------------------------------------------
source('C:/Users/Paula/Dropbox/toPaula/BodySize RangeSize/script_to use WORMS in R.R')
# Install and load library, process WSDL and prepare R SOAP functions
#-------------------------------------------
#install.packages("SSOAP", repos = "http://www.omegahat.org/R", dependencies = TRUE)
library(SSOAP)
w = processWSDL("http://www.marinespecies.org/aphia.php?p=soap&wsdl=1")
iface = genSOAPClientInterface(, w)
#-------------------------------------------
# Look up AphiaID
#-------------------------------------------
AphiaID = iface@functions$getAphiaID("Solea solea",1,('http://www.marinespecies.org/aphia.php?p=soap'))
print(AphiaID) #should output '[0] 127160'
#-------------------------------------------
# Create your specieslist
#-------------------------------------------
MySpecies<-c("solea solea", "lanice conchilega", "abra alba", "Polydora audax")
MySpecies<-data.frame(MySpecies)
MySpecList<-data.frame(unique(MySpecies))
#-------------------------------------------
# Get original AphiaID's for specieslist
#-------------------------------------------
AphiaMatch <- function(x) {
result<-NULL
for (i in 1:length(x)) {
AphiaRecord <- iface@functions$getAphiaID(x[i],1,('http://www.marinespecies.org/aphia.php?p=soap'))
result<-c(result, AphiaRecord)
}
return(result)
}
MySpecList$OrigTaxID<-AphiaMatch(MySpecList$MySpecies)
MySpecList
#-------------------------------------------
# Get accepted synonym AphiaID's for specieslist
#-------------------------------------------
SynResolv <- function(x) {
result<-NULL
for (i in 1:length(x)) {
AphiaRecord <- iface@functions$getAphiaRecordByID(x[i],('http://www.marinespecies.org/aphia.php?p=soap'))
result<-c(result, slot(AphiaRecord, "valid_AphiaID"))
}
return(result)
}
MySpecList$AccTaxID<-SynResolv(MySpecList$OrigTaxID)
MySpecList
#---------------------------------------------------------------------
# Add full record information (classification, ranking, authority,...)
#---------------------------------------------------------------------
getFullRecord <- function(x) {
result<-NULL
for (i in 1:length(x)) {
AphiaRecord <- iface@functions$getAphiaRecordByID(x[i],('http://www.marinespecies.org/aphia.php?p=soap'))
slotnames <- slotNames(AphiaRecord)
slotlist <- data.frame(rbind(1:length(slotnames)))
names(slotlist) <- slotnames
for(y in slotnames) {
#R cannot handle a slot name "class"
if (y == "CLASS") {slotlist[1,y] <- '(empty)'}
else {slotlist[1, y] <- slot(AphiaRecord,  y)}
}
result<-rbind(result, slotlist)
}
return(result)
}
AphiaRecords<-getFullRecord(MySpecList$AccTaxID)
MySpecList<-cbind(MySpecList, AphiaRecords)
MySpecList
str(MySpecList)
install.packages("seqinr", dependencies = TRUE)
l ibrary ( s e q i n r )
library(seqinr)
choosebanck('genbank')
choosebank('genbank')
biv<-c("modiolus modiolus","acmaea testudinaria","anomalocardia brasileana")
search<-tryCatch(query("bb", paste("sp=", biv[1],"et k=COI",sep="")))
help(getsequence)
help(getSequence)
source('C:/Users/Paula/Dropbox/toPaula/newR/find_species_range_Paula.r')
```{r}
summary(cars)
```
You can also embed plots, for example:
```{r fig.width=7, fig.height=6}
plot(cars)
```
install.packages("knitr")
install.packages("pandoc")
install.packages("e1071")
library(rmarkdown)
install.packages("rmarkdown")
devtools::install_github("rstudio/rmarkdown")
install.packages("rmarkdown")
install.packages("treebase")
library(devtools)
install_github("treebase", "ropensci")
library(devtools)
install_github("treebase", "ropensci")
library(devtools)
install_github("ape", "ropensci")
install.packages("taxize")
install_github("rfishbase", "ropensci")
install.packages("rfishbase")
install.packages("C:/Users/Paula/Desktop/rfishbase_0.2-2.tar.gz", repos = NULL, type = "source")
library(fishbase)
library(rfishbase)
install.packages("C:/Users/Paula/Desktop/taxize_0.3.0.tar.gz", repos = NULL, type = "source")
install.packages("rdryad")
install.packages("C:/Users/Paula/Desktop/rdryad_0.1.1.tar.gz", repos = NULL, type = "source")
install.packages("treebase")
install.packages("rfishbase")
install.packages("taxize")
download.packages("treebase", destdir="/Users/Paula", type="source") # replace destdir param with any path on your computer
install.packages("/Users/Paula/treebase_0.0-7.1.tar.gz", repos=NULL, type="source")
download.packages("treebase", destdir="C:/Users/Paula/Desktop/", type="source") # replace destdir param with any path on your computer
install.packages("C:/Users/Paula/Desktop/treebase_0.0-7.1.tar.gz", repos=NULL, type="source")
download.packages("treebase", destdir="C:/Users/Paula/Desktop", type="source") # replace destdir param with any path on your computer
install.packages("C:/Users/Paula/Desktop/treebase_0.0-7.1.tar.gz", repos=NULL, type="source")
download.packages("treebase", destdir="c:/Users/Paula/desktop", type="source") # replace destdir param with any path on your computer
install.packages("c:/Users/Paula/desktop/treebase_0.0-7.1.tar.gz", repos=NULL, type="source")
download.packages("treebase", destdir="c:/Users/Paula/desktop", type="source")
install.packages("c:/Users/Paula/desktop/treebase_0.0-7.1.tar.gz", repos=NULL, type="source")
download.packages("treebase", destdir="C:/Users/Paula/desktop", type="source")
install.packages("C:/Users/Paula/desktop/treebase_0.0-7.1.tar.gz", repos=NULL, type="source")
install.packages("c:/Users/Paula/desktop/treebase_0.0-7.1.tar.gz", repos=NULL, type="source")
install.packages("c:/Users/Paula/desktop/treebase_0.0-7.1.tar", repos=NULL, type="source")
install.packages("c:/Users/Paula/desktop/treebase_0.0-7.1.tar.gz", repos=NULL, type="source")
install.packages("C:/Users/Paula/Desktop/treebase_0.0-7.1.tar.gz", repos = NULL, type = "source")
install.packages("C:/Users/Paula/Desktop/treebase_0.0-7.1.tar.gz", repos = NULL, type = "source")
install.packages("C:/Users/Paula/Desktop/rdryad_0.1.1.tar.gz", repos = NULL, type = "source")
install.packages("survnnet")
ta<-cbind(c(1,2),c("Male","Female"),c("Blue","Pink"))
names(ta)<-c("A","B","C")
ta
colnames(ta)<-c("A","B","C")
ta
ta<-cbind(c(1,2),c("Male","Female"),c("Blue","Pink"))
colnames(ta)<-c("A","B","C")
kable(ta)
library(knitr)
kable(ta)
plot(1)
load("C:/Users/Paula/Dropbox/Picoroco MS/Picoroco_Paula.Rmd")
plot(1,2)
plot(1,2,main="prueba",xlab="para ver resolucion")
library(pegas)
> data(woodmouse)
> x <- woodmouse[sample(15, size = 110, replace = TRUE), ]
> h <- haplotype(x)
> net <- haploNet(h)
> plot(net, size=attr(net, "freq"), scale.ratio = 2, cex = 0.8)
data(woodmouse)
x <- woodmouse[sample(15, size = 110, replace = TRUE), ]
h <- haplotype(x)
net <- haploNet(h)
plot(net, size=attr(net, "freq"), scale.ratio = 2, cex = 0.8)
help(summary.loci)
require(adegenet)
data(nancycats)
x <- as.loci(nancycats)
s <- summary(x)
plot(s, layout=20, las=2)
View(nancycats)
vignette('reading files')
vignette('ReadingFiles')
help(plot.haploNet)
data(woodmouse)
x <- woodmouse[sample(15, size = 110, replace = TRUE), ]
h <- haplotype(x)
net <- haploNet(h)
plot(net, size=attr(net, "freq"), scale.ratio = 2, cex = 0.8)
data(woodmouse)
x <- woodmouse[sample(15, size = 110, replace = TRUE), ]
h <- haplotype(x)
net <- haploNet(h)
plot(net, size=attr(net, "freq"), scale.ratio = 2, cex = 0.8)
data(woodmouse)
x <- woodmouse[sample(15, size = 110, replace = TRUE), ]
h <- haplotype(x)
net <- haploNet(h)
plot(net, size=attr(net, "freq"), scale.ratio = 2, cex = 0.8)
plot(!)
plot(1)
library(ggmap)
geocode("Eastern and Midwestern Regions of Canada")
geocode("Eastern and Midwestern Canada")
geocode("Eastern Canada")
geocode("Lebanon, New Hampshire")
geocode("St. Johnsbury, Vermont")
geocode("Salem, New York")
geocode("The Marine Mammal Center")
geocode("yeale, africa")
geocode("yeale, ivory coast")
geocode("northern and central Japan")
geocode("Japan")
geocode("University of Kentucky")
geocode("Tsavo National Park")
geocode("Nairobi National Park")
geocode("solio ranch")
geocode("Fakahatchee Strand,florida")
geocode("Tussen-die-Riviere Game Farm, Orange Free State")
geocode("Tussen-die-Riviere Game Farm")
geocode("Orange Free State")
geocode("Maple, Ontario")
geocode("Maple district, Ontario")
geocode("Sapulot, Sabah")
geocode("Sapulot, Sabah, Malasya")
geocode("Sapulot, Sabah, Malaysia")
geocode("chaco, argentina")
geocode("Corvallis, Oregon")
geocode("Svanoy, western Norway")
geocode("Svanoy, Norway")
geocode("Bremerhaven, Germany")
geocode("Engerdal Municipality, Norway")
geocode("Birganj Forest District")
geocode("Darjeeling")
geocode("Karnataka")
geocode("Shikari Bas, Asia")
geocode("Parsa, Asia")
geocode("Parsa, Shikari Bas, Asia")
geocode("tenasserim, Asia")
geocode("tenasserim")
geocode("kalimatan")
geocode("japan")
geocode("Hluhluwe–iMfolozi Park")
geocode("Hluhluwe–iMfolozi")
geocode("Mtethomusha")
geocode("thomas baine")
geocode("Thomas Baines Nature Reserve")
sessionInfo()
sessionInfo()
setwd("~/GitHub/QuBar")
library(phyclust)
# simulating trees----
set.seed(123); tree1<-ms(nsam=200, nreps=1, opts= "-T -t 1")
simtree1<-read.tree(text=tree1[3])
set.seed(123); tree2<-ms(nsam=200, nreps=1, opts= "-T -t 2")
simtree2<-read.tree(text=tree2[3])
set.seed(123); tree3<-ms(nsam=200, nreps=1, opts= "-T -t 3")
simtree3<-read.tree(text=tree3[3])
set.seed(123); tree4<-ms(nsam=200, nreps=1, opts= "-T -t 4")
simtree4<-read.tree(text=tree4[3])
set.seed(123); tree5<-ms(nsam=200, nreps=1, opts= "-T -t 5")
simtree5<-read.tree(text=tree5[3])
set.seed(123); tree6<-ms(nsam=200, nreps=1, opts= "-T -t 6")
simtree6<-read.tree(text=tree6[3])
set.seed(123); tree7<-ms(nsam=200, nreps=1, opts= "-T -t 7")
simtree7<-read.tree(text=tree7[3])
set.seed(123); tree8<-ms(nsam=200, nreps=1, opts= "-T -t 8")
simtree8<-read.tree(text=tree8[3])
set.seed(123); tree9<-ms(nsam=200, nreps=1, opts= "-T -t 9")
simtree9<-read.tree(text=tree9[3])
set.seed(123); tree10<-ms(nsam=200, nreps=1, opts= "-T -t 10")
simtree10<-read.tree(text=tree10[3])
# generating sequences from those trees----
set.seed(123); seqs1<-seqgen(opts= "-mHKY -l600 -q", rooted.tree=simtree1)
seqs.easy1<-read.seqgen(seqs1)
set.seed(123); seqs2<-seqgen(opts= "-mHKY -l600 -q", rooted.tree=simtree2)
seqs.easy2<-read.seqgen(seqs2)
set.seed(123); seqs3<-seqgen(opts= "-mHKY -l600 -q", rooted.tree=simtree3)
seqs.easy3<-read.seqgen(seqs3)
set.seed(123); seqs4<-seqgen(opts= "-mHKY -l600 -q", rooted.tree=simtree4)
seqs.easy4<-read.seqgen(seqs4)
set.seed(123); seqs5<-seqgen(opts= "-mHKY -l600 -q", rooted.tree=simtree5)
seqs.easy5<-read.seqgen(seqs5)
set.seed(123); seqs6<-seqgen(opts= "-mHKY -l600 -q", rooted.tree=simtree6)
seqs.easy6<-read.seqgen(seqs6)
set.seed(123); seqs7<-seqgen(opts= "-mHKY -l600 -q", rooted.tree=simtree7)
seqs.easy7<-read.seqgen(seqs7)
set.seed(123); seqs8<-seqgen(opts= "-mHKY -l600 -q", rooted.tree=simtree8)
seqs.easy8<-read.seqgen(seqs8)
set.seed(123); seqs9<-seqgen(opts= "-mHKY -l600 -q", rooted.tree=simtree9)
seqs.easy9<-read.seqgen(seqs9)
set.seed(123); seqs10<-seqgen(opts= "-mHKY -l600 -q", rooted.tree=simtree10)
seqs.easy10<-read.seqgen(seqs10)
# writing sequences to FASTA files----
write.fasta(seqs.easy1$org,"simPopTheta1.fas")
write.fasta(seqs.easy2$org,"simPopTheta2.fas")
write.fasta(seqs.easy3$org,"simPopTheta3.fas")
write.fasta(seqs.easy4$org,"simPopTheta4.fas")
write.fasta(seqs.easy5$org,"simPopTheta5.fas")
write.fasta(seqs.easy6$org,"simPopTheta6.fas")
write.fasta(seqs.easy7$org,"simPopTheta7.fas")
write.fasta(seqs.easy8$org,"simPopTheta8.fas")
write.fasta(seqs.easy9$org,"simPopTheta9.fas")
write.fasta(seqs.easy10$org,"simPopTheta10.fas")
library(PopGenome)
ourpath<-getwd()
gitpath<-paste(ourpath,"/SimSeqs",sep="")
# converting FASTA file to GENOME object
simSeq<-readData(gitpath,include.unknown=T)
simSeq@n.sites # gives the number of sites in the alignment
get.sum.data(simSeq) # gives the summary information of the alignment, with the @ you can get all of those summaries, for example:
Varsites<-simSeq@n.biallelic.sites #number of biallelic sites (SNPs)
Varsites
par(mfrow = c(2, 2))
plot(simtree1)
plot(simtree2)
plot(simtree3)
plot(simtree4)
set.seed(123); tree1<-ms(nsam=20, nreps=1, opts= "-T -t 1")
simtree1<-read.tree(text=tree1[3])
set.seed(123); tree2<-ms(nsam=20, nreps=1, opts= "-T -t 2")
simtree2<-read.tree(text=tree2[3])
set.seed(123); tree3<-ms(nsam=20, nreps=1, opts= "-T -t 3")
simtree3<-read.tree(text=tree3[3])
set.seed(123); tree4<-ms(nsam=20, nreps=1, opts= "-T -t 4")
simtree4<-read.tree(text=tree4[3])
plot(simtree1)
plot(simtree2)
plot(simtree3)
plot(simtree4)
set.seed(123); tree1<-ms(nsam=20, nreps=1, opts= "-T -t1")
simtree1<-read.tree(text=tree1[3])
set.seed(123); tree1<-ms(nsam=20, opts= "-T -t 1")
tree1
set.seed(123); tree10<-ms(nsam=20, opts= "-T -t 10")
tree10
plot(tree1)
simtree1<-read.tree(text=tree1[3])
simtree10<-read.tree(text=tree10[3])
plot(tree1)
plot(simtree1)
plot(simtree10)
set.seed(123)
tree1<-ms(nsam=20, nreps=1, opts= "-T -t 1")
simtree1<-read.tree(text=tree1[3])
tree2<-ms(nsam=20, nreps=1, opts= "-T -t 10")
simtree2<-read.tree(text=tree2[3])
par(mfrow = c(1, 2))
plot(simtree1,main="Theta 1")
plot(simtree2,main="Theta 10")
set.seed(123)
tree1<-ms(nsam=20, nreps=1, opts= "-T -t 1")
simtree1<-read.tree(text=tree1[3])
set.seed(123)
tree2<-ms(nsam=20, nreps=1, opts= "-T -t 10")
simtree2<-read.tree(text=tree2[3])
par(mfrow = c(1, 2))
plot(simtree1,main="Theta 1")
plot(simtree2,main="Theta 10")
tree1
tree10
set.seed(123)
seqs1<-seqgen(opts= "-mHKY -l600 -q", rooted.tree=simtree1)
seqs.easy1<-read.seqgen(seqs1)
write.fasta(seqs.easy1$org,"testTheta1.fas")
seqs2<-seqgen(opts= "-mHKY -l600 -q", rooted.tree=simtree2)
seqs.easy2<-read.seqgen(seqs2)
write.fasta(seqs.easy2$org,"testTheta2.fas")
set.seed(123)
seqs1<-seqgen(opts= "-mHKY -l600 -q", rooted.tree=simtree1)
seqs.easy1<-read.seqgen(seqs1)
write.fasta(seqs.easy1$org,"testTheta1b.fas")
set.seed(123)
seqs2<-seqgen(opts= "-mHKY -l600 -q", rooted.tree=simtree2)
seqs.easy2<-read.seqgen(seqs2)
write.fasta(seqs.easy2$org,"testTheta2b.fas")
library(PopGenome)
ourpath<-getwd()
gitpath<-paste(ourpath,"/SimSeqs",sep="")
# converting FASTA file to GENOME object
simSeq<-readData(gitpath,include.unknown=T)
simSeq@n.sites # gives the number of sites in the alignment
get.sum.data(simSeq) # gives the summary information of the alignment, with the @ you can get all of those summaries, for example:
Varsites<-simSeq@n.biallelic.sites #number of biallelic sites (SNPs)
Varsites
set.seed(123)
tree1<-ms(nsam=20, nreps=1, opts= "-T -t 1")
simtree1<-read.tree(text=tree1[3])
set.seed(123)
tree2<-ms(nsam=20, nreps=1, opts= "-T -t 10")
simtree2<-read.tree(text=tree2[3])
par(mfrow = c(1, 2))
plot(simtree1,main="Theta 1")
plot(simtree2,main="Theta 10")
set.seed(123)
seqs1<-seqgen(opts= "-mHKY -l600 -q", rooted.tree=simtree1)
seqs.easy1<-read.seqgen(seqs1)
write.fasta(seqs.easy1$org,"testTheta1.fas")
set.seed(123)
seqs2<-seqgen(opts= "-mHKY -l600 -q", rooted.tree=simtree2)
seqs.easy2<-read.seqgen(seqs2)
write.fasta(seqs.easy2$org,"testTheta2.fas")
ourpath<-getwd()
gitpath<-paste(ourpath,"/SimSeqs",sep="")
# converting FASTA file to GENOME object
simSeq<-readData(gitpath,include.unknown=T)
simSeq@n.sites # gives the number of sites in the alignment
get.sum.data(simSeq) # gives the summary information of the alignment, with the @ you can get all of those summaries, for example:
Varsites<-simSeq@n.biallelic.sites #number of biallelic sites (SNPs)
Varsites
seqs1<-seqgen(opts= "-mHKY -l600 -q -d1", rooted.tree=simtree1)
set.seed(123)
seqs1<-seqgen(opts= "-mHKY -l600 -q -d1", rooted.tree=simtree1)
seqs.easy1<-read.seqgen(seqs1)
write.fasta(seqs.easy1$org,"testTheta1.fas")
set.seed(123)
seqs2<-seqgen(opts= "-mHKY -l600 -q -d10", rooted.tree=simtree2)
seqs.easy2<-read.seqgen(seqs2)
write.fasta(seqs.easy2$org,"testTheta2.fas")
ourpath<-getwd()
gitpath<-paste(ourpath,"/SimSeqs",sep="")
# converting FASTA file to GENOME object
simSeq<-readData(gitpath,include.unknown=T)
simSeq@n.sites # gives the number of sites in the alignment
get.sum.data(simSeq) # gives the summary information of the alignment, with the @ you can get all of those summaries, for example:
Varsites<-simSeq@n.biallelic.sites #number of biallelic sites (SNPs)
Varsites
diversity.stats(simSeq,pi=TRUE)->divResults
Piout<-divResults@Pi
Totsites<-divResults@n.sites
Piout2<-Piout/Totsites
Piout2
Piout
seqs3<-seqgen(opts= "-mHKY -l600 -q -d20", rooted.tree=simtree2)
seqs.easy3<-read.seqgen(seqs3)
write.fasta(seqs.easy3$org,"testTheta3.fas")
ourpath<-getwd()
gitpath<-paste(ourpath,"/SimSeqs",sep="")
# converting FASTA file to GENOME object
simSeq<-readData(gitpath,include.unknown=T)
simSeq@n.sites # gives the number of sites in the alignment
get.sum.data(simSeq) # gives the summary information of the alignment, with the @ you can get all of those summaries, for example:
Varsites<-simSeq@n.biallelic.sites #number of biallelic sites (SNPs)
Varsites
# aplying the "diversity.stats" methods
diversity.stats(simSeq,pi=TRUE)->divResults
Piout<-divResults@Pi
set.seed(123)
seqs1<-seqgen(opts= "-mHKY -l600 -q -d1", rooted.tree=simtree1)
seqs.easy1<-read.seqgen(seqs1)
write.fasta(seqs.easy1$org,"test_d1.fas")
set.seed(123)
seqs2<-seqgen(opts= "-mHKY -l600 -q -d5", rooted.tree=simtree1)
seqs.easy2<-read.seqgen(seqs2)
write.fasta(seqs.easy2$org,"test_d5.fas")
set.seed(123)
seqs3<-seqgen(opts= "-mHKY -l600 -q -d10", rooted.tree=simtree1)
seqs.easy3<-read.seqgen(seqs3)
write.fasta(seqs.easy3$org,"test_d10.fas")
ourpath<-getwd()
gitpath<-paste(ourpath,"/SimSeqs",sep="")
# converting FASTA file to GENOME object
simSeq<-readData(gitpath,include.unknown=T)
simSeq@n.sites # gives the number of sites in the alignment
get.sum.data(simSeq) # gives the summary information of the alignment, with the @ you can get all of those summaries, for example:
Varsites<-simSeq@n.biallelic.sites #number of biallelic sites (SNPs)
Varsites
ourpath<-getwd()
gitpath<-paste(ourpath,"/SimSeqs",sep="")
# converting FASTA file to GENOME object
simSeq<-readData(gitpath,include.unknown=T)
simSeq@n.sites # gives the number of sites in the alignment
get.sum.data(simSeq) # gives the summary information of the alignment, with the @ you can get all of those summaries, for example:
Varsites<-simSeq@n.biallelic.sites #number of biallelic sites (SNPs)
Varsites
# aplying the "diversity.stats" methods
diversity.stats(simSeq,pi=TRUE)->divResults
Piout<-divResults@Pi
Totsites<-divResults@n.sites
Piout
set.seed(123)
seqs1<-seqgen(opts= "-mHKY -l600 -q -d15", rooted.tree=simtree1)
seqs.easy1<-read.seqgen(seqs1)
write.fasta(seqs.easy1$org,"test_d15.fas")
set.seed(123)
seqs2<-seqgen(opts= "-mHKY -l600 -q -d25", rooted.tree=simtree1)
seqs.easy2<-read.seqgen(seqs2)
write.fasta(seqs.easy2$org,"test_d25.fas")
set.seed(123)
seqs3<-seqgen(opts= "-mHKY -l600 -q -d30", rooted.tree=simtree1)
seqs.easy3<-read.seqgen(seqs3)
write.fasta(seqs.easy3$org,"test_d30.fas")
ourpath<-getwd()
gitpath<-paste(ourpath,"/SimSeqs",sep="")
# converting FASTA file to GENOME object
simSeq<-readData(gitpath,include.unknown=T)
simSeq@n.sites # gives the number of sites in the alignment
get.sum.data(simSeq) # gives the summary information of the alignment, with the @ you can get all of those summaries, for example:
Varsites
Varsites<-simSeq@n.biallelic.sites #number of biallelic sites (SNPs)
# aplying the "diversity.stats" methods
diversity.stats(simSeq,pi=TRUE)->divResults
Piout<-divResults@Pi
Piout
